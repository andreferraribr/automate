---
title: "üìä RREO & RGF - Relat√≥rios Fiscais"
subtitle: "Sistema Unificado de Relat√≥rios Fiscais do Governo Federal"
author: "Governo Federal"
date: today
execute:
  warning: false
  message: false
  cache: true
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    number-sections: true
    code-fold: true
    code-summary: "Mostrar c√≥digo"
    fig-width: 10
    fig-height: 6
---

# üìö Carregamento de Bibliotecas e Configura√ß√µes {#sec-setup}

```{r setup}
#| include: false

# Bibliotecas principais
library(dplyr)
library(tidyr)
library(stringr)
library(readxl)
library(janitor)
library(purrr)
library(forcats)
library(DT)
library(knitr)
library(kableExtra)

# Configura√ß√µes globais
options(OutDec = ",")
options(scipen = 999)

# Configura√ß√µes DT
options(DT.options = 
  list(
    pageLength = 20,
    lengthMenu = c(5, 10, 25, 50, 100),
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese.json')
  )
)

# Operadores customizados
`%notin%` <- Negate(`%in%`)
`%||%` <- function(x, y) if(is.null(x) || length(x) == 0 || is.na(x)) y else x

print("‚úÖ Bibliotecas carregadas com sucesso!")
```

## üîß Vari√°veis Globais

```{r variaveis_globais}
# Filtro principal do m√™s
mes_filtro <- "JUN/2025"

print(paste("üìÖ M√™s de refer√™ncia definido:", mes_filtro))
```

# üì• Importa√ß√£o dos Dados {#sec-dados}

## üßæ Dados de Receita

```{r dados_receita}
#| echo: true
#| eval: true

dados_receita <- read_excel("data/tg_receita.xlsx") %>% 
  clean_names() %>% 
  filter(orgao_uge_orcam_fiscal_s_n == "PERTENCE")

# Criar vari√°veis derivadas
dados_receita <- dados_receita %>% 
  mutate(
    tipo_modalidade = ifelse(
      nre1_categoria_economica_codigo %in% c(7, 8), 
      "intra", 
      "exceto intra"
    ),
    refinanciamento = ifelse(
      natureza_receita_codigo_completo %in% c(81110201, 21110201, 21210201), 
      "sim", 
      "nao"
    )
  )

print(paste("‚úÖ Dados de receita carregados:", nrow(dados_receita), "registros"))
```

## üí∞ Dados de Despesa

```{r dados_despesa}
#| echo: true
#| eval: true

# Buscar todos os arquivos de despesa
arq_despesa <- list.files(path = "data/", pattern = 'tg_despesa', full.names = TRUE)

dados_despesa <- map_df(arq_despesa, read_excel) %>%
  clean_names() %>%
  filter(orgao_uge_orcam_fiscal_s_n == "PERTENCE")

# Criar vari√°veis derivadas
dados_despesa <- dados_despesa %>%
  mutate(
    tipo_modalidade = ifelse(
      modalidade_aplicacao_codigo == 91,
      "intra",
      "exceto intra"
    ),
    refinanciamento = case_when(
      grupo_despesa_codigo_grupo == 6 &
        elemento_despesa_codigo %in% c(76, 77) &
        subfuncao_governo_codigo %in% c(841, 842, 843, 844, 846) &
        fonte_recursos_codigo == "443" ~ "sim",
      !(grupo_despesa_codigo_grupo == 6 &
        elemento_despesa_codigo %in% c(76, 77) &
        subfuncao_governo_codigo %in% c(841, 842, 843, 844, 846) &
        fonte_recursos_codigo == "443") ~ "nao",
      TRUE ~ "escape"
    ),
    poder = case_when(
      orgao_uge_orgao_maximo_codigo %in% c(59000) ~ "MINIST√âRIO P√öBLICO DA UNI√ÉO",
      orgao_uge_orgao_maximo_codigo %in% c(29000) ~ "DEFENSORIA P√öBLICA",
      TRUE ~ orgao_uge_poder_nome
    )
  )

print(paste("‚úÖ Dados de despesa carregados:", nrow(dados_despesa), "registros"))
```

## üìã Dados de Restos a Pagar

```{r dados_rp}
#| echo: true
#| eval: true

# RP Anexo 07
dados_rp_anexo_07 <- read_excel("data/tg_rp_anexo_07.xlsx") %>% 
  clean_names()

dados_rp_anexo_07 <- dados_rp_anexo_07 %>%  
  mutate(
    tipo_modalidade = ifelse(
      modalidade_aplicacao_codigo == 91, 
      "intra", 
      "exceto intra"
    ),
    poder = case_when(
      orgao_uge_orgao_maximo_codigo %in% c(59000) ~ "MINIST√âRIO P√öBLICO DA UNI√ÉO",
      orgao_uge_orgao_maximo_codigo %in% c(29000) ~ "DEFENSORIA P√öBLICA",
      TRUE ~ orgao_uge_poder_nome
    )
  )

# RP Anexo 12
dados_rp_anexo_12 <- read_excel("data/tg_rp_anexo_12.xlsx") %>% 
  clean_names()

# RP Anexo 08
dados_rp_anexo_08 <- read_excel("data/tg_rp_anexo_08.xlsx") %>% 
  clean_names()

print("‚úÖ Dados de Restos a Pagar carregados:")
print(paste("   - Anexo 07:", nrow(dados_rp_anexo_07), "registros"))
print(paste("   - Anexo 12:", nrow(dados_rp_anexo_12), "registros"))
print(paste("   - Anexo 08:", nrow(dados_rp_anexo_08), "registros"))
```

## üè¶ Dados Cont√°beis e Espec√≠ficos

```{r dados_contabeis}
#| echo: true
#| eval: true

# Tabela 04 - Contas Cont√°beis
dados_tabela_04 <- read_excel("data/dados_conta_contabil_tabela_04_claude_conta_contabil.xlsx") %>% 
  clean_names()

dados_tabela_04_170600 <- read_excel("data/dados_conta_contabil_tabela_04_claude_conta_contabil_170600.xlsx") %>% 
  clean_names() %>% 
  mutate(ug = "170600")

dados_tabela_04_filtro_rreo <- read_excel("data/dados_conta_contabil_tabela_04_claude_conta_contabil_filtro_rreo.xlsx") %>% 
  clean_names() %>% 
  mutate(ug = "demais")

# Anexo 06 - NDD e Categoria/Grupo
dados_ndd <- read_excel("data/tg_anexo_06_rreo_despesas_primarias_ndd.xlsx") %>% 
  clean_names()

dados_categoria_grupo <- read_excel("data/tg_anexo_06_rreo_despesas_primarias_categoria_grupo.xlsx") %>% 
  clean_names()

# RPN - Juros e Disponibilidades
tg_RPN_juros <- read_excel("data/tg_RPN_juros.xlsx") %>% 
  clean_names()

tg_RPN_disponibilidades <- read_excel("data/tg_RPN_disponibilidades.xlsx") %>% 
  clean_names()

print("‚úÖ Dados cont√°beis carregados:")
print(paste("   - Tabela 04:", nrow(dados_tabela_04), "registros"))
print(paste("   - Tabela 04 (170600):", nrow(dados_tabela_04_170600), "registros"))
print(paste("   - NDD:", nrow(dados_ndd), "registros"))
print(paste("   - RPN Juros:", nrow(tg_RPN_juros), "registros"))
```

## ‚öôÔ∏è Metodologia e Filtros

```{r metodologia}
#| echo: true
#| eval: true

# Filtros de metodologia
filtros_metodologia <- read_excel("data/filtros.xlsx", sheet = "metodologia")
atributos_metodologia <- read_excel("data/filtros.xlsx", sheet = "metodologia")

print("‚úÖ Metodologia carregada:")
print(paste("   - Filtros:", nrow(filtros_metodologia), "registros"))
print(paste("   - Atributos:", nrow(atributos_metodologia), "registros"))
```

## üìä Resumo dos Dados Carregados

```{r resumo_dados}
#| echo: false

# Criar tabela resumo
resumo_dados <- data.frame(
  Dataset = c(
    "Receita", "Despesa", "RP Anexo 07", "RP Anexo 12", "RP Anexo 08",
    "Tabela 04", "Tabela 04 (170600)", "Tabela 04 (RREO)", 
    "NDD", "Categoria/Grupo", "RPN Juros", "RPN Disponibilidades",
    "Filtros Metodologia"
  ),
  Registros = c(
    nrow(dados_receita), nrow(dados_despesa), nrow(dados_rp_anexo_07),
    nrow(dados_rp_anexo_12), nrow(dados_rp_anexo_08),
    nrow(dados_tabela_04), nrow(dados_tabela_04_170600), nrow(dados_tabela_04_filtro_rreo),
    nrow(dados_ndd), nrow(dados_categoria_grupo), nrow(tg_RPN_juros), 
    nrow(tg_RPN_disponibilidades), nrow(filtros_metodologia)
  ),
  Status = rep("‚úÖ Carregado", 13)
)

kable(resumo_dados, 
      caption = "üìã Resumo dos Datasets Carregados",
      format = "html") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
  row_spec(0, bold = TRUE, background = "#f8f9fa")
```

# üîß Fun√ß√µes Auxiliares {#sec-funcoes-aux}

## üî¢ Fun√ß√µes de Formata√ß√£o

### Formata√ß√£o de N√∫meros

```{r formatar_numero}
#| echo: true
#| eval: true

#' Formatar n√∫meros para exibi√ß√£o brasileira
#' @param x Vetor num√©rico a ser formatado
#' @return String formatada com ponto como separador de milhares e v√≠rgula como decimal
formatar_numero <- function(x) {
  format(x, big.mark = ".", decimal.mark = ",", scientific = FALSE, nsmall = 2)
}

# Teste da fun√ß√£o
exemplo_numero <- 1234567.89
print(paste("N√∫mero original:", exemplo_numero))
print(paste("N√∫mero formatado:", formatar_numero(exemplo_numero)))
```

### Formata√ß√£o de Tabelas

```{r dt_formatada}
#| echo: true
#| eval: true

#' Criar tabela DT formatada com totais
#' @param df Data frame a ser formatado
#' @param grupo Vetor com nomes das colunas de agrupamento (n√£o num√©ricas)
#' @return Objeto DT formatado
dt_formatada <- function(df, grupo) {
  library(DT)
  library(janitor)
  
  datatable(
    df %>% adorn_totals("row"), 
    rownames = FALSE,
    extensions = 'Buttons',
    options = list(
      lengthMenu = c(5, 10, 25, 50, 100),
      dom = 'Bfrtip',
      buttons = list('excel')
    )
  ) %>% 
  formatRound(
    setdiff(df %>% colnames(), grupo), 
    2, 
    mark = ".", 
    dec.mark = ","
  ) %>% 
  DT::formatStyle(
    columns = colnames(.$x$data), 
    fontSize = '75%'
  )
}

print("‚úÖ Fun√ß√£o dt_formatada definida")
```

## üîÑ Fun√ß√µes de Transforma√ß√£o

### Tabela Pivotada

```{r tabela_pivotada}
#| echo: true
#| eval: true

#' Pivotar tabela a partir dos itens de informa√ß√£o
#' @param df Data frame com dados
#' @param grupo Vetor com nomes das colunas de agrupamento
#' @return Data frame pivotado e sumarizado
tabela_pivotada <- function(df, grupo) {
  library(dplyr)
  library(tidyr)
  
  # Obter itens √∫nicos de informa√ß√£o
  itens <- df$item_informacao_nome %>% unique() %>% na.omit()
  
  # Verificar se a coluna principal existe
  if (!"saldo_r_item_informacao" %in% names(df)) {
    stop("Coluna 'saldo_r_item_informacao' n√£o encontrada no data frame")
  }
  
  # Pivotar e sumarizar apenas a coluna num√©rica
  df %>% 
    group_by(!!!syms(grupo)) %>% 
    pivot_wider(
      names_from = item_informacao_nome, 
      values_from = saldo_r_item_informacao,
      values_fill = 0
    ) %>% 
    # Sumarizar apenas as colunas que correspondem aos itens (num√©ricas)
    summarise(
      across(all_of(itens), ~ sum(.x, na.rm = TRUE)),
      .groups = "drop"
    )
}

print("‚úÖ Fun√ß√£o tabela_pivotada definida")

#' Debug de estrutura de dados
#' @param df Data frame para debug
#' @param nome Nome do data frame
debug_estrutura <- function(df, nome = "DataFrame") {
  cat("\n=== DEBUG:", nome, "===\n")
  cat("Dimens√µes:", nrow(df), "linhas x", ncol(df), "colunas\n")
  cat("Colunas:", paste(names(df), collapse = ", "), "\n")
  
  # Mostrar tipos de colunas
  cat("Tipos de colunas:\n")
  tipos <- sapply(df, class)
  for(i in seq_along(tipos)) {
    cat(" -", names(tipos)[i], ":", tipos[i], "\n")
  }
  
  # Mostrar amostras de cada coluna
  cat("Amostras (primeiras 3 linhas):\n")
  print(head(df, 3))
  
  cat("========================\n\n")
}

print("‚úÖ Fun√ß√£o debug_estrutura definida")
```

## üß© Fun√ß√µes de Desmembramento

### Desmembrar C√≥digo

```{r desmembrar_codigo}
#| echo: true
#| eval: true

#' Desmembrar c√≥digo no formato MMM/AAAXXX[A|T]##[A-Za-z0-9]{0,10}
#' @param codigo String no formato especificado
#' @return Lista com componentes: mes_lancamento, demonstrativo, anexo, parte
desmembrar_codigo <- function(codigo) {
  library(stringr)
  
  # Validar formato
  if (!str_detect(codigo, "^[A-Z]{3}/\\d{4}[A-Za-z0-9]{3}[AT]\\d{2}[A-Za-z0-9]{0,10}$")) {
    stop("C√≥digo inv√°lido. Deve seguir o formato: MMM/AAAXXX[A|T]##[A-Za-z0-9]{0,10}")
  }
  
  # Extrair componentes
  mes_lancamento <- str_sub(codigo, 1, 8)   # Ex.: "JUN/2025"
  demonstrativo <- str_sub(codigo, 9, 11)   # Ex.: "RGF" ou "REO"
  anexo <- str_sub(codigo, 12, 14)          # Ex.: "A08"
  parte <- str_sub(codigo, 15, -1)          # Ex.: "despesa" ou ""
  
  # Validar mes_lancamento
  if (!str_detect(mes_lancamento, "^[A-Z]{3}/\\d{4}$")) {
    stop("Formato de mes_lancamento inv√°lido. Deve ser MMM/AAAA")
  }
  
  # Validar m√™s
  meses_validos <- c("JAN", "FEV", "MAR", "ABR", "MAI", "JUN", 
                     "JUL", "AGO", "SET", "OUT", "NOV", "DEZ")
  mes_letras <- str_sub(mes_lancamento, 1, 3)
  if (!(mes_letras %in% meses_validos)) {
    stop(paste("M√™s inv√°lido:", mes_letras))
  }
  
  # Validar demonstrativo
  if (!str_detect(demonstrativo, "^[A-Za-z0-9]{3}$")) {
    stop("Demonstrativo deve ter exatamente 3 caracteres alfanum√©ricos")
  }
  
  # Validar anexo
  if (!str_detect(anexo, "^[AT]\\d{2}$")) {
    stop("Anexo deve ser A ou T seguido por 2 d√≠gitos")
  }
  
  # Definir parte como NA se vazio
  parte <- ifelse(parte == "", NA_character_, parte)
  
  list(
    mes_lancamento = mes_lancamento,
    demonstrativo = demonstrativo,
    anexo = anexo,
    parte = parte
  )
}

# Teste da fun√ß√£o
codigo_teste <- "JUN/2025RGFA07"
resultado_teste <- desmembrar_codigo(codigo_teste)
print("Teste de desmembramento:")
print(resultado_teste)
```

Melhorias:

Ajustar o c√≥digo para mudar o padr√£o do nome das lista de crit√©rios.

Utilizar algo do tipo criterios_rreo_A08_mde_despesa\_\@\@\@\@\@\@

desmebrar o nome da lista e levar os detalhes para o df quando aplicar a funcao agrupar

levar para o df agrupada o nome da df de origem, por exemplo, dados_despesa e o nome do arquivo em xlsx.

no futuro, capturar os detalhes dos filtros do relat√≥rio do TG e a data de execu√ß√£o do mesmo.

### Agrupar e Combinar Dados

```{r agrupar_combinar}
#| echo: true
#| eval: true



#' Agrupar, combinar e adicionar colunas com base no c√≥digo
#' @param df Data frame de entrada
#' @param criterios Lista de crit√©rios por categoria
#' @param codigo C√≥digo a ser desmembrado
#' @return Data frame processado e classificado
agrupar_e_combinar_dados <- function(df, criterios, codigo) {
  library(dplyr)
  library(purrr)
  library(forcats)
  library(stringr)
  
  # Desmembrar c√≥digo
  params <- desmembrar_codigo(codigo)
  
  # Filtrar por m√™s se coluna existir
  if ("mes_lancamento" %in% colnames(df)) {
    df <- df %>% filter(mes_lancamento == params$mes_lancamento)
  } else {
    warning("Coluna 'mes_lancamento' n√£o encontrada. Ignorando filtro por m√™s.")
  }
  
  # Processar cada categoria
  processar_categoria <- function(categoria, crit) {
    tryCatch({
      # Avaliar condi√ß√£o
      condicao_expr <- eval(parse(text = crit$criterio), envir = df)
      
      df %>%
        filter(condicao_expr) %>%
        group_by(mes_lancamento, item_informacao_nome, item_informacao_codigo) %>%
        summarise(
          saldo_r_item_informacao = sum(saldo_r_item_informacao, na.rm = TRUE), 
          .groups = "drop"
        ) %>%
        mutate(
          categoria = categoria,
          mes_lancamento = params$mes_lancamento,
          demonstrativo = params$demonstrativo,
          anexo = params$anexo,
          parte = params$parte
        ) %>%
        # Reordenar por c√≥digo
        mutate(item_informacao_nome = fct_reorder(item_informacao_nome, item_informacao_codigo))
    }, error = function(e) {
      warning(paste("Erro ao processar categoria", categoria, ":", e$message))
      return(data.frame())
    })
  }
  
  # Aplicar crit√©rios
  resultado <- map_df(names(criterios), ~ processar_categoria(.x, criterios[[.x]]))
  
  # Criar objeto no ambiente global
  assign(codigo, resultado, envir = .GlobalEnv)
  
  return(resultado)
}

print("‚úÖ Fun√ß√£o agrupar_e_combinar_dados definida")
```

## üõ†Ô∏è Utilit√°rios Diversos

### Fun√ß√£o de Valida√ß√£o

```{r validacao}
#| echo: true
#| eval: true

#' Validar se data frame possui colunas obrigat√≥rias
#' @param df Data frame a ser validado
#' @param colunas_obrigatorias Vetor com nomes das colunas obrigat√≥rias
#' @return TRUE se v√°lido, erro se inv√°lido
validar_colunas <- function(df, colunas_obrigatorias) {
  colunas_presentes <- names(df)
  colunas_ausentes <- setdiff(colunas_obrigatorias, colunas_presentes)
  
  if (length(colunas_ausentes) > 0) {
    stop(paste("Colunas ausentes:", paste(colunas_ausentes, collapse = ", ")))
  }
  
  return(TRUE)
}

print("‚úÖ Fun√ß√£o validar_colunas definida")
```

# üìä Fun√ß√µes de An√°lise {#sec-funcoes-analise}

## üí∞ Fun√ß√µes para DCL (D√≠vida Consolidada L√≠quida)

### Tratamento de Valores NA

```{r tratar_na}
#| echo: true
#| eval: true

#' Tratar valores NA e nulos
#' @param x Valor a ser tratado
#' @return Valor tratado (0 se NA/NULL)
tratar_na <- function(x) {
  ifelse(is.na(x) | length(x) == 0, 0, x)
}

print("‚úÖ Fun√ß√£o tratar_na definida")
```

## üßÆ Fun√ß√µes de C√°lculo Geral

### C√°lculo de Percentuais

```{r calcular_percentuais}
#| echo: true
#| eval: true

#' Calcular percentuais com tratamento de divis√£o por zero
#' @param valor_numerador Valor do numerador
#' @param valor_denominador Valor do denominador
#' @param casas_decimais N√∫mero de casas decimais
#' @return Percentual calculado
calcular_percentual <- function(valor_numerador, valor_denominador, casas_decimais = 2) {
  if (is.na(valor_denominador) || valor_denominador == 0) {
    return(0)
  }
  
  percentual <- (valor_numerador / valor_denominador) * 100
  round(percentual, casas_decimais)
}

# Teste da fun√ß√£o
teste_perc <- calcular_percentual(25, 100)
print(paste("Teste percentual 25/100:", teste_perc, "%"))
```

# üìã RREO Anexo 01 - Balan√ßo Or√ßament√°rio {#sec-anexo-07}

```{r}
datatable(dados_despesa %>% filter(tipo_modalidade != "intra", item_informacao_nome == "DESPESAS EMPENHADAS") %>% group_by(refinanciamento, grupo_despesa_codigo_grupo, grupo_despesa_nome) %>% summarise(despesa_empenhada = sum(saldo_r_item_informacao, na.rm = TRUE) )  %>% adorn_totals("row"), rownames = FALSE,
  colnames = c("refinanciamento", "Grupo c√≥digo", "Grupo Nome", "Despesa empenhada"))%>% formatRound("despesa_empenhada", 2, mark = ".", dec.mark = "," )%>% 
  DT::formatStyle(columns = colnames(.$x$data), fontSize = '75%')
```

```{r}
agrupado_despesa_tipo_modalidade_refinanciamento_categoria_grupo <- c( "tipo_modalidade"  ,"refinanciamento","categoria_economica_despesa_codigo", "categoria_economica_despesa_nome", "grupo_despesa_codigo_grupo", "grupo_despesa_nome")


dt_formatada(tabela_pivotada(dados_despesa %>% filter(mes_lancamento == mes_filtro), agrupado_despesa_tipo_modalidade_refinanciamento_categoria_grupo), agrupado_despesa_tipo_modalidade_refinanciamento_categoria_grupo)
```

# üìã RREO Anexo 03 - RCL

criar linha para RP cancelado. Criar relat√≥rio no TG

|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |
|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |
|  | RP Cancelados de Transfer√™ncias Constitucionais e Legais |  | 1,40 |  | 138.967,82 |  | 5.326,15 |  | 0,00 |  | 0,00 |  | 0,00 |  |
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |

```{r criterios-receitas}
#| code-fold: true


# ===============================================================================
# CRIT√âRIOS PARA RECEITAS - ANEXO 3 RCL
# ===============================================================================

criterios_receitas_anexo3_rcl <- list(
  
  # === RECEITAS CORRENTES POR ORIGEM (01-09) ===
  
  # IMPOSTOS, TAXAS E CONTRIBUI√á√ïES DE MELHORIA
  `01  Impostos, Taxas e Contribui√ß√µes de Melhoria` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 1"
  ),
  
  # RECEITA DE CONTRIBUI√á√ïES
  `02  Receita de Contribui√ß√µes` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 2"
  ),
  
  # RECEITA PATRIMONIAL
  `03  Receita Patrimonial` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 3"
  ),
  
  # RECEITA AGROPECU√ÅRIA
  `04  Receita Agropecu√°ria` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 4"
  ),
  
  # RECEITA INDUSTRIAL
  `05  Receita Industrial` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 5"
  ),
  
  # RECEITA DE SERVI√áOS
  `06  Receita de Servi√ßos` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 6"
  ),
  
  # TRANSFER√äNCIAS CORRENTES
  `07  Transfer√™ncias Correntes` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 7"
  ),
  
  # RECEITAS CORRENTES A CLASSIFICAR
  `08  Receitas Correntes a Classificar` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 8"
  ),
  
  # OUTRAS RECEITAS CORRENTES
  `09  Outras Receitas Correntes` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 9"
  ),
  
  # === ITENS ESPEC√çFICOS PARA C√ÅLCULO DA RCL ===
  
  # TRANSFER√äNCIAS CONSTITUCIONAIS E LEGAIS
  `10  Transfer√™ncias Constitucionais e Legais` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 7 & (
      grepl('FPE|FPM|CONSTITUCIONAL|LEGAL', natureza_receita_nome, ignore.case = TRUE) |
      grepl('^172[0-9]', natureza_receita_codigo_completo) |
      grepl('^171[0-9]', natureza_receita_codigo_completo)
    )
    "
  ),
  
  # CONTRIB. EMPREGADORES E TRAB. PARA SEG. SOCIAL
  `11  Contrib. Empregadores e Trabalhadores para Seguridade Social` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & fonte_recursos_codigo == '054' & 
    !natureza_receita_codigo_completo %in% c(
      '19900300', '19900310', '19900311', '19900312', '19900313', '19900314',
      '19990300', '19990301', '19990302', '19990303', '19990304'
    )
    "
  ),
  
  # CONTRIB. DO SERVIDOR PARA O PLANO DE PREVID√äNCIA
  `12  Contrib. Plano Seguridade Social do Servidor` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & (
      fonte_recursos_codigo %in% c('055', '056') |
      natureza_receita_codigo_completo == '12150116'
    )
    "
  ),
  
  # COMPENSA√á√ÉO FINANC. ENTRE REGIMES PREVID√äNCIA
  `13  Compensa√ß√£o Financeira entre Regimes RPPS` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & natureza_receita_codigo_completo %in% c(
      '19900300', '19900310', '19900311', '19900312', '19900313', '19900314',
      '19990300', '19990301', '19990302', '19990303', '19990304'
    )
    "
  ),
  
  # CONTRIB. DOS MILITARES PARA O CUSTEIO DAS PENS√ïES
  `14  Contrib. para Custeio Pens√µes Militares` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & (
      grepl('^1210051', natureza_receita_codigo_completo) |
      grepl('^1215041', natureza_receita_codigo_completo) |
      grepl('^121911', natureza_receita_codigo_completo)
    )
    "
  ),
  
  # CONTRIBUI√á√ïES PARA PIS/PASEP
  `15  Contribui√ß√£o para PIS/PASEP` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & (
      (grepl('^1210091|^1212', natureza_receita_codigo_completo) & 
       !fonte_recursos_codigo %in% c('055', '056', '054')) |
      (!grepl('^1210091|^1212', natureza_receita_codigo_completo) & 
       fonte_recursos_codigo %in% c('040', '041'))
    )
    "
  ),
  
  # DEDU√á√ïES DAS RECEITAS
  `16  Dedu√ß√µes das Receitas` = list(
    criterio = "
    (grepl('^1212', natureza_receita_codigo_completo) & fonte_recursos_codigo %in% c('031', '032', '040', '041')) |
    (grepl('^1214', natureza_receita_codigo_completo) & fonte_recursos_codigo == '054') |
    (grepl('^1215', natureza_receita_codigo_completo) & fonte_recursos_codigo %in% c('023', '032', '055', '056')) |
    (grepl('^1219', natureza_receita_codigo_completo) & fonte_recursos_codigo == '054') |
    (grepl('^1911', natureza_receita_codigo_completo) & fonte_recursos_codigo == '054') |
    (grepl('^1922', natureza_receita_codigo_completo) & fonte_recursos_codigo %in% c('040', '054', '056')) |
    (grepl('^1923', natureza_receita_codigo_completo) & fonte_recursos_codigo == '054') |
    (grepl('^1999', natureza_receita_codigo_completo) & fonte_recursos_codigo == '054')
    "
  )
)
```

```{r criterios_despesas}

# ===============================================================================
# CRIT√âRIOS PARA DESPESAS (DEDU√á√ïES) - ANEXO 3 RCL
# ===============================================================================

criterios_despesas_anexo3_rcl <- list(
  
  # TRANSFER√äNCIAS CONSTITUCIONAIS E LEGAIS (DESPESAS)
  `01  Transfer√™ncias Constitucionais e Legais` = list(
    criterio = "
    acao_governo_codigo %in% c('0E36', '00SB') | 
    grepl('^28846090900RX', programa_governo_codigo) | 
    (programa_governo_codigo %in% c('0903', '2030', '2080') & 
     modalidade_aplicacao_codigo %in% c(30, 31, 32, 35, 36, 40, 41, 42, 45, 46) & 
     acao_governo_codigo %in% c('0044', '0045', '0046', '0050', '0051', '00H6', '006M', 
                                '00G6', '0169', '0223', '0369', '0546', '0547', '0999', 
                                '099B', '0A53', '0C03', '0C33', '0E25', '0E36', '00PX', 
                                '00QR', '00S3', '00S7', '00S8', '00SE', '00RX', '00UH'))
    "
  ),
  
  # OUTRAS DEDU√á√ïES (DESPESAS)
  `02  Outras Dedu√ß√µes` = list(
    criterio = "
    acao_governo_codigo %in% c('0E36', '00SB') | 
    grepl('^28846090900RX', programa_governo_codigo) | 
    (programa_governo_codigo %in% c('0903', '2030', '2080') & 
     modalidade_aplicacao_codigo %in% c(30, 31, 32, 35, 36, 40, 41, 42, 45, 46) & 
     acao_governo_codigo %in% c('0044', '0045', '0046', '0050', '0051', '00H6', '006M', 
                                '00G6', '0169', '0223', '0369', '0546', '0547', '0999', 
                                '099B', '0A53', '0C03', '0C33', '0E25', '0E36', '00PX', 
                                '00QR', '00S3', '00S7', '00S8', '00SE', '00RX', '00UH'))
    "
  )
)
```

## üîÑ Processamento dos Dados

```{r processamento}
#| message: false
#| warning: false

# Par√¢metros
codigo_relatorio <- "JUN/2025REOA03rcl"

# Processamento das receitas
receitas_anexo3_rcl <- agrupar_e_combinar_dados(
  df = dados_receita %>% filter(orgao_uge_orcam_fiscal_s_n == "PERTENCE"),
  criterios = criterios_receitas_anexo3_rcl,
  codigo = codigo_relatorio
)

receitas_anexo3_rcl <- receitas_anexo3_rcl %>% 
  separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_receitas_anexo3_rcl <- receitas_anexo3_rcl %>% 
  filter(mes_lancamento == mes_filtro) %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)

# Processamento das despesas
despesas_anexo3_rcl <- agrupar_e_combinar_dados(
  df = dados_despesa %>% unique(),
  criterios = criterios_despesas_anexo3_rcl,
  codigo = codigo_relatorio
)

despesas_anexo3_rcl <- despesas_anexo3_rcl %>% 
  separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_despesas_anexo3_rcl <- despesas_anexo3_rcl %>% 
  filter(mes_lancamento == mes_filtro) %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)
```

## üìä Demonstrativo da Receita Corrente L√≠quida

```{r tabela-rcl}
#| echo: false

# Criar tabela no formato oficial
criar_tabela_rcl_oficial <- function(receitas_dt, despesas_dt) {
  
  # Fun√ß√£o para buscar valor ou retornar 0
  buscar_valor <- function(dt, ordem_num, coluna = "RECEITA ORCAMENTARIA (LIQUIDA)") {
    if (coluna %in% names(dt)) {
      valor <- dt %>% 
        filter(ordem == sprintf("%02d", ordem_num)) %>% 
        pull(!!sym(coluna))
      return(ifelse(length(valor) > 0 && !is.na(valor), valor, 0))
    }
    return(0)
  }
  
  # Buscar valores das receitas (apenas se existirem)
  receitas_valores <- sapply(1:9, function(i) buscar_valor(receitas_dt, i))
  total_receitas <- sum(receitas_valores, na.rm = TRUE)
  
  # === C√ÅLCULOS INTERMEDI√ÅRIOS (N√ÉO APARECEM NA TABELA) ===
  # Buscar valores das dedu√ß√µes espec√≠ficas
  contrib_emp_trab <- buscar_valor(receitas_dt, 11)      # Contrib. Emp. e Trab. p/ Seg. Social
  contrib_servidor <- buscar_valor(receitas_dt, 12)      # Contrib. Plano Seg. Social do Servidor
  compensacao_rpps <- buscar_valor(receitas_dt, 13)      # Compensa√ß√£o Financeira entre Regimes RPPS
  contrib_militares <- buscar_valor(receitas_dt, 14)     # Contrib. p/ Custeio Pens√µes Militares
  contrib_pis_pasep <- buscar_valor(receitas_dt, 15)     # Contribui√ß√£o p/ PIS/PASEP
  deducoes_receitas <- buscar_valor(receitas_dt, 16)     # Dedu√ß√µes das Receitas (INTERMEDI√ÅRIO)
  
  # Transfer√™ncias Constitucionais e Legais - usar DESPESAS LIQUIDADAS (item informa√ß√£o 25)
  transf_constitucionais <- buscar_valor(despesas_dt, 1, "DESPESAS LIQUIDADAS")
  
  # Total de dedu√ß√µes (para o c√°lculo da RCL)
  total_deducoes <- transf_constitucionais + contrib_emp_trab + contrib_servidor + 
                   compensacao_rpps + contrib_militares + contrib_pis_pasep
  
  # RCL final
  rcl_final <- total_receitas - total_deducoes
  
  # === CRIAR TABELA FINAL (APENAS LINHAS QUE APARECEM NO RELAT√ìRIO OFICIAL) ===
  especificacao <- c()
  valores <- c()
  
  # RECEITA CORRENTE (I)
  especificacao <- c(especificacao, "RECEITA CORRENTE (I)")
  valores <- c(valores, total_receitas)
  
  # Adicionar apenas linhas com valores > 0
  nomes_receitas <- c(
    "    Impostos, Taxas e Contribui√ß√µes de Melhoria",
    "    Receita de Contribui√ß√µes", 
    "    Receita Patrimonial",
    "    Receita Agropecu√°ria",
    "    Receita Industrial",
    "    Receita de Servi√ßos",
    "    Transfer√™ncias Correntes",
    "    Receitas Correntes a Classificar",
    "    Outras Receitas Correntes"
  )
  
  for(i in 1:9) {
    if(receitas_valores[i] > 0) {
      especificacao <- c(especificacao, nomes_receitas[i])
      valores <- c(valores, receitas_valores[i])
    }
  }
  
  # DEDU√á√ïES (II)
  if(total_deducoes > 0) {
    especificacao <- c(especificacao, "DEDU√á√ïES (II)")
    valores <- c(valores, total_deducoes)
    
    # Apenas as linhas que aparecem no relat√≥rio oficial
    if(transf_constitucionais > 0) {
      especificacao <- c(especificacao, "    Transf. Constitucionais e Legais")
      valores <- c(valores, transf_constitucionais)
    }
    
    if(contrib_emp_trab > 0) {
      especificacao <- c(especificacao, "    Contrib. Emp. e Trab. p/ Seg. Social")
      valores <- c(valores, contrib_emp_trab)
    }
    
    if(contrib_servidor > 0) {
      especificacao <- c(especificacao, "    Contrib. Plano Seg. Social do Servidor")
      valores <- c(valores, contrib_servidor)
    }
    
    if(compensacao_rpps > 0) {
      especificacao <- c(especificacao, "    Compensa√ß√£o Financeira RGPS/RPPS")
      valores <- c(valores, compensacao_rpps)
    }
    
    if(contrib_militares > 0) {
      especificacao <- c(especificacao, "    Contrib. p/ Custeio Pens√µes Militares")
      valores <- c(valores, contrib_militares)
    }
    
    if(contrib_pis_pasep > 0) {
      especificacao <- c(especificacao, "    Contribui√ß√£o p/ PIS/PASEP")
      valores <- c(valores, contrib_pis_pasep)
    }
  }
  
  # RECEITA CORRENTE L√çQUIDA
  especificacao <- c(especificacao, "RECEITA CORRENTE L√çQUIDA (III) = (I - II)")
  valores <- c(valores, rcl_final)
  
  # Criar data frame final
  tabela_final <- data.frame(
    ESPECIFICACAO = especificacao,
    `R$ (milhares)` = formatC(valores / 1000, format = "f", digits = 0, big.mark = ".", decimal.mark = ","),
    check.names = FALSE,
    stringsAsFactors = FALSE
  )
  
  return(tabela_final)
}

# Gerar e exibir tabela
tabela_rcl <- criar_tabela_rcl_oficial(DT_receitas_anexo3_rcl, DT_despesas_anexo3_rcl)

# Exibir com formata√ß√£o
tabela_rcl %>%
  kable(
    caption = paste("DEMONSTRATIVO DA RECEITA CORRENTE L√çQUIDA - M√äS", toupper(month.name[mes_filtro]), "2025"),
    align = c("l", "r"),
    escape = FALSE
  ) %>%
  kableExtra::kable_styling(
    bootstrap_options = c("striped", "hover", "condensed"),
    full_width = FALSE,
    position = "left"
  ) %>%
  # Destacar linhas principais
  kableExtra::row_spec(which(grepl("^RECEITA CORRENTE \\(I\\)", tabela_rcl$ESPECIFICACAO)), 
                       bold = TRUE, background = "#E3F2FD") %>%
  kableExtra::row_spec(which(grepl("^DEDU√á√ïES \\(II\\)", tabela_rcl$ESPECIFICACAO)), 
                       bold = TRUE, background = "#FFEBEE") %>%
  kableExtra::row_spec(which(grepl("RECEITA CORRENTE L√çQUIDA", tabela_rcl$ESPECIFICACAO)), 
                       bold = TRUE, background = "#E8F5E8")
```

------------------------------------------------------------------------

*üìä Relat√≥rio gerado automaticamente em `r format(Sys.time(), "%d/%m/%Y √†s %H:%M")`*

# üìã RREO Anexo 04 Previd√™ncia

O **Anexo 04** apresenta o demonstrativo das receitas e despesas previdenci√°rias do Governo Federal, segregado em tr√™s sistemas:

-   **RGPS** - Regime Geral de Previd√™ncia Social
-   **RPPS** - Regime Pr√≥prio de Previd√™ncia Social (Civil e Militar)
-   **RPPS FCDF** - Regime Pr√≥prio de Previd√™ncia Social do Fundo Constitucional do Distrito Federal

### üéØ Objetivo

-   Demonstrar a sustentabilidade dos sistemas previdenci√°rios
-   Acompanhar o equil√≠brio atuarial dos regimes
-   Evidenciar as transfer√™ncias entre sistemas
-   Monitorar a evolu√ß√£o dos benef√≠cios previdenci√°rios

## üèõÔ∏è REGIME GERAL DE PREVID√äNCIA SOCIAL (RGPS)

### üí∞ Crit√©rios de Receitas RGPS

```{r criterios-receitas-rgps}
criterios_receitas_rgps <- list(
  
  # RECEITAS CORRENTES - DOS EMPREGADORES, TRABALHADORES E DEMAIS SEGURADOS
  `01  Receitas Correntes - Dos Empregadores, Trabalhadores e Demais Segurados` = list(
    criterio = "natureza_receita_codigo_completo %in% c('12100311', '12100312', '12100313', '12100311') & nre2_origem_receita_codigo_origem %in% c(2)"
  ),
  
  # RECEITAS CORRENTES - DEMAIS CONTRIBUI√á√ïES  
  `02  Receitas Correntes - Demais Contribui√ß√µes` = list(
    criterio = "nre2_origem_receita_codigo_origem %in% c(2) & natureza_receita_codigo_completo %notin% c('12100311', '12100312', '12100313')"
  ),
  
  # OUTRAS RECEITAS CORRENTES - COMPENSA√á√ÉO PREVIDENCI√ÅRIA RPPS/RGPS
  `03  Outras Receitas Correntes - Compensa√ß√£o Previdenci√°ria RPPS/RGPS` = list(
    criterio = "nre2_origem_receita_codigo_origem %in% c(9)"
  ),
  
  # DEMAIS RECEITAS CORRENTES
  `04  Demais Receitas Correntes` = list(
    criterio = "nre1_categoria_economica_codigo %in% c(1) & nre2_origem_receita_codigo_origem %notin% c(2,9)"
  ),
  
  # RECEITAS DE CAPITAL - ALIENA√á√ïES
  `05  Receitas de Capital - Aliena√ß√µes` = list(
    criterio = "nre2_origem_receita_codigo_origem %in% c(2) & nre1_categoria_economica_codigo %in% c(2)"
  ),
  
  # DEMAIS RECEITAS DE CAPITAL
  `06  Demais Receitas de Capital` = list(
    criterio = "nre1_categoria_economica_codigo %in% c(2) & nre2_origem_receita_codigo_origem %notin% c(2)"
  ),
  
  # RECEITAS INTRA-OR√áAMENT√ÅRIAS
  `07  Receitas INTRA-OR√áAMENT√ÅRIAS` = list(
    criterio = "nre1_categoria_economica_codigo %in% c(7, 8)"
  )
)
```

### üí∏ Crit√©rios de Despesas RGPS

```{r criterios-despesas-rgps}
criterios_despesas_rgps <- list(
  
  # APOSENTADORIAS
  `01  Aposentadorias` = list(
    criterio = "elemento_despesa_codigo %in% c('53', '54') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # PENS√ïES
  `02  Pens√µes` = list(
    criterio = "elemento_despesa_codigo %in% c('55', '56') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # OUTROS BENEF√çCIOS
  `03  Outros Benef√≠cios` = list(
    criterio = "elemento_despesa_codigo %in% c('57', '58') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # COMPENSA√á√ÉO PREVIDENCI√ÅRIA DO RGPS PARA O RPPS
  `04  Compensa√ß√£o Previdenci√°ria do RGPS para o RPPS` = list(
    criterio = "elemento_despesa_codigo %notin% c('57', '58', '53', '54', '55', '56') & acao_governo_codigo %in% c('009W', '0531') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # DEMAIS DESPESAS
  `05  Demais Despesas` = list(
    criterio = "elemento_despesa_codigo %notin% c('57', '58', '53', '54', '55', '56') & acao_governo_codigo %notin% c('009W', '0531') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # A DETALHAR
  `06  A detalhar` = list(
    criterio = "elemento_despesa_codigo %in% c('00') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # DESPESAS PREVIDENCI√ÅRIAS (INTRA)
  `07  Despesas Previdenci√°rias (INTRA)` = list(
    criterio = "grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %in% c('91') & elemento_despesa_codigo %notin% c('01', '03', '05')"
  )
)
```

### üìä Processamento RGPS - Receitas

```{r processar-rgps-receitas}
# Processar receitas RGPS
receita_rgps <- agrupar_e_combinar_dados(
  df = dados_receita %>% 
    filter(
      unidade_orcamentaria_codigo %in% c(33904, 40904, 55902, 25917) | 
      natureza_receita_codigo_completo == 79900211
    ),
  criterios = criterios_receitas_rgps,
  codigo = "JUN/2025REOA04rgpsrec"
)

receita_rgps <- receita_rgps %>% 
  separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_receita_rgps <- receita_rgps %>% 
  filter(mes_lancamento == mes_filtro) %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)
```

```{r tabela-rgps-receitas}
# Exibir tabela de receitas RGPS
datatable(
  DT_receita_rgps,
  options = list(
    pageLength = 10,
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  ),
  caption = "RGPS - Receitas Previdenci√°rias"
) %>%
  formatRound(
    which(sapply(DT_receita_rgps, is.numeric)), 
    digits = 2, 
    mark = ".", 
    dec.mark = ","
  )
```

### üìä Processamento RGPS - Despesas

```{r processar-rgps-despesas}
# Processar despesas RGPS
despesa_rgps <- agrupar_e_combinar_dados(
  df = dados_despesa %>% 
    filter(unidade_orcamentaria_codigo %in% c(33904, 40904, 55902, 25917)),
  criterios = criterios_despesas_rgps,
  codigo = "JUN/2025REOA04rgpsdesp"
)

despesa_rgps <- despesa_rgps %>% 
  separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_despesa_rgps <- despesa_rgps %>% 
  filter(mes_lancamento == mes_filtro) %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)
```

```{r tabela-rgps-despesas}
# Exibir tabela de despesas RGPS
datatable(
  DT_despesa_rgps,
  options = list(
    pageLength = 10,
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  ),
  caption = "RGPS - Despesas Previdenci√°rias"
) %>%
  formatRound(
    which(sapply(DT_despesa_rgps, is.numeric)), 
    digits = 2, 
    mark = ".", 
    dec.mark = ","
  )
```

## üë• REGIME PR√ìPRIO DE PREVID√äNCIA SOCIAL (RPPS)

### üí∞ Crit√©rios de Receitas RPPS

```{r criterios-receitas-rpps}
criterios_receitas_rpps <- list(
  
 # CIVIS - RECEITA SEGURADOS - Ativo (CORRIGIDO)
`01  CIVIS - RECEITA SEGURADOS - Ativo` = list(
  criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12100423', '12100421', '12100422', '12100424', '12100461', '12100462', '12100463', '12100464') | startsWith(natureza_receita_codigo_completo, '1215011') | startsWith(natureza_receita_codigo_completo, '1215014') | startsWith(natureza_receita_codigo_completo, '121503'))"
),

# CIVIS - RECEITA SEGURADOS - Inativos (CORRIGIDO)
`02  CIVIS - RECEITA SEGURADOS - Inativos` = list(
  criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12100431', '12100433', '12100432', '12100434', '12100471') | startsWith(natureza_receita_codigo_completo, '1215012') | startsWith(natureza_receita_codigo_completo, '1215015'))"
),

# CIVIS - RECEITAS SEGURADOS - Pensionistas (CORRIGIDO) 
`03  CIVIS - RECEITAS SEGURADOS - Pensionistas` = list(
  criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12100481', '12100441', '12100442', '12100443', '12100444') | startsWith(natureza_receita_codigo_completo, '1215013') | startsWith(natureza_receita_codigo_completo, '1215016'))"
),

# CIVIS - RECEITA PATRONAL - Ativo (CORRIGIDO)
`04  CIVIS - RECEITA PATRONAL - Ativo` = list(
  criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12100411', '12100413', '12100412', '12100414', '72100411', '72100413', '72100414', '72100451', '72100452', '12100452', '12100453', '12100454') | startsWith(natureza_receita_codigo_completo, '121502') | startsWith(natureza_receita_codigo_completo, '721502'))"
),

# CIVIS - RECEITA PATRONAL - Inativos e Pensionistas (J√Å CORRETO)
`05  CIVIS - RECEITA PATRONAL - Inativos e Pensionistas - vinculada` = list(
  criterio = "fonte_recursos_codigo %notin% c('00', '000') & natureza_receita_codigo_completo %in% c('72100441')"
),
  
  # DRU - FCDF
  `06  DRU - FCDF` = list(
    criterio = "fonte_recursos_codigo %in% c('000', '00') & endsWith(fonte_recursos_detalhada_codigo, '980001') & startsWith(natureza_receita_codigo_completo, '12151')"
  ),
  
  # MILITARES - RECEITAS - Segurados
  `07  MILITARES - RECEITAS - Segurados` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & 
(natureza_receita_codigo_completo %in% c('12100511', '12100512', '12100513', '12105141', '12150411', '12150412', '12150421', '12150043', '12150044') | 
startsWith(natureza_receita_codigo_completo, '121911'))"
  )
  
  # # Total das Receitas RPPS
  # `08  Total das Receitas RPPS` = list(
  #   criterio = "unidade_orcamentaria_codigo %notin% c('33904', '40904') & fonte_recursos_codigo %notin% c('54', '00', '000', '054') & (grepl('PENSOES MILIT|PENS.MIL|RPPS|CPSS|CIV', natureza_receita_nome, ignore.case = TRUE) | startsWith(natureza_receita_codigo_completo, '1215') | startsWith(natureza_receita_codigo_completo, '7215'))"
  # )
)
```

### üí∏ Crit√©rios de Despesas RPPS

```{r criterios-despesas-rpps}
criterios_despesas_rpps <- list(
  
  # CIVIS - DESPESAS - A detalhar
  `01  CIVIS - DESPESAS - A detalhar` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('00') & acao_governo_codigo %in% c('0053', '0181') & funcao_governo_codigo %notin% c('10', '08')"
  ),
  
  # CIVIS - DESPESAS - Aposentadorias
  `02  CIVIS - DESPESAS - Aposentadorias` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('01') & acao_governo_codigo %in% c('0053', '0181')"
  ),
  
  # CIVIS - DESPESAS - Pens√µes
  `03  CIVIS - DESPESAS - Pens√µes` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('03') & acao_governo_codigo %in% c('0053', '0181')"
  ),
  
  # CIVIS - DESPESAS - Outros Benef√≠cios Previdenci√°rios
  `04  CIVIS - DESPESAS - Outros Benef√≠cios Previdenci√°rios` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845', '846') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %notin% c('00', '01', '03') & (acao_governo_codigo %in% c('0053', '0181', '0005', '0625') & funcao_governo_codigo %notin% c('10', '08') | acao_governo_codigo %in% c('0397'))"
  ),
  
  # MILITARES - DESPESAS - A Detalhar Pens√µes
  `05  MILITARES - DESPESAS - A Detalhar Pens√µes` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & acao_governo_codigo %in% c('0179', '000Q') & elemento_despesa_codigo %in% c('00')"
  ),
  
  # MILITARES - DESPESAS - Pens√µes
  `06  MILITARES - DESPESAS - Pens√µes` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845', '846') & grupo_despesa_codigo_grupo %in% c(1) & acao_governo_codigo %in% c('0179', '00QD') & elemento_despesa_codigo %in% c('03')"
  ),
  
  # MILITARES - DESPESAS - Outros Benef√≠cios Pensionistas
  `07  MILITARES - DESPESAS - Outros Benef√≠cios Pensionistas` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & acao_governo_codigo %in% c('214H', '218K', '0179', '00QD') & elemento_despesa_codigo %notin% c('00', '01', '03') & grupo_despesa_codigo_grupo %in% c(1)"
  ),
  
  
    # MILITARES - DESPESAS - A Detalhar Inativos
  `08  MILITARES - DESPESAS - A Detalhar Inativos` = list(
    criterio = "grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('00') & acao_governo_codigo %in% c('214H', '218K')"
  ),
  
  # MILITARES - DESPESAS - Inativos
  `09  MILITARES - DESPESAS - Inativos` = list(
    criterio = "grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('01') & acao_governo_codigo %in% c('214H', '218K')"
  ),
  

  
   # MILITARES - DESPESAS - Outros Outros Benef√≠cios Inativos
  `10  MILITARES - DESPESAS - Outros Outros Benef√≠cios Inativos` = list(
    criterio = "grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %notin% c( '00', '01') & acao_governo_codigo %in% c('214H', '218K')"
  )
)
```

### üìä Processamento RPPS - Receitas

```{r processar-rpps-receitas}
# Processar receitas RPPS
receita_rpps <- agrupar_e_combinar_dados(
  df = dados_receita %>% 
    filter(
      unidade_orcamentaria_codigo %notin% c(73901),
      fonte_recursos_codigo %notin% c('054')
    ),
  criterios = criterios_receitas_rpps,
  codigo = "JUN/2025REOA04rppsrec"
)

receita_rpps <- receita_rpps %>% 
  separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_receita_rpps <- receita_rpps %>% 
  filter(mes_lancamento == mes_filtro) %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)
```

verificar linha 08 Total das Receitas RPPS.

```{r tabela-rpps-receitas}
# Exibir tabela de receitas RPPS
datatable(
  DT_receita_rpps,
  options = list(
    pageLength = 10,
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  ),
  caption = "RPPS - Receitas Previdenci√°rias (Civil e Militar)"
) %>%
  formatRound(
    which(sapply(DT_receita_rpps, is.numeric)), 
    digits = 2, 
    mark = ".", 
    dec.mark = ","
  )
```

### üìä Processamento RPPS - Despesas

```{r processar-rpps-despesas}
# Processar despesas RPPS
despesa_rpps <- agrupar_e_combinar_dados(
  df = dados_despesa %>% 
    filter(
      unidade_orcamentaria_codigo %notin% c(73901),
      elemento_despesa_codigo %notin% c('04', '07', '11', '13', '16', '39', '67', '96'),
      acao_governo_codigo != '09HB'
    ),
  criterios = criterios_despesas_rpps,
  codigo = "JUN/2025REOA04rppsdesp"
)

despesa_rpps <- despesa_rpps %>% 
  separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_despesa_rpps <- despesa_rpps %>% 
  filter(mes_lancamento == mes_filtro) %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)
```

```{r tabela-rpps-despesas}
# Exibir tabela de despesas RPPS
datatable(
  DT_despesa_rpps,
  options = list(
    pageLength = 10,
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  ),
  caption = "RPPS - Despesas Previdenci√°rias (Civil e Militar)"
) %>%
  formatRound(
    which(sapply(DT_despesa_rpps, is.numeric)), 
    digits = 2, 
    mark = ".", 
    dec.mark = ","
  )
```

## üèõÔ∏è REGIME PR√ìPRIO DE PREVID√äNCIA SOCIAL - FCDF

### üí∞ Crit√©rios de Receitas FCDF

```{r criterios-receitas-fcdf}
criterios_receitas_fcdf <- list(
  
  # FCDF - RECEITA SEGURADOS - Ativo
  `01  FCDF - RECEITA SEGURADOS - Ativo` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12100431', '12104211', '12104221', '12104231', '12104411', '12104421', '12104431', '12104611', '12104621', '12104631', '12191111', '12191321', '12191411') | startsWith(natureza_receita_codigo_completo, '121503') | startsWith(natureza_receita_codigo_completo, '1215011') | startsWith(natureza_receita_codigo_completo, '1215014'))"
  ),
  
  # FCDF - RECEITA SEGURADOS - Inativos
  `02  FCDF - RECEITA SEGURADOS - Inativos` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12104311', '12104321', '12104331', '12104341', '12104711') | startsWith(natureza_receita_codigo_completo, '1215012') | startsWith(natureza_receita_codigo_completo, '1215015'))"
  ),
  
  # FCDF - RECEITAS SEGURADOS - Pensionistas
  `03  FCDF - RECEITAS SEGURADOS - Pensionistas` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12104811', '12104411', '12104421', '12104431', '12104441', '12105121', '12105131') | startsWith(natureza_receita_codigo_completo, '1215013') | startsWith(natureza_receita_codigo_completo, '1215016'))"
  ),
  
  # FCDF - RECEITA PATRONAL - Ativo
  `04  FCDF - RECEITA PATRONAL - Ativo` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12104111', '12104131', '12104121', '12104141', '72104111', '72104121', '72104131', '72104141', '72104511', '72104521', '72104531', '72104541') | startsWith(natureza_receita_codigo_completo, '121502') | startsWith(natureza_receita_codigo_completo, '721502'))"
  ),
  
  # FCDF - RECEITA PATRONAL - Inativos e Pensionistas - vinculada
  `05  FCDF - RECEITA PATRONAL - Inativos e Pensionistas - vinculada` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & natureza_receita_codigo_completo %in% c('72104411', '12150211')"
  ),
  
  # DRU - FCDF
  `06  DRU - FCDF` = list(
    criterio = "fonte_recursos_codigo %in% c('00', '000') & (natureza_receita_codigo_completo %in% c('12104811', '12104411', '12104421', '12104431', '12104441', '12105111', '12104211', '12104221', '12104231', '12104311', '12104321', '12104331', '12104341', '12104521', '12104531', '12104621', '12104631', '12104721', '12104731', '12104741', '12104831', '12104841') | startsWith(natureza_receita_codigo_completo, '1215') | startsWith(natureza_receita_codigo_completo, '7215'))"
  ),
  
  # Total de Receitas RPPS FCDF
  `07  Total de Receitas RPPS FCDF` = list(
    criterio = "unidade_orcamentaria_codigo %notin% c('55902', '33904') & fonte_recursos_codigo %notin% c('54', '054') & fonte_recursos_detalhada_codigo %notin% c('010073910') & fonte_recursos_codigo %in% c('23', '56', '023', '056', '024', '069') & (grepl('PENSI|PENSO|RPPS|CPSS', natureza_receita_nome, ignore.case = TRUE))"
  )
)
```

### üí∏ Crit√©rios de Despesas FCDF

```{r criterios-despesas-fcdf}
criterios_despesas_fcdf <- list(
  
  # FCDF - DESPESAS - A detalhar
  `01  FCDF - DESPESAS - A detalhar` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(1, 2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('00') & acao_governo_codigo %in% c('00Q2', '00QN', '00NS')"
  ),
  
  # FCDF - DESPESAS - Aposentadorias
  `02  FCDF - DESPESAS - Aposentadorias` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(1, 2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('01') & acao_governo_codigo %in% c('00Q2', '00QN', '00NS', '0312', '00NR')"
  ),
  
  # FCDF - DESPESAS - Pens√µes
  `03  FCDF - DESPESAS - Pens√µes` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(1, 2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('03') & acao_governo_codigo %in% c('00Q2', '00QN', '00NS', '0312', '00NR')"
  ),
  
  # FCDF - DESPESAS - Outros Benef√≠cios Previdenci√°rios
  `04  FCDF - DESPESAS - Outros Benef√≠cios Previdenci√°rios` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(1, 2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845', '846') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %notin% c('00', '01', '03') & (acao_governo_codigo %in% c('00Q2', '00NS', '00QN') | (acao_governo_codigo %in% c('0005', '0625') & funcao_governo_codigo %notin% c('10', '08')))"
  )
)
```

### üìä Processamento FCDF - Receitas

```{r processar-fcdf-receitas}
# Processar receitas FCDF
receita_rpps_fcdf <- agrupar_e_combinar_dados(
  df = dados_receita %>% 
    filter(unidade_orcamentaria_codigo %in% c(73901)),
  criterios = criterios_receitas_fcdf,
  codigo = "JUN/2025REOA04fcdf"
)

receita_rpps_fcdf <- receita_rpps_fcdf %>% 
  separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_receita_rpps_fcdf <- receita_rpps_fcdf %>% 
  filter(mes_lancamento == mes_filtro) %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)
```

```{r tabela-fcdf-receitas}
# Exibir tabela de receitas FCDF
datatable(
  DT_receita_rpps_fcdf,
  options = list(
    pageLength = 10,
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  ),
  caption = "RPPS FCDF - Receitas Previdenci√°rias"
) %>%
  formatRound(
    which(sapply(DT_receita_rpps_fcdf, is.numeric)), 
    digits = 2, 
    mark = ".", 
    dec.mark = ","
  )
```

### üìä Processamento FCDF - Despesas

```{r processar-fcdf-despesas}
# Processar despesas FCDF
despesa_rpps_fcdf <- agrupar_e_combinar_dados(
  df = dados_despesa %>% 
    filter(
      unidade_orcamentaria_codigo %in% c(73901),
      elemento_despesa_codigo %notin% c('04', '07', '11', '13', '16', '39', '67', '96'),
      acao_governo_codigo != '09HB'
    ),
  criterios = criterios_despesas_fcdf,
  codigo = "JUN/2025REOA04fcdfdesp"
)

despesa_rpps_fcdf <- despesa_rpps_fcdf %>% 
  separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_despesa_rpps_fcdf <- despesa_rpps_fcdf %>% 
  filter(mes_lancamento == mes_filtro) %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)
```

```{r tabela-fcdf-despesas}
# Exibir tabela de despesas FCDF
datatable(
  DT_despesa_rpps_fcdf,
  options = list(
    pageLength = 10,
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  ),
  caption = "RPPS FCDF - Despesas Previdenci√°rias"
) %>%
  formatRound(
    which(sapply(DT_despesa_rpps_fcdf, is.numeric)), 
    digits = 2, 
    mark = ".", 
    dec.mark = ","
  )
```

## üìä An√°lises Consolidadas

### üí° Indicadores por Sistema

```{r indicadores-sistemas}
# Calcular totais por sistema previdenci√°rio
calcular_total_sistema <- function(df_receitas, df_despesas, nome_sistema) {
  total_receitas <- df_receitas %>%
    summarise(total = sum(`RECEITA ORCAMENTARIA (LIQUIDA)`, na.rm = TRUE)) %>%
    pull(total)
  
  total_despesas <- df_despesas %>%
    summarise(total = sum(`DESPESAS LIQUIDADAS`, na.rm = TRUE)) %>%
    pull(total)
  
  resultado <- tibble(
    Sistema = nome_sistema,
    Receitas = total_receitas,
    Despesas = total_despesas,
    Resultado = total_receitas - total_despesas
  )
  
  return(resultado)
}

# Consolidar indicadores
indicadores_consolidados <- bind_rows(
  calcular_total_sistema(DT_receita_rgps, DT_despesa_rgps, "RGPS"),
  calcular_total_sistema(DT_receita_rpps, DT_despesa_rpps, "RPPS"),
  calcular_total_sistema(DT_receita_rpps_fcdf, DT_despesa_rpps_fcdf, "RPPS FCDF")
)

# Exibir tabela consolidada
kable(indicadores_consolidados,
      caption = "Indicadores Consolidados dos Sistemas Previdenci√°rios",
      format.args = list(big.mark = ".", decimal.mark = ",")) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
  row_spec(which(indicadores_consolidados$Resultado < 0), background = "#ffcccc") %>%
  row_spec(which(indicadores_consolidados$Resultado >= 0), background = "#ccffcc")
```

### üìà An√°lise de Sustentabilidade

```{r analise-sustentabilidade}
# Calcular ratios de sustentabilidade
analise_sustentabilidade <- indicadores_consolidados %>%
  mutate(
    `Raz√£o Receita/Despesa` = round(Receitas / Despesas, 3),
    `Cobertura (%)` = round((Receitas / Despesas) * 100, 1),
    `D√©ficit/Super√°vit` = case_when(
      Resultado < 0 ~ paste("D√©ficit:", format(abs(Resultado), big.mark = ".", decimal.mark = ",")),
      Resultado >= 0 ~ paste("Super√°vit:", format(Resultado, big.mark = ".", decimal.mark = ",")),
      TRUE ~ "Equilibrio"
    )
  ) %>%
  select(Sistema, `Raz√£o Receita/Despesa`, `Cobertura (%)`, `D√©ficit/Super√°vit`)

kable(analise_sustentabilidade,
      caption = "An√°lise de Sustentabilidade dos Sistemas Previdenci√°rios") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

### üîç Destaques da Execu√ß√£o

```{r destaques-execucao, echo=FALSE}
# Identificar sistema com maior d√©ficit/super√°vit
sistema_maior_deficit <- indicadores_consolidados %>%
  filter(Resultado == min(Resultado)) %>%
  pull(Sistema)

sistema_maior_receita <- indicadores_consolidados %>%
  filter(Receitas == max(Receitas)) %>%
  pull(Sistema)

cat("
### üéØ Principais Destaques

- **Sistema com Maior Arrecada√ß√£o**: ", sistema_maior_receita, "
- **Sistema com Maior Desequil√≠brio**: ", sistema_maior_deficit, "
- **Compensa√ß√£o Previdenci√°ria**: Transfer√™ncias entre RGPS e RPPS
- **Sustentabilidade**: Acompanhamento dos d√©ficits atuariais

### üìä Tend√™ncias Observadas

- **RGPS**: Maior volume de benefici√°rios e arrecada√ß√£o
- **RPPS Civil**: Despesas concentradas em aposentadorias e pens√µes
- **RPPS Militar**: Caracter√≠sticas espec√≠ficas das carreiras militares
- **FCDF**: Sistema espec√≠fico do Distrito Federal

### ‚ö†Ô∏è Pontos de Aten√ß√£o

- Monitoramento cont√≠nuo do equil√≠brio atuarial
- Acompanhamento das reformas previdenci√°rias
- Evolu√ß√£o demogr√°fica e seus impactos
- Sustentabilidade fiscal de longo prazo
")
```

## üìã Notas Metodol√≥gicas

### üîç Crit√©rios de Classifica√ß√£o

**Unidades Or√ßament√°rias por Sistema:**

-   **RGPS**: 33904, 40904, 55902, 25917
-   **RPPS**: Demais unidades (exceto 73901)
-   **FCDF**: 73901

**Elementos de Despesa Espec√≠ficos:**

-   **Aposentadorias**: 01 (RPPS), 53/54 (RGPS)
-   **Pens√µes**: 03 (RPPS), 55/56 (RGPS)
-   **Outros Benef√≠cios**: 57/58 (RGPS), demais elementos (RPPS)

### üìä Fontes de Dados

-   Sistema Integrado de Administra√ß√£o Financeira (SIAFI)
-   Tesouro Gerencial
-   Manual RREO - STN
-   Classifica√ß√µes or√ßament√°rias vigentes

### ‚ö†Ô∏è Observa√ß√µes Importantes

-   Per√≠odo de refer√™ncia: Junho/2025
-   Valores expressos em milhares de reais
-   Crit√©rios baseados no Manual RREO 2025
-   Segrega√ß√£o por esfera or√ßament√°ria
-   Filtros espec√≠ficos por sistema previdenci√°rio

------------------------------------------------------------------------

*üìä Relat√≥rio gerado automaticamente pelo sistema de Relat√≥rios Fiscais RREO & RGF*

# üìã RREO Anexo 07 - Restos a Pagar

## üìù Descri√ß√£o

Este anexo apresenta os Restos a Pagar classificados por:

-   **Tipo de Modalidade**: Intragovernamental vs Exceto Intragovernamental
-   **√ìrg√£o**: M√°ximo da estrutura organizacional
-   **Situa√ß√£o**: Processados e N√£o Processados

## üéØ Processamento dos Dados

### Valida√ß√£o dos Dados

```{r validacao_anexo_07}
#| echo: true

# Verificar se os dados existem
if (!exists("dados_rp_anexo_07")) {
  stop("‚ùå Dados do Anexo 07 n√£o encontrados. Execute a se√ß√£o de importa√ß√£o primeiro.")
}

# Validar colunas necess√°rias
colunas_necessarias <- c(
  "tipo_modalidade",
  "orgao_uge_orgao_maximo_codigo", 
  "orgao_uge_orgao_maximo_nome",
  "item_informacao_nome",
  "saldo_r_item_informacao"
)

# Valida√ß√£o usando fun√ß√£o centralizada
validar_colunas(dados_rp_anexo_07, colunas_necessarias)

print(paste("‚úÖ Dados validados:", nrow(dados_rp_anexo_07), "registros"))
print(paste("‚úÖ Colunas verificadas:", length(colunas_necessarias), "de", length(colunas_necessarias)))
```

### Defini√ß√£o dos Agrupamentos

```{r agrupamentos_anexo_07}
#| echo: true

# Definir colunas de agrupamento
agrupado_despesa_tipo_modalidade_orgao <- c(
  "tipo_modalidade", 
  "orgao_uge_orgao_maximo_codigo", 
  "orgao_uge_orgao_maximo_nome"
)

print("‚úÖ Agrupamentos definidos:")
print(agrupado_despesa_tipo_modalidade_orgao)
```

## üìà Tabela Principal - Restos a Pagar por Modalidade e √ìrg√£o

```{r tabela_anexo_07}
#| echo: true
#| eval: true

# Processar e exibir tabela principal usando fun√ß√µes centralizadas
dt_formatada(
  tabela_pivotada(dados_rp_anexo_07 %>% filter(mes_lancamento == mes_filtro), agrupado_despesa_tipo_modalidade_orgao), 
  agrupado_despesa_tipo_modalidade_orgao
)
```

## üìä An√°lises Complementares

### Resumo por Tipo de Modalidade

```{r resumo_modalidade_anexo_07}
#| echo: true
#| eval: true

resumo_modalidade <- dados_rp_anexo_07 %>%
  group_by(tipo_modalidade) %>%
  summarise(
    total_saldo = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    percentual = calcular_percentual(total_saldo, sum(total_saldo)),
    total_saldo_formatado = formatar_numero(total_saldo)
  )

kable(resumo_modalidade, 
      caption = "üí∞ Resumo de Restos a Pagar por Tipo de Modalidade",
      col.names = c("Tipo de Modalidade", "Total (R$)", "Percentual (%)", "Total Formatado"),
      format = "html") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
  row_spec(0, bold = TRUE, background = "#f8f9fa")
```

### Top 10 √ìrg√£os com Maiores Valores

```{r top_10_orgaos_anexo_07}
#| echo: true
#| eval: true

top_10_orgaos <- dados_rp_anexo_07 %>%
  group_by(orgao_uge_orgao_maximo_codigo, orgao_uge_orgao_maximo_nome) %>%
  summarise(
    total_saldo = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(total_saldo)) %>%
  head(10) %>%
  mutate(
    posicao = row_number(),
    total_saldo_formatado = formatar_numero(total_saldo)
  )

kable(top_10_orgaos, 
      caption = "üèÜ Top 10 √ìrg√£os com Maiores Valores de Restos a Pagar",
      col.names = c("C√≥digo", "Nome do √ìrg√£o", "Total (R$)", "Posi√ß√£o", "Total Formatado"),
      format = "html") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
  row_spec(0, bold = TRUE, background = "#f8f9fa") %>%
  column_spec(4, bold = TRUE, color = "white", background = "#007bff")
```

## üìà Indicadores-Chave Anexo 07

```{r indicadores_anexo_07}
#| echo: false

# Calcular indicadores principais
total_geral <- sum(dados_rp_anexo_07$saldo_r_item_informacao, na.rm = TRUE)
total_intra <- sum(dados_rp_anexo_07$saldo_r_item_informacao[dados_rp_anexo_07$tipo_modalidade == "intra"], na.rm = TRUE)
total_exceto_intra <- sum(dados_rp_anexo_07$saldo_r_item_informacao[dados_rp_anexo_07$tipo_modalidade == "exceto intra"], na.rm = TRUE)
qtd_orgaos <- length(unique(dados_rp_anexo_07$orgao_uge_orgao_maximo_codigo))

indicadores_principais <- data.frame(
  Indicador = c(
    "üí∞ Total Geral de Restos a Pagar",
    "üîÑ Total Intragovernamental", 
    "üèõÔ∏è Total Exceto Intragovernamental",
    "üìä Quantidade de √ìrg√£os",
    "üìÖ Per√≠odo de Refer√™ncia"
  ),
  Valor = c(
    formatar_numero(total_geral),
    formatar_numero(total_intra),
    formatar_numero(total_exceto_intra),
    as.character(qtd_orgaos),
    mes_filtro
  )
)

kable(indicadores_principais, 
      caption = "üéØ Indicadores-Chave do Anexo 07",
      format = "html") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
  row_spec(0, bold = TRUE, background = "#f8f9fa") %>%
  column_spec(1, bold = TRUE, color = "#007bff")
```

# üìö RREO Anexo 08 - MDE {#sec-anexo-08}

## üìù Descri√ß√£o

Este anexo apresenta as **Receitas e Despesas com Manuten√ß√£o e Desenvolvimento do Ensino (MDE)**, incluindo:

-   üìä **Classifica√ß√£o por categoria** conforme crit√©rios espec√≠ficos
-   üí∞ **C√°lculo da RLI** (Receita L√≠quida de Impostos)
-   üéØ **Percentual de aplica√ß√£o** em MDE
-   üìã **An√°lise de transfer√™ncias constitucionais**

## üéØ Defini√ß√£o dos Crit√©rios

### Crit√©rios de Educa√ß√£o

```{r criterios_educacao}
#| echo: true

# Definir a lista de crit√©rios para classifica√ß√£o das despesas MDE
criterios_educacao <- list(
  `01 - COMPLEMENTA√á√ÉO DA UNI√ÉO AO FUNDEB` = list(
    criterio = "acao_governo_codigo %in% c('00SB', '0E36')"
  ),
  `03 - EDUCA√á√ÉO B√ÅSICA` = list(
    criterio = "fonte_recursos_codigo %notin% c('008', '035', '133', '134', '213', '242') & iduso_codigo == 8 & elemento_despesa_codigo %notin% c('01', '03', '59') & subfuncao_governo_codigo == '368'"
  ),
  `04 - ENSINO SUPERIOR` = list(
    criterio = "fonte_recursos_codigo %notin% c(157, 175, 193, 109, 134, 181) & iduso_codigo == 8 & elemento_despesa_codigo %notin% c('01', '03', '59') & subfuncao_governo_codigo %in% c('364')"
  ),
  `05 - ENSINO PROFISSIONAL N√ÉO INTEGRADO AO ENSINO REGULAR` = list(
    criterio = "fonte_recursos_codigo %notin% c('008', '035', '133', '134') & iduso_codigo == 8 & elemento_despesa_codigo %notin% c('01', '03', '59') & subfuncao_governo_codigo == '363'"
  ),
  `06 - OUTRAS` = list(
    criterio = "fonte_recursos_codigo %notin% c('008', '035', '133', '134') & iduso_codigo == 8 & elemento_despesa_codigo %notin% c('01', '03', '59') & !subfuncao_governo_codigo %in% c('363', '364', '368') & acao_governo_codigo %notin% c('00SB', '0E36')"
  ),
  `08 - COMPLEMENTA√á√ÉO DA UNI√ÉO - VAAT` = list(
    criterio = "acao_governo_codigo %in% c('00SB', '0E36') & fonte_recursos_codigo %notin% c('133', '134', '213', '008', '035', '212') & plano_orcamentario_codigo_po == '0001'"
  ),
  `09 - COMPLEMENTA√á√ÉO DA UNI√ÉO - VAAT` = list(
    criterio = "acao_governo_codigo %in% c('00SB', '0E36') & fonte_recursos_codigo %notin% c('133', '134', '213', '008', '035', '212') & plano_orcamentario_codigo_po %in% c('0002')"
  ),
  `09b - VAAT po 26298 12 847 5111 00SB 0003` = list(
    criterio = "fonte_recursos_codigo %notin% c('008') & plano_orcamentario_codigo_po %in% c('0003') & funcao_governo_codigo == '12' & subfuncao_governo_codigo == '847' & programa_governo_codigo == 5111 & acao_governo_codigo == '00SB' & unidade_orcamentaria_codigo == '26298'"
  ),
  `11 - DESPESAS CUSTEADAS COM A CONTRIBUI√á√ÉO SOCIAL DO SAL√ÅRIO-EDUCA√á√ÉO` = list(
    criterio = "fonte_recursos_codigo %in% c('133', '134', '213', '008', '035', '212') & iduso_codigo == 8 & acao_governo_codigo %notin% c('00SB', '0E36')"
  ),
  `12 - DESPESAS COM O FUNDO CONSTITUCIONAL DO DISTRITO FEDERAL - FCDF` = list(
    criterio = "acao_governo_codigo %in% c('0312') & fonte_recursos_codigo %notin% c('133', '134', '213', '008', '035', '212')"
  ),
  `13 - DESPESAS CUSTEADAS COM RECEITAS DE ROYALTIES DE EXPLORA√á√ÉO DO PR√â-SAL` = list(
    criterio = "fonte_recursos_codigo %in% c('242') & iduso_codigo == 8 & elemento_despesa_codigo %in% c('01', '03', '59')"
  ),
  `14 - DEMAIS DESPESAS COM EDUCA√á√ÉO` = list(
    criterio = "iduso_codigo == 8 & fonte_recursos_codigo %in% c('008', '035', '133', '134', '213', '050', '000') & elemento_despesa_codigo %in% c('01', '03', '59') & acao_governo_codigo %notin% c('00SB', '0312', '0E36')"
  )
)

print("‚úÖ Crit√©rios de educa√ß√£o definidos:")
print(names(criterios_educacao))
```

## üìä Processamento dos Dados

### Valida√ß√£o dos Dados

```{r validacao_anexo_08}
#| echo: true

# Verificar se os dados existem
datasets_necessarios <- c("dados_despesa", "dados_receita", "dados_rp_anexo_08")

for(dataset in datasets_necessarios) {
  if (!exists(dataset)) {
    stop(paste("‚ùå", dataset, "n√£o encontrado. Execute a se√ß√£o de importa√ß√£o primeiro."))
  }
}

print("‚úÖ Todos os datasets necess√°rios est√£o dispon√≠veis")
print(paste("‚úÖ dados_despesa:", nrow(dados_despesa), "registros"))
print(paste("‚úÖ dados_receita:", nrow(dados_receita), "registros")) 
print(paste("‚úÖ dados_rp_anexo_08:", nrow(dados_rp_anexo_08), "registros"))
```

### Aplicar Crit√©rios de Educa√ß√£o

```{r aplicar_criterios_anexo_08}
#| echo: true
#| eval: true

# Gerar dados classificados usando a fun√ß√£o de agrupamento
codigo_anexo08 <- paste0(mes_filtro, "REO", "A08", "despesa")

print(paste("üîç C√≥digo gerado:", codigo_anexo08))
print(paste("üìä Dados de entrada:", nrow(dados_despesa), "registros"))

anexo_08 <- agrupar_e_combinar_dados(
  dados_despesa, 
  criterios_educacao, 
  codigo_anexo08
)

print(paste("‚úÖ Dados do Anexo 08 processados:", nrow(anexo_08), "registros"))

print("‚úÖ Categorias criadas:")
print(unique(anexo_08$categoria))
```

## üìà Tabela Principal - Despesas por Categoria MDE

```{r tabela_principal_anexo_08}
#| echo: true
#| eval: true

# Definir agrupamento por categoria
agrupamento_mde <- c("categoria")

# Criar tabela principal com fun√ß√£o robusta
if (nrow(anexo_08) > 0) {
  # Fun√ß√£o pivotagem espec√≠fica para MDE
  tabela_mde <- anexo_08 %>%
    # Garantir que temos apenas dados num√©ricos para saldo
    filter(!is.na(saldo_r_item_informacao)) %>%
    # Agrupar por categoria
    group_by(categoria, item_informacao_nome) %>%
    # Sumarizar valores
    summarise(
      total = sum(saldo_r_item_informacao, na.rm = TRUE),
      .groups = "drop"
    ) %>%
    # Pivotar para formato de tabela
    pivot_wider(
      names_from = item_informacao_nome,
      values_from = total,
      values_fill = 0
    )
  
  # Exibir tabela formatada
  dt_formatada(tabela_mde, agrupamento_mde)
  
} else {
  print("‚ùå Nenhum dado encontrado no anexo_08")
  
  # Tabela vazia para exibi√ß√£o
  tabela_vazia <- data.frame(
    categoria = "Nenhum dado encontrado",
    observacao = "Verificar crit√©rios e dados de entrada"
  )
  
  kable(tabela_vazia, 
        caption = "‚ö†Ô∏è Tabela MDE - Sem Dados",
        format = "html") %>%
    kable_styling(bootstrap_options = c("striped", "hover"))
}
```

## üí∞ C√°lculo da Receita L√≠quida de Impostos (RLI)

### Receitas Base para RLI

```{r receitas_rli}
#| echo: true
#| eval: true

# Receitas que comp√µem a base da RLI (impostos)
receitas_base_rli <- dados_receita %>% 
  filter(
    item_informacao_codigo == "5",
    startsWith(natureza_receita_codigo_completo, '711') | 
    startsWith(natureza_receita_codigo_completo, "111")
  ) %>% 
  group_by(mes_lancamento) %>% 
  summarise(
    receita = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  )

kable(receitas_base_rli, 
      caption = "üí∞ Receitas Base para RLI por M√™s",
      col.names = c("M√™s", "Receita (R$)"),
      format = "html") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
```

### Transfer√™ncias Constitucionais

```{r transferencias_anexo_08}
#| echo: true
#| eval: true

# Classificar transfer√™ncias constitucionais
rli_transf <- dados_despesa %>% 
  filter(item_informacao_codigo == "56") %>% 
  mutate(
    transferencia = case_when(
      acao_governo_codigo == "0044" ~ "FPE",
      acao_governo_codigo == "0045" ~ "FPM", 
      acao_governo_codigo == "0046" ~ "IPI_repasse",
      acao_governo_codigo == "0C33" ~ "FUNDEB",
      acao_governo_codigo == "00H6" ~ "IOF_repasse",
      acao_governo_codigo == "006M" ~ "ITR_repasse",
      .default = "demais"
    )
  ) %>% 
  group_by(transferencia, mes_lancamento) %>%  
  summarise(
    valor_transferencia = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  )

# Mostrar transfer√™ncias por tipo
transferencias_resumo <- rli_transf %>%
  group_by(transferencia) %>%
  summarise(
    total = sum(valor_transferencia, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(total)) %>%
  mutate(total_formatado = formatar_numero(total))

# Exibir com DT::datatable
DT::datatable(
  transferencias_resumo,
  colnames = c("Tipo de Transfer√™ncia", "Total (R$)", "Total Formatado"),
  caption = "üîÑ Transfer√™ncias Constitucionais por Tipo",
  rownames = FALSE,
  options = list(
    pageLength = 10,
    dom = 'ft',
    columnDefs = list(
      list(className = 'dt-left', targets = 0),      # Tipo √† esquerda
      list(className = 'dt-right', targets = c(1,2)) # Valores √† direita
    ),
    language = list(
      url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese.json'
    )
  )
) %>%
  DT::formatStyle(
    columns = "transferencia",
    fontWeight = 'bold'
  ) %>%
  DT::formatStyle(
    columns = c("total", "total_formatado"),
    textAlign = 'right'
  )
```

### C√°lculo da RLI Mensal

```{r rli_mensal}
#| echo: true
#| eval: true

# Consolidar transfer√™ncias (exceto "demais")
transferencias_consolidadas <- rli_transf %>% 
  filter(transferencia != "demais") %>% 
  group_by(mes_lancamento) %>% 
  summarise(
    transferencia_total = sum(valor_transferencia, na.rm = TRUE),
    .groups = "drop"
  )

# Calcular RLI mensal
rli_mensal <- full_join(
  receitas_base_rli, 
  transferencias_consolidadas, 
  by = "mes_lancamento"
) %>%
  mutate(
    transferencia_total = ifelse(is.na(transferencia_total), 0, transferencia_total),
    receita = ifelse(is.na(receita), 0, receita),
    rli = (receita - transferencia_total) * 0.18
  ) %>%
  # Ordenar por m√™s corretamente
  mutate(
    mes_ordenacao = case_when(
      str_detect(mes_lancamento, "JAN") ~ 1,
      str_detect(mes_lancamento, "FEV") ~ 2,
      str_detect(mes_lancamento, "MAR") ~ 3,
      str_detect(mes_lancamento, "ABR") ~ 4,
      str_detect(mes_lancamento, "MAI") ~ 5,
      str_detect(mes_lancamento, "JUN") ~ 6,
      str_detect(mes_lancamento, "JUL") ~ 7,
      str_detect(mes_lancamento, "AGO") ~ 8,
      str_detect(mes_lancamento, "SET") ~ 9,
      str_detect(mes_lancamento, "OUT") ~ 10,
      str_detect(mes_lancamento, "NOV") ~ 11,
      str_detect(mes_lancamento, "DEZ") ~ 12,
      TRUE ~ 99
    )
  ) %>%
  arrange(mes_ordenacao) %>%
  select(-mes_ordenacao) %>%
  mutate(
    receita_formatada = formatar_numero(receita),
    transferencia_formatada = formatar_numero(transferencia_total),
    rli_formatado = formatar_numero(rli)
  )

# Exibir com DT::datatable
DT::datatable(
  rli_mensal %>% 
    select(mes_lancamento, receita_formatada, transferencia_formatada, rli_formatado),
  colnames = c("M√™s", "Receita Base", "Transfer√™ncias", "RLI (18%)"),
  caption = "üìä Receita L√≠quida de Impostos (RLI) Mensal",
  rownames = FALSE,
  options = list(
    pageLength = 15,
    dom = 'ft',
    columnDefs = list(
      list(className = 'dt-left', targets = "_all")  # Alinhar tudo √† esquerda
    ),
    language = list(
      url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese.json'
    )
  )
) %>%
  DT::formatStyle(
    columns = c("receita_formatada", "transferencia_formatada", "rli_formatado"),
    textAlign = 'right'  # N√∫meros √† direita
  ) %>%
  DT::formatStyle(
    columns = "mes_lancamento",
    textAlign = 'left',   # M√™s √† esquerda
    fontWeight = 'bold'
  )
```

## üéØ Aplica√ß√£o M√≠nima em MDE

### RLI do Per√≠odo de Refer√™ncia

```{r rli_periodo}
#| echo: true
#| eval: true

# RLI espec√≠fica do m√™s de refer√™ncia
rli_maio <- rli_mensal %>% 
  filter(mes_lancamento == mes_filtro) %>% 
  summarise(minimo_mde = sum(rli, na.rm = TRUE)) %>%
  pull(minimo_mde)

print(paste("üìÖ RLI para", mes_filtro, ":", formatar_numero(rli_maio)))
```

### Despesas MDE do Per√≠odo

```{r despesas_mde}
#| echo: true
#| eval: true

# Despesas MDE das categorias principais (02, 03, 04, 05, 06)
despesa_mde <- anexo_08 %>% 
  filter(
    item_informacao_codigo == 25, 
    categoria %in% c(
      "03 - EDUCA√á√ÉO B√ÅSICA",
      "04 - ENSINO SUPERIOR", 
      "05 - ENSINO PROFISSIONAL N√ÉO INTEGRADO AO ENSINO REGULAR",
      "06 - OUTRAS"
    )
  ) %>% 
  summarise(saldo_mde = sum(saldo_r_item_informacao, na.rm = TRUE)) %>%
  pull(saldo_mde)

print(paste("üí∞ Despesas MDE principais:", formatar_numero(despesa_mde)))
```

### Complementa√ß√£o FUNDEB

```{r complementacao_fundeb}
#| echo: true
#| eval: true

# Complementa√ß√£o FUNDEB (30% da complementa√ß√£o da Uni√£o)
complementacao_fundeb <- dados_despesa %>% 
  filter(
    item_informacao_codigo == 25, 
    mes_lancamento == mes_filtro,
    fonte_recursos_codigo %in% c('000',  '014', '130'), 
    acao_governo_codigo %in% c('0E36', '00SB')
  ) %>% 
  summarise(comp_fundeb = sum(saldo_r_item_informacao, na.rm = TRUE) * 0.3) %>%
  pull(comp_fundeb)

print(paste("üéØ Complementa√ß√£o FUNDEB (30%):", formatar_numero(complementacao_fundeb)))
```

### Restos a Pagar MDE

```{r rp_mde}
#| echo: true
#| eval: true

# AJUSTADO: Agrupado por item de informa√ß√£o
despesa_mde_rp_detalhado <- dados_rp_anexo_08 %>%
  filter(
    mes_lancamento == mes_filtro,  
    !elemento_despesa_codigo %in% c('01', '03'),
    (
      (fonte_recursos_codigo %in% c('000', '012', '00', '12') & 
       (iduso_codigo == 8 | lei_calmon_s_n == 'SIM')) |
      (ne_c_cor_ano_emissao >= 2020 & 
       !fonte_recursos_codigo %in% c('133', '134', '213', '08', '13', '93') & 
       iduso_codigo == 8)
    )
  ) %>%
  group_by(item_informacao_codigo, item_informacao_nome) %>%
  summarise(
    valor = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(item_informacao_codigo)

# Total consolidado para c√°lculos
despesa_mde_rp <- sum(despesa_mde_rp_detalhado$valor, na.rm = TRUE)

print("üìã Restos a Pagar MDE por Item de Informa√ß√£o:")
print(despesa_mde_rp_detalhado)
print(paste("üìã Total RP MDE:", formatar_numero(despesa_mde_rp)))
```

## üìä C√°lculo do Percentual de Aplica√ß√£o

```{r percentual_aplicacao}
#| echo: true
#| eval: true

# C√°lculo do percentual total aplicado em MDE
total_despesas_mde <- despesa_mde + complementacao_fundeb 
percentual_aplicacao <- (total_despesas_mde / rli_maio) * 100

# Tabela resumo
resumo_aplicacao <- data.frame(
  Item = c(
    "üí∞ Despesas MDE Principais",
    "üéØ Complementa√ß√£o FUNDEB (30%)",
    "üìã Restos a Pagar MDE",
    "üìä Total Despesas MDE",
    "üìà RLI (Base de C√°lculo)",
    "üéØ Percentual Aplicado",
    "‚úÖ M√≠nimo Constitucional"
  ),
  Valor = c(
    formatar_numero(despesa_mde),
    formatar_numero(complementacao_fundeb),
    formatar_numero(despesa_mde_rp),
    formatar_numero(total_despesas_mde),
    formatar_numero(rli_maio),
    paste0(round(percentual_aplicacao, 2), "%"),
    "18,00%"
  ),
  Status = c(
    "‚úÖ Calculado",
    "‚úÖ Calculado", 
    "‚úÖ Calculado",
    "‚úÖ Consolidado",
    "‚úÖ Base",
    ifelse(percentual_aplicacao >= 18, "‚úÖ Atendido", "‚ùå N√£o Atendido"),
    "üìã Refer√™ncia"
  )
)

kable(resumo_aplicacao, 
      caption = "üéØ Resumo da Aplica√ß√£o em MDE",
      format = "html") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
  row_spec(0, bold = TRUE, background = "#f8f9fa") %>%
  row_spec(6, bold = TRUE, 
           background = ifelse(percentual_aplicacao >= 18, "#d4edda", "#f8d7da"),
           color = ifelse(percentual_aplicacao >= 18, "#155724", "#721c24"))
```

# üìã RREO Anexo 12 - Sa√∫de.

## üìã Introdu√ß√£o

O **Anexo 12 do RREO** apresenta o demonstrativo das receitas e despesas com a√ß√µes e servi√ßos p√∫blicos de sa√∫de do Governo Federal, conforme estabelecido pela Emenda Constitucional n¬∫ 29/2000 e regulamentado pela Lei Complementar n¬∫ 141/2012.

Este relat√≥rio consolida informa√ß√µes sobre: - **Despesas Computadas**: Aplica√ß√µes diretas e transfer√™ncias nas subfun√ß√µes espec√≠ficas de sa√∫de - **Despesas N√£o Computadas**: Despesas do Minist√©rio da Sa√∫de n√£o computadas para o limite constitucional - **An√°lise por Modalidade**: Separa√ß√£o entre aplica√ß√£o direta e transfer√™ncias - **Indicadores de Cumprimento**: Verifica√ß√£o do atendimento aos limites constitucionais

## üè• Processamento das Despesas com Sa√∫de

### 1. Despesas Computadas - Subfun√ß√µes Espec√≠ficas

```{r despesas-saude-especificas}
# Filtrar despesas das subfun√ß√µes espec√≠ficas de sa√∫de (301-306)
despesas_saude <- dados_despesa %>% 
  filter(
    mes_lancamento == mes_filtro, 
    iduso_codigo == 6, 
    item_informacao_codigo == 25, 
    subfuncao_governo_codigo %in% c(301, 302, 303, 304, 305, 306)
  ) %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome, 
    categoria_economica_despesa_codigo,
    categoria_economica_despesa_nome, 
    modalidade_aplicacao_codigo
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop")

# Classificar por tipo de aplica√ß√£o
despesas_saude <- despesas_saude %>% 
  mutate(
    transferencia = ifelse(
      modalidade_aplicacao_codigo %in% c('30', '31', '32', '35', '36', '40', '41', '42', '45', '46'), 
      "_transferencia", 
      "aplicacao_direta"
    )
  )

# Criar tabela consolidada INCLUINDO LINHAS COM ZERO
tabela_saude_especificas <- despesas_saude %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome,
    categoria_economica_despesa_codigo, 
    categoria_economica_despesa_nome, 
    transferencia
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop") %>%
  # MANTER TODAS AS LINHAS, incluindo as com valor zero
  filter(TRUE)  # N√£o filtrar valores zero

# Exibir tabela
DT::datatable(
  tabela_saude_especificas,
  caption = "Despesas com Sa√∫de - Subfun√ß√µes Espec√≠ficas (301-306) - Incluindo Valores Zero",
  options = list(
    pageLength = 20,  # Aumentar para mostrar mais linhas
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  )
) %>%
  DT::formatRound("saldo_r_item_informacao", 2, mark = ".", dec.mark = ",")

# Calcular total das subfun√ß√µes espec√≠ficas
total_subfuncoes_especificas <- sum(despesas_saude$saldo_r_item_informacao)
cat("\nüí∞ **Total das Subfun√ß√µes Espec√≠ficas de Sa√∫de:** R$", 
    format(total_subfuncoes_especificas, big.mark = ".", decimal.mark = ","), "\n")
```

### 2. Despesas em Outras Subfun√ß√µes (Demais)

```{r despesas-saude-demais}
# Calcular despesas em outras subfun√ß√µes
despesas_saude_demais <- as.numeric(
  dados_despesa %>% 
  filter(
    mes_lancamento == mes_filtro, 
    iduso_codigo == 6, 
    item_informacao_codigo == 25, 
    subfuncao_governo_codigo %notin% c(301, 302, 303, 304, 305, 306)
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao))
)

cat("üí∞ **Total das Demais Subfun√ß√µes de Sa√∫de:** R$", 
    format(despesas_saude_demais, big.mark = ".", decimal.mark = ","), "\n")

# Total geral das despesas computadas
total_despesas_computadas <- total_subfuncoes_especificas + despesas_saude_demais
cat("üí∞ **Total Geral das Despesas Computadas:** R$", 
    format(total_despesas_computadas, big.mark = ".", decimal.mark = ","), "\n\n")
```

### 3. An√°lise Consolidada de Todas as Despesas

```{r despesas-saude-consolidada}
# Processar todas as despesas de sa√∫de com agrupamento
despesas_saude_completa <- dados_despesa %>% 
  filter(
    mes_lancamento == mes_filtro, 
    iduso_codigo == 6, 
    item_informacao_codigo == 25
  ) %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome, 
    categoria_economica_despesa_codigo,
    categoria_economica_despesa_nome, 
    modalidade_aplicacao_codigo
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop")

# Reclassificar subfun√ß√µes e modalidades
despesas_saude_completa <- despesas_saude_completa %>% 
  mutate(
    subfuncao_governo_codigo = case_when(
      subfuncao_governo_codigo %in% c(301, 302, 303, 304, 305, 306) ~ as.character(subfuncao_governo_codigo),
      TRUE ~ "demais"
    ),
    subfuncao_governo_nome = case_when(
      subfuncao_governo_codigo %in% c("301", "302", "303", "304", "305", "306") ~ subfuncao_governo_nome,
      TRUE ~ "demais"
    ),
    transferencia = ifelse(
      modalidade_aplicacao_codigo %in% c('30', '31', '32', '35', '36', '40', '41', '42', '45', '46'), 
      "_transferencia", 
      "aplicacao_direta"
    )
  )

# Criar tabela consolidada final INCLUINDO VALORES ZERO
tabela_consolidada <- despesas_saude_completa %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome,
    categoria_economica_despesa_codigo, 
    categoria_economica_despesa_nome, 
    transferencia
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop") %>%
  # MANTER TODAS AS LINHAS, incluindo as com valor zero
  arrange(subfuncao_governo_codigo, categoria_economica_despesa_codigo, transferencia)

# Exibir tabela consolidada
DT::datatable(
  tabela_consolidada,
  caption = "Despesas com Sa√∫de - An√°lise Consolidada (Incluindo Valores Zero)",
  options = list(
    pageLength = 25,  # Aumentar para mostrar mais linhas
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  )
) %>%
  DT::formatRound("saldo_r_item_informacao", 2, mark = ".", dec.mark = ",")

# Total consolidado em milhares
total_consolidado <- sum(despesas_saude_completa$saldo_r_item_informacao) / 1000
cat("\nüí∞ **Total Consolidado das Despesas com Sa√∫de:** R$", 
    format(total_consolidado, big.mark = ".", decimal.mark = ","), "mil\n")
```

## üö´ Despesas N√£o Computadas

### Despesas do Minist√©rio da Sa√∫de N√£o Computadas

```{r despesas-nao-computadas}
# Filtrar despesas n√£o computadas do Minist√©rio da Sa√∫de
despesa_saude_nao_computadas <- dados_despesa %>% 
  filter(
    mes_lancamento == mes_filtro, 
    iduso_codigo != 6, 
    item_informacao_codigo == 25,
    uo_orgao_superior_codigo == "36000", 
    unidade_orcamentaria_codigo != "74202"
  ) %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome, 
    categoria_economica_despesa_codigo,
    categoria_economica_despesa_nome, 
    modalidade_aplicacao_codigo
  ) %>%  
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop")

# Reclassificar para an√°lise
despesa_saude_nao_computadas <- despesa_saude_nao_computadas %>% 
  mutate(
    subfuncao_governo_codigo = case_when(
      subfuncao_governo_codigo %in% c(301, 302, 303, 304, 305, 306) ~ as.character(subfuncao_governo_codigo),
      TRUE ~ "demais"
    ),
    subfuncao_governo_nome = case_when(
      subfuncao_governo_codigo %in% c("301", "302", "303", "304", "305", "306") ~ subfuncao_governo_nome,
      TRUE ~ "demais"
    ),
    transferencia = ifelse(
      modalidade_aplicacao_codigo %in% c('30', '31', '32', '35', '36', '40', '41', '42', '45', '46'), 
      "_transferencia", 
      "aplicacao_direta"
    )
  )

# Tabela das despesas n√£o computadas INCLUINDO VALORES ZERO
tabela_nao_computadas <- despesa_saude_nao_computadas %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome,
    categoria_economica_despesa_codigo, 
    categoria_economica_despesa_nome, 
    transferencia
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop") %>%
  # MANTER TODAS AS LINHAS, incluindo as com valor zero
  arrange(subfuncao_governo_codigo, categoria_economica_despesa_codigo, transferencia)

# Exibir tabela
DT::datatable(
  tabela_nao_computadas,
  caption = "Despesas do Minist√©rio da Sa√∫de N√ÉO Computadas para o Limite (Incluindo Valores Zero)",
  options = list(
    pageLength = 20,  # Aumentar para mostrar mais linhas
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  )
) %>%
  DT::formatRound("saldo_r_item_informacao", 2, mark = ".", dec.mark = ",")
```

## ‚úÖ Valida√ß√£o dos Resultados

### Compara√ß√£o com Dados Oficiais

```{r validacao-resultados}
# Validar totais por subfun√ß√£o espec√≠fica
validacao_subfuncoes <- despesas_saude_completa %>%
  filter(subfuncao_governo_codigo %in% c("301", "302", "303", "304", "305", "306")) %>%
  group_by(subfuncao_governo_codigo, subfuncao_governo_nome) %>%
  summarise(
    nosso_total = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    # Dados oficiais para compara√ß√£o (valores em milhares, multiplicando por 1000)
    oficial_total = case_when(
      subfuncao_governo_codigo == "301" ~ 22060304 * 1000,
      subfuncao_governo_codigo == "302" ~ 38151320 * 1000,
      subfuncao_governo_codigo == "303" ~ 8449894 * 1000,
      subfuncao_governo_codigo == "304" ~ 38550 * 1000,
      subfuncao_governo_codigo == "305" ~ 5020346 * 1000,
      subfuncao_governo_codigo == "306" ~ 196 * 1000,
      TRUE ~ 0
    ),
    diferenca = nosso_total - oficial_total,
    status = ifelse(abs(diferenca) < 1, "‚úÖ MATCH", "‚ùå DIVERG√äNCIA")
  )

# Exibir tabela de valida√ß√£o
DT::datatable(
  validacao_subfuncoes,
  caption = "Valida√ß√£o: Nossos Resultados vs Dados Oficiais",
  options = list(
    pageLength = 10,
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  )
) %>%
  DT::formatRound(c("nosso_total", "oficial_total", "diferenca"), 0, mark = ".", dec.mark = ",")

# Calcular total das subfun√ß√µes espec√≠ficas
total_subfuncoes_validacao <- sum(validacao_subfuncoes$nosso_total)
total_oficial_subfuncoes <- 84798771 * 1000  # Total oficial em milhares, convertendo para reais

cat("\nüéØ **Resumo da Valida√ß√£o:**\n")
cat("- Total Subfun√ß√µes Espec√≠ficas (Nosso):", format(total_subfuncoes_validacao, big.mark = "."), "\n")
cat("- Total Oficial (todas as despesas):", format(total_oficial_subfuncoes, big.mark = "."), "\n")
cat("- Outras Subfun√ß√µes (Oficial):", format(11078161 * 1000, big.mark = "."), "\n")
```

## üìä Resumo Executivo e Indicadores

### Totais Consolidados

```{r resumo-executivo}
# Calcular totais principais
total_computadas <- sum(despesas_saude_completa$saldo_r_item_informacao, na.rm = TRUE)
total_nao_computadas <- sum(despesa_saude_nao_computadas$saldo_r_item_informacao, na.rm = TRUE)
total_geral_saude <- total_computadas + total_nao_computadas

# Criar tabela resumo
resumo_saude <- data.frame(
  Categoria = c(
    "Despesas Computadas para o Limite",
    "Despesas N√ÉO Computadas",
    "Total Geral das Despesas com Sa√∫de"
  ),
  `Valor (R$)` = c(
    total_computadas,
    total_nao_computadas,
    total_geral_saude
  ),
  `Valor (R$ Milh√µes)` = c(
    total_computadas / 1000000,
    total_nao_computadas / 1000000,
    total_geral_saude / 1000000
  ),
  `Percentual` = c(
    (total_computadas / total_geral_saude) * 100,
    (total_nao_computadas / total_geral_saude) * 100,
    100
  )
)

# Exibir tabela resumo
knitr::kable(
  resumo_saude,
  caption = "**Resumo Executivo - Despesas com Sa√∫de**",
  format.args = list(big.mark = ".", decimal.mark = ",", digits = 2),
  align = c("l", "r", "r", "r")
) %>%
  kableExtra::kable_styling(
    bootstrap_options = c("striped", "hover", "condensed"),
    full_width = FALSE
  ) %>%
  kableExtra::row_spec(3, bold = TRUE, background = "#e8f5e8")
```

### Indicadores Principais

```{r indicadores-saude}
# Calcular indicadores
percentual_computadas <- (total_computadas / total_geral_saude) * 100
percentual_nao_computadas <- (total_nao_computadas / total_geral_saude) * 100

cat("### üéØ Indicadores Principais\n\n")
cat("üíö **Despesas Computadas para o Limite:** ", 
    format(round(percentual_computadas, 2), decimal.mark = ","), "%\n\n")
cat("‚ùå **Despesas N√ÉO Computadas:** ", 
    format(round(percentual_nao_computadas, 2), decimal.mark = ","), "%\n\n")
cat("üí∞ **Total de Despesas Computadas:** R$ ", 
    format(round(total_computadas / 1000000, 2), big.mark = ".", decimal.mark = ","), 
    " milh√µes\n\n")
cat("üìä **Total Geral com Sa√∫de:** R$ ", 
    format(round(total_geral_saude / 1000000, 2), big.mark = ".", decimal.mark = ","), 
    " milh√µes\n\n")
```

## üìà Visualiza√ß√µes

### Gr√°fico Comparativo: Computadas vs N√£o Computadas

```{r grafico-comparativo}
# Preparar dados para o gr√°fico
dados_grafico <- data.frame(
  Categoria = c("Despesas Computadas", "Despesas N√ÉO Computadas"),
  Valor = c(
    total_computadas / 1000000,
    total_nao_computadas / 1000000
  ),
  Tipo = c("Computadas", "N√£o Computadas")
)

# Criar gr√°fico
library(ggplot2)
ggplot(dados_grafico, aes(x = Categoria, y = Valor, fill = Tipo)) +
  geom_col(alpha = 0.8) +
  geom_text(aes(label = paste0("R$ ", format(round(Valor, 1), big.mark = ".", decimal.mark = ","))), 
            vjust = -0.5, 
            size = 4) +
  scale_fill_manual(values = c("Computadas" = "#228B22", "N√£o Computadas" = "#DC143C")) +
  labs(
    title = "Despesas com Sa√∫de - Computadas vs N√£o Computadas",
    subtitle = paste0("M√™s de Refer√™ncia: ", mes_filtro),
    x = "Categoria",
    y = "Valor (R$ Milh√µes)",
    fill = "Tipo",
    caption = "Fonte: Tesouro Gerencial"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.text.x = element_text(size = 11),
    legend.position = "bottom"
  )
```

### Distribui√ß√£o por Subfun√ß√£o de Governo

```{r grafico-subfuncoes-saude}
# Preparar dados das despesas por subfun√ß√£o (apenas computadas)
despesas_por_subfuncao <- tabela_consolidada %>%
  filter(subfuncao_governo_codigo != "demais") %>%
  group_by(subfuncao_governo_nome) %>%
  summarise(
    valor_total = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(valor_total)) %>%
  mutate(
    valor_milhoes = valor_total / 1000000,
    percentual = (valor_total / sum(valor_total)) * 100
  )

# Criar gr√°fico de barras
ggplot(despesas_por_subfuncao, aes(x = reorder(subfuncao_governo_nome, valor_milhoes), y = valor_milhoes)) +
  geom_col(fill = "#4682B4", alpha = 0.8) +
  geom_text(aes(label = paste0("R$ ", format(round(valor_milhoes, 1), big.mark = ".", decimal.mark = ","))), 
            hjust = -0.1, size = 3.5) +
  coord_flip() +
  labs(
    title = "Despesas com Sa√∫de por Subfun√ß√£o de Governo",
    subtitle = "Subfun√ß√µes Espec√≠ficas de Sa√∫de (301-306)",
    x = "Subfun√ß√£o",
    y = "Valor (R$ Milh√µes)",
    caption = "Fonte: Tesouro Gerencial"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.text.y = element_text(size = 10)
  )
```

### An√°lise por Tipo de Aplica√ß√£o

```{r grafico-modalidade-aplicacao}
# Preparar dados por modalidade de aplica√ß√£o
despesas_por_modalidade <- tabela_consolidada %>%
  group_by(transferencia) %>%
  summarise(
    valor_total = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    valor_milhoes = valor_total / 1000000,
    percentual = (valor_total / sum(valor_total)) * 100,
    tipo_limpo = case_when(
      transferencia == "aplicacao_direta" ~ "Aplica√ß√£o Direta",
      transferencia == "_transferencia" ~ "Transfer√™ncias",
      TRUE ~ transferencia
    )
  )

# Criar gr√°fico de pizza
library(plotly)
plot_ly(
  despesas_por_modalidade,
  labels = ~tipo_limpo,
  values = ~valor_milhoes,
  type = 'pie',
  textposition = 'inside',
  textinfo = 'label+percent',
  hovertemplate = paste(
    '<b>%{label}</b><br>',
    'Valor: R$ %{value:.1f} milh√µes<br>',
    'Percentual: %{percent}<br>',
    '<extra></extra>'
  )
) %>%
  layout(
    title = list(
      text = "Distribui√ß√£o das Despesas com Sa√∫de por Modalidade de Aplica√ß√£o",
      font = list(size = 16)
    ),
    showlegend = TRUE,
    legend = list(
      orientation = "v",
      x = 1.02,
      y = 0.5
    )
  )
```

## üìã Considera√ß√µes Metodol√≥gicas

### Crit√©rios de Classifica√ß√£o

```{r metodologia-saude}
cat("### üîç Metodologia Aplicada\n\n")
cat("**Despesas Computadas para o Limite Constitucional:**\n")
cat("- ID de USO: Sa√∫de (6)\n")
cat("- Item de Informa√ß√£o: Pago (25)\n")
cat("- Subfun√ß√µes Espec√≠ficas: 301, 302, 303, 304, 305, 306\n")
cat("- Base Legal: LC n¬∫ 141/2012\n\n")

cat("**Despesas N√ÉO Computadas:**\n")
cat("- ID de USO: Diferente de Sa√∫de (‚â† 6)\n")
cat("- √ìrg√£o Superior: Minist√©rio da Sa√∫de (36000)\n")
cat("- Exclus√£o: UO 74202 (conforme crit√©rios espec√≠ficos)\n")
cat("- Incluem: despesas administrativas, aposentadorias, etc.\n\n")

cat("**Modalidades de Aplica√ß√£o:**\n")
cat("  - **Aplica√ß√£o Direta:** 20, 22, 71, 72, 75, 76, 91, 93, 94, 95, 96, 97, 99\n")
cat("  - **Transfer√™ncias:** 30, 31, 32, 35, 36, 40, 41, 42, 45, 46\n\n")

cat("**Subfun√ß√µes Espec√≠ficas de Sa√∫de:**\n")
cat("- 301: Aten√ß√£o B√°sica\n")
cat("- 302: Assist√™ncia Hospitalar e Ambulatorial\n")
cat("- 303: Suporte Profil√°tico e Terap√™utico\n")
cat("- 304: Vigil√¢ncia Sanit√°ria\n")
cat("- 305: Vigil√¢ncia Epidemiol√≥gica\n")
cat("- 306: Alimenta√ß√£o e Nutri√ß√£o\n\n")

cat("**Per√≠odo de Refer√™ncia:**\n")
cat("- M√™s: ", mes_filtro, "\n")
cat("- Base de dados: Tesouro Gerencial (SIAFI)\n\n")
```

## üìÑ Observa√ß√µes Finais

```{r observacoes-saude}
cat("### ‚ö†Ô∏è Observa√ß√µes Importantes\n\n")
cat("1. **Limite Constitucional:** Uni√£o deve aplicar m√≠nimo de 15% da RCL em sa√∫de\n")
cat("2. **Periodicidade:** Relat√≥rio com periodicidade bimestral, conforme LRF\n")
cat("3. **Abrang√™ncia:** Dados consolidados do Governo Federal\n")
cat("4. **Legisla√ß√£o:** EC n¬∫ 29/2000, LC n¬∫ 141/2012, e demais normas aplic√°veis\n")
cat("5. **Metodologia:** Segue as normas da STN e crit√©rios do Minist√©rio da Sa√∫de\n\n")

# Informa√ß√µes t√©cnicas do processamento
cat("### üìä Informa√ß√µes T√©cnicas\n\n")
cat("- **Data de Processamento:** ", format(Sys.time(), "%d/%m/%Y %H:%M:%S"), "\n")
cat("- **Total de Registros Processados:** ", nrow(dados_despesa), "\n")
cat("- **Registros de Despesas Computadas:** ", nrow(despesas_saude_completa), "\n")
cat("- **Registros de Despesas N√ÉO Computadas:** ", nrow(despesa_saude_nao_computadas), "\n")
### An√°lise das "Demais" Subfun√ß√µes

# Analisar quais subfun√ß√µes est√£o sendo classificadas como "demais"
demais_subfuncoes_detalhado <- dados_despesa %>% 
  filter(
    mes_lancamento == mes_filtro, 
    iduso_codigo == 6, 
    item_informacao_codigo == 25,
    subfuncao_governo_codigo %notin% c(301, 302, 303, 304, 305, 306)
  ) %>%
  group_by(subfuncao_governo_codigo, subfuncao_governo_nome) %>%
  summarise(
    valor_total = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(valor_total)) %>%
  mutate(valor_milhares = valor_total / 1000)

# Exibir detalhamento das "demais" subfun√ß√µes
DT::datatable(
  demais_subfuncoes_detalhado,
  caption = "Detalhamento das 'Demais' Subfun√ß√µes de Sa√∫de",
  options = list(
    pageLength = 15,
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  )
) %>%
  DT::formatRound(c("valor_total", "valor_milhares"), 2, mark = ".", dec.mark = ",")

# Total das demais subfun√ß√µes
total_demais_detalhado <- sum(demais_subfuncoes_detalhado$valor_total)
cat("\nüí∞ **Total Detalhado das 'Demais' Subfun√ß√µes:** R$", 
    format(total_demais_detalhado, big.mark = ".", decimal.mark = ","), "\n")
cat("üí∞ **Valor Oficial 'Outras Subfun√ß√µes':** R$", 
    format(11078161 * 1000, big.mark = ".", decimal.mark = ","), "\n")
cat("üìä **Diferen√ßa:** R$", 
    format(total_demais_detalhado - (11078161 * 1000), big.mark = ".", decimal.mark = ","), "\n")
```

# üìã RREO Tabela 01

A **Tabela 01** apresenta o demonstrativo da receita e despesa or√ßament√°ria, sendo um dos principais instrumentos de acompanhamento da execu√ß√£o or√ßament√°ria do Governo Federal.

## üéØ Objetivo

-   Demonstrar a evolu√ß√£o das receitas e despesas or√ßament√°rias
-   Acompanhar o cumprimento das metas fiscais
-   Permitir an√°lise comparativa entre per√≠odos

## üí∞ RECEITAS OR√áAMENT√ÅRIAS

```{r criterios_receitas}
# ======================================
# CRIT√âRIOS DA TABELA 1 - RECEITAS
# ======================================

criterios_tabela1_receitas <- list(
  
  # === RECEITAS CORRENTES ===
  
  # Receita Tribut√°ria
  `01  Receita Tribut√°ria` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 1) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 1)"
  ),
  
  # Receita de Contribui√ß√µes
  `02  Receita de Contribui√ß√µes` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 2) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 2)"
  ),
  
  # Receita Patrimonial
  `03  Receita Patrimonial` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 3) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 3)"
  ),
  
  # Receita Agropecu√°ria
  `04  Receita Agropecu√°ria` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 4"
  ),
  
  # Receita Industrial
  `05  Receita Industrial` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 5) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 5)"
  ),
  
  # Receita de Servi√ßos
  `06  Receita de Servi√ßos` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 6) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 6)"
  ),
  
  # Transfer√™ncias Correntes
  `07  Transfer√™ncias Correntes` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 7"
  ),
  
  # Receitas Correntes a Classificar
  `08  Receitas Correntes a Classificar` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 8"
  ),
  
  # Outras Receitas Correntes
  `09  Outras Receitas Correntes` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 9) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 9)"
  ),
  
  # === RECEITAS DE CAPITAL ===
  
  # Opera√ß√µes de Cr√©dito
  `10  Opera√ß√µes de Cr√©dito` = list(
    criterio = "(nre1_categoria_economica_codigo == 2 & nre2_origem_receita_codigo_origem == 1) | (nre1_categoria_economica_codigo == 8 & nre2_origem_receita_codigo_origem == 1)"
  ),
  
  # Aliena√ß√£o de Bens
  `11  Aliena√ß√£o de Bens` = list(
    criterio = "(nre1_categoria_economica_codigo == 2 & nre2_origem_receita_codigo_origem == 2) | (nre1_categoria_economica_codigo == 8 & nre2_origem_receita_codigo_origem == 2)"
  ),
  
  # Transfer√™ncias de Capital
  `12  Transfer√™ncias de Capital` = list(
    criterio = "nre1_categoria_economica_codigo == 2 & nre2_origem_receita_codigo_origem == 4"
  ),
  
  # Outras Receitas de Capital
  `13  Outras Receitas de Capital` = list(
    criterio = "(nre1_categoria_economica_codigo == 2 & nre2_origem_receita_codigo_origem == 5) | (nre1_categoria_economica_codigo == 8 & nre2_origem_receita_codigo_origem == 5)"
  ),
  
  # SUBTOTAL (I) - Receitas Correntes + Receitas de Capital - Intra-or√ßament√°rias
  `14  SUBTOTAL (I)` = list(
    criterio = "nre1_categoria_economica_codigo %in% c(1, 2, 7, 8)"
  )
)
```

```{r processar-receitas}
# Processar dados de receitas
tabela1_receitas <- agrupar_e_combinar_dados(
  df = dados_receita %>% filter(esfera_orcamentaria_codigo == 2) %>% unique(),
  criterios = criterios_tabela1_receitas,
  codigo = "JUN/2025REOT01receitas"
)

# Separar ordem e nome
tabela1_receitas <- tabela1_receitas %>% 
  separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

# Criar tabela final de receitas
DT_tabela1_receitas <- tabela1_receitas %>% 
  filter(mes_lancamento == mes_filtro) %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)
```

## üìä Demonstrativo das Receitas

```{r tabela-receitas}
# Exibir tabela de receitas
datatable(
  DT_tabela1_receitas,
  options = list(
    pageLength = 15,
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  ),
  caption = "Tabela 01 - Demonstrativo das Receitas Or√ßament√°rias"
) %>%
  formatRound(
    which(sapply(DT_tabela1_receitas, is.numeric)), 
    digits = 2, 
    mark = ".", 
    dec.mark = ","
  )
```

## üí∏ DESPESAS OR√áAMENT√ÅRIAS

```{r criterios-despesas}
# ======================================
# CRIT√âRIOS DA TABELA 1 - DESPESAS
# ======================================

criterios_tabela1_despesas <- list(
  
  # === DESPESAS CORRENTES ===
  
  # Pessoal e Encargos Sociais
  `01  Pessoal e Encargos Sociais` = list(
    criterio = "grupo_despesa_codigo_grupo == '1'"
  ),
  
  # Juros e Encargos da D√≠vida
  `02  Juros e Encargos da D√≠vida` = list(
    criterio = "grupo_despesa_codigo_grupo == '2'"
  ),
  
  # Outras Despesas Correntes
  `03  Outras Despesas Correntes` = list(
    criterio = "grupo_despesa_codigo_grupo == '3'"
  ),
  
  # Benef√≠cios Previdenci√°rios
  `04  Benef√≠cios Previdenci√°rios` = list(
    criterio = "grupo_despesa_codigo_grupo == '3' & unidade_orcamentaria_codigo %in% c('55902', '40904', '33904', '25917')"
  ),
  
  # Transfer√™ncias
  `05  Transfer√™ncias` = list(
    criterio = "grupo_despesa_codigo_grupo == '3' & modalidade_aplicacao_codigo %in% c('30', '31', '35', '36', '40', '41', '42', '45')"
  ),
  
  # Demais Despesas Correntes
  `06  Demais Despesas Correntes` = list(
    criterio = "
    grupo_despesa_codigo_grupo == '3' & 
    !unidade_orcamentaria_codigo %in% c('55902', '40904', '33904', '25917') &
    !modalidade_aplicacao_codigo %in% c('30', '31', '35', '36', '40', '41', '42', '45')
    "
  ),
  
  # === DESPESAS DE CAPITAL ===
  
  # Investimentos
  `07  Investimentos` = list(
    criterio = "grupo_despesa_codigo_grupo == '4'"
  ),
  
  # Invers√µes Financeiras
  `08  Invers√µes Financeiras` = list(
    criterio = "grupo_despesa_codigo_grupo == '5'"
  ),
  
  # Amortiza√ß√£o da D√≠vida
  `09  Amortiza√ß√£o da D√≠vida` = list(
    criterio = "grupo_despesa_codigo_grupo == '6'"
  ),
  
  # RESERVA DE CONTING√äNCIA
  `10  RESERVA DE CONTING√äNCIA` = list(
    criterio = "grupo_despesa_codigo_grupo == '9'"
  ),
  
  # SUBTOTAL (III) - Total das Despesas
  `11  SUBTOTAL (III)` = list(
    criterio = "grupo_despesa_codigo_grupo %in% c('1', '2', '3', '4', '5', '6', '9')"
  )
)
```

```{r processar-despesas}
# Processar dados de despesas
tabela1_despesas <- agrupar_e_combinar_dados(
  df = dados_despesa %>% filter(esfera_orcamentaria_codigo == 2) %>% unique(),
  criterios = criterios_tabela1_despesas,
  codigo = "JUN/2025REOT01desp"
)

# Separar ordem e nome
tabela1_despesas <- tabela1_despesas %>% 
  separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

# Criar tabela final de despesas
DT_tabela1_despesas <- tabela1_despesas %>% 
  filter(mes_lancamento == mes_filtro) %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)
```

## üìä Demonstrativo das Despesas

```{r tabela-despesas}
# Exibir tabela de despesas
datatable(
  DT_tabela1_despesas,
  options = list(
    pageLength = 15,
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  ),
  caption = "Tabela 01 - Demonstrativo das Despesas Or√ßament√°rias"
) %>%
  formatRound(
    which(sapply(DT_tabela1_despesas, is.numeric)), 
    digits = 2, 
    mark = ".", 
    dec.mark = ","
  )
```

## üìä Tabela 01A - Detalhamento das Receitas

```{r criterios-tabela1a}
# ======================================
# CRIT√âRIOS DA TABELA 1A - COLUNAS 2025
# ======================================
criterios_tabela1a_colunas <- list(
  
  # === PREVIS√ÉO ATUALIZADA (a) ===
  
  # Previs√£o Atualizada da Receita
  `PREVISAO_ATUALIZADA` = list(
    criterio = "
    natureza_receita_codigo_completo %in% c('12100111', '12100121', '12100131', '12100211', '12102121', '12102131', 
                                            '12106511', '12106611', '12106711', '12107211', '12107411', '12107611',
                                            '12108111', '12109131', '12101011', '12101311', '12101411', '12101611',
                                            '12106131', '12106211', '12106411', '12106511', '12106611', '12106711',
                                            '12110051', '12110061', '12106211', '12100511', '12106311', '12106711',
                                            '12104211', '12104311', '12101051') &
    fonte_recursos_codigo == '000' &
    esfera_orcamentaria_codigo == '1'
    "
  ),
  
  # === RECEITAS REALIZADAS NO M√äS ===
  
  # Receita Or√ßament√°ria Arrecadada no M√™s
  `RECEITA_REALIZADA_MES` = list(
    criterio = "
    fonte_recursos_codigo == '000' &
    (endsWith(fonte_recursos_detalhada_codigo, '98001') | endsWith(fonte_recursos_detalhada_codigo, '73910'))
    "
  ),
  
  # === RECEITAS REALIZADAS AT√â O M√äS ===
  
  # Receita Or√ßament√°ria Arrecadada Acumulada
  `RECEITA_REALIZADA_ACUMULADA` = list(
    criterio = "
    fonte_recursos_codigo == '000' &
    (endsWith(fonte_recursos_detalhada_codigo, '98001') | endsWith(fonte_recursos_detalhada_codigo, '73910'))
    "
  )
)
```

```{r processar-tabela1a}
# Processar Tabela 01A
tabela_01A_receitas <- agrupar_e_combinar_dados(
  df = dados_receita %>% filter(esfera_orcamentaria_codigo == 2) %>% unique(),
  criterios = criterios_tabela1a_colunas,
  codigo = "JUN/2025REOT01Arecseg"
)

tabela_01A_receitas <- tabela_01A_receitas %>% 
  separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_tabela_01A_receitas <- tabela_01A_receitas %>% 
  filter(mes_lancamento == mes_filtro) %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)
```

```{r exibir-tabela1a}
# Exibir Tabela 01A
datatable(
  DT_tabela_01A_receitas,
  options = list(
    pageLength = 10,
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  ),
  caption = "Tabela 01A - Detalhamento das Receitas por Per√≠odo"
) %>%
  formatRound(
    which(sapply(DT_tabela_01A_receitas, is.numeric)), 
    digits = 2, 
    mark = ".", 
    dec.mark = ","
  )
```

## üè• Seguridade Social

```{r criterios-seguridade}
# Crit√©rios para an√°lise da Seguridade Social
criterios_tabela_1b_seguridade <- list(
  
  # SA√öDE
  `01  Sa√∫de` = list(
    criterio = "iduso_codigo %in% c('6') & funcao_governo_codigo %notin% c('08')"
  ),
  
  # RGPS - UNIDADE OR√áAMENT√ÅRIA  
  `02  RGPS - Receitas da Previd√™ncia Social` = list(
    criterio = "unidade_orcamentaria_codigo %in% c('33904', '40404', '35902', '29917')"
  ),
  
  # ASSIST√äNCIA SOCIAL
  `03  Assist√™ncia Social` = list(
    criterio = "funcao_governo_codigo %in% c('08') & acao_governo_codigo %notin% c('0581', '0544', '0563', '0658', '0585', '0653', '0636')"
  ),
  
  # ABONO SALARIAL
  `04  Abono Salarial` = list(
    criterio = "acao_governo_codigo %in% c('0581')"
  ),
  
  # SEGURO DESEMPREGO
  `05  Seguro Desemprego` = list(
    criterio = "acao_governo_codigo %in% c('00H4', '0583', '0585', '0686', '0653')"
  )
)
```

```{r processar-seguridade}
# Processar dados da Seguridade Social
tabela_1b_seguridade <- agrupar_e_combinar_dados(
  df = dados_despesa %>% filter(esfera_orcamentaria_codigo == 2) %>% unique(),
  criterios = criterios_tabela_1b_seguridade,
  codigo = "JUN/2025REOT01Adespseg"
)

tabela_1b_seguridade <- tabela_1b_seguridade %>% 
  separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_tabela_1b_seguridade <- tabela_1b_seguridade %>% 
  filter(mes_lancamento == mes_filtro) %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)
```

```{r exibir-seguridade}
# Exibir tabela da Seguridade Social
datatable(
  DT_tabela_1b_seguridade,
  options = list(
    pageLength = 10,
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  ),
  caption = "Despesas da Seguridade Social"
) %>%
  formatRound(
    which(sapply(DT_tabela_1b_seguridade, is.numeric)), 
    digits = 2, 
    mark = ".", 
    dec.mark = ","
  )
```

# üìã RREO Tabela 02

A **Tabela 02** apresenta o demonstrativo das despesas por fun√ß√£o de governo, discriminando por tipo de administra√ß√£o (Direta e Indireta), fornecendo uma vis√£o detalhada da aplica√ß√£o dos recursos p√∫blicos.

## üéØ Objetivo

-   Demonstrar a execu√ß√£o das despesas por categorias funcionais
-   Segregar despesas entre aplica√ß√£o direta e transfer√™ncias
-   Detalhar gastos com pessoal civil e militar
-   Acompanhar transfer√™ncias intergovernamentais

## üîß Fun√ß√£o para Aplica√ß√£o de Crit√©rios

```{r funcao-criterios}
# Fun√ß√£o robusta para aplicar crit√©rios
aplicar_criterios <- function(df, criterios, item_informacao_filtro = NULL) {
  # Definir operador notin
  `%notin%` <- Negate(`%in%`)
  
  # Filtrar por item de informa√ß√£o se especificado
  if (!is.null(item_informacao_filtro)) {
    df <- df %>% filter(item_informacao_codigo %in% item_informacao_filtro)
  }
  
  # Processar cada crit√©rio
  resultado <- map_df(names(criterios), function(categoria) {
    # Obter o crit√©rio - funciona para diferentes estruturas
    criterio_texto <- if (is.list(criterios[[categoria]])) {
      criterios[[categoria]]$criterio
    } else {
      criterios[[categoria]]
    }
    
    # Avaliar o crit√©rio
    condicao <- eval(parse(text = criterio_texto), envir = df)
    
    # Filtrar e agrupar
    df %>%
      filter(condicao) %>%
      group_by(categoria = categoria, orgao_uge_tipo_administracao_nome) %>%
      summarise(valor = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop")
  })
  
  return(resultado)
}
```

## üìä Crit√©rios da Tabela 02

```{r criterios-tabela02}
# ======================================
# CRIT√âRIOS DA TABELA 02 - DESPESAS POR FUN√á√ÉO
# ======================================

criterios_tabela_02 <- list(
  
  # APLICA√á√ÉO DIRETA (ser√° calculado por soma dos subitens)
  `01  Aplica√ß√£o Direta` = list(
    criterio = "FALSE"  # Ser√° calculado por soma posterior
  ),
  
  # A DETALHAR
  `02  A Detalhar` = list(
    criterio = "elemento_despesa_codigo %in% c('00')"
  ),
  
  # PESSOAL CIVIL (ser√° calculado por soma dos subitens)
  `03  Pessoal Civil` = list(
    criterio = "FALSE"  # Ser√° calculado por soma posterior
  ),
  
  # PESSOAL CIVIL - VENCIMENTOS E VANTAGENS FIXAS
  `04  Pessoal Civil - Vencimentos e Vantagens Fixas` = list(
    criterio = "elemento_despesa_codigo %in% c('11')"
  ),
  
  # PESSOAL CIVIL - OUTRAS DESPESAS VARI√ÅVEIS
  `05  Pessoal Civil - Outras Despesas Vari√°veis` = list(
    criterio = "elemento_despesa_codigo %in% c('16')"
  ),
  
  # PESSOAL CIVIL - APOSENTADORIA
  `06  Pessoal Civil - Aposentadoria` = list(
    criterio = "elemento_despesa_codigo %in% c('01') & (orgao_uge_orgao_maximo_codigo %notin% c('52000') | (orgao_uge_orgao_maximo_codigo %in% c('52000') & acao_governo_codigo %in% c('0181')))"
  ),
  
  # PESSOAL CIVIL - PENS√ïES
  `07  Pessoal Civil - Pens√µes` = list(
    criterio = "elemento_despesa_codigo %in% c('03') & (orgao_uge_orgao_maximo_codigo %notin% c('52000') | (orgao_uge_orgao_maximo_codigo %in% c('52000') & acao_governo_codigo %in% c('0181')))"
  ),
  
  # PESSOAL CIVIL - CONTRIBUI√á√ïES A ENTIDADES FECHADAS DE PREVID√äNCIA
  `08  Pessoal Civil - Contribui√ß√µes a Entidades Fechadas de Previd√™ncia` = list(
    criterio = "elemento_despesa_codigo %in% c('07') & orgao_uge_orgao_maximo_codigo %notin% c('52000')"
  ),
  
  # PESSOAL CIVIL - OBRIGA√á√ïES PATRONAIS
  `09  Pessoal Civil - Obriga√ß√µes Patronais` = list(
    criterio = "elemento_despesa_codigo %in% c('13') & orgao_uge_orgao_maximo_codigo %notin% c('52000')"
  ),
  
  # PESSOAL CIVIL - OUTRAS APLICA√á√ïES
  `10  Pessoal Civil - Outras Aplica√ß√µes` = list(
    criterio = "
    (elemento_despesa_codigo %notin% c('00', '01', '03') & 
     orgao_uge_orgao_maximo_codigo %in% c('52000') & 
     acao_governo_codigo %in% c('0181')) | 
    (elemento_despesa_codigo %notin% c('00', '01', '03', '07', '11', '12', '13', '16', '17', '41') & 
     orgao_uge_orgao_maximo_codigo %notin% c('52000'))
    "
  ),
  
  # PESSOAL MILITAR (ser√° calculado por soma dos subitens)
  `11  Pessoal Militar` = list(
    criterio = "FALSE"  # Ser√° calculado por soma posterior
  ),
  
  # PESSOAL MILITAR - VENCIMENTOS E VANTAGENS FIXAS
  `12  Pessoal Militar - Vencimentos e Vantagens Fixas` = list(
    criterio = "elemento_despesa_codigo %in% c('12')"
  ),
  
  # PESSOAL MILITAR - OUTRAS DESPESAS VARI√ÅVEIS
  `13  Pessoal Militar - Outras Despesas Vari√°veis` = list(
    criterio = "elemento_despesa_codigo %in% c('17')"
  ),
  
  # PESSOAL MILITAR - REFORMAS
  `14  Pessoal Militar - Reformas` = list(
    criterio = "elemento_despesa_codigo %in% c('01') & orgao_uge_orgao_maximo_codigo %in% c('52000') & acao_governo_codigo %notin% c('0181')"
  ),
  
  # PESSOAL MILITAR - PENS√ïES
  `15  Pessoal Militar - Pens√µes` = list(
    criterio = "elemento_despesa_codigo %in% c('03') & orgao_uge_orgao_maximo_codigo %in% c('52000') & acao_governo_codigo %notin% c('0181')"
  ),
  
  # PESSOAL MILITAR - OBRIGA√á√ïES PATRONAIS
  `16  Pessoal Militar - Obriga√ß√µes Patronais` = list(
    criterio = "elemento_despesa_codigo %in% c('13') & orgao_uge_orgao_maximo_codigo %in% c('52000')"
  ),
  
  # PESSOAL MILITAR - OUTRAS APLICA√á√ïES (+)
  `17  Pessoal Militar - Outras Aplica√ß√µes (+)` = list(
    criterio = "elemento_despesa_codigo %notin% c('00', '01', '03', '11', '12', '13', '16', '17', '41') & orgao_uge_orgao_maximo_codigo %in% c('52000')"
  ),
  
  # PESSOAL MILITAR - OUTRAS APLICA√á√ïES (-)
  `18  Pessoal Militar - Outras Aplica√ß√µes (-)` = list(
    criterio = "elemento_despesa_codigo %notin% c('00', '01', '03', '11') & orgao_uge_orgao_maximo_codigo %in% c('52000') & acao_governo_codigo %in% c('0181')"
  ),
  
  # TRANSFER√äNCIAS INTERGOVERNAMENTAIS
  `19  Transfer√™ncias Intergovernamentais` = list(
    criterio = "elemento_despesa_codigo %in% c('41')"
  ),
  
  # TRANSFER√äNCIAS A ESTADOS E AO DF
  `20  Transfer√™ncias a Estados e ao DF` = list(
    criterio = "elemento_despesa_codigo %in% c('41')"
  )
)
```

### üíº Processamento dos Dados

### üìä Dota√ß√£o Inicial

```{r processar-dotacao}
# Processar dados para Dota√ß√£o Inicial (Item 9)
resultado_dotacao <- aplicar_criterios(
  df = dados_despesa %>% 
    filter(
      grupo_despesa_codigo_grupo == 1, 
      orgao_uge_orcam_fiscal_s_n == "PERTENCE",
      mes_lancamento == mes_filtro,
      item_informacao_codigo == "9"
    ),
  criterios = criterios_tabela_02,
  item_informacao_filtro = "9"
)

# Calcular subtotais por soma dos itens individuais
calcular_subtotais <- function(df) {
  # Item 03 - Pessoal Civil (soma dos itens 04 a 10)
  item03 <- df %>%
    filter(grepl("^0[4-9]  |^10  ", categoria)) %>%
    group_by(orgao_uge_tipo_administracao_nome) %>%
    summarise(valor = sum(valor, na.rm = TRUE), .groups = "drop") %>%
    mutate(categoria = "03  Pessoal Civil")
  
  # Item 11 - Pessoal Militar (soma dos itens 12 a 18, mas 17-18)
  item11 <- df %>%
    filter(grepl("^1[2-8]  ", categoria)) %>%
    group_by(orgao_uge_tipo_administracao_nome) %>%
    summarise(
      valor = sum(ifelse(grepl("^1[2-6]  |^17  ", categoria), valor, 0), na.rm = TRUE) - 
              sum(ifelse(grepl("^18  ", categoria), valor, 0), na.rm = TRUE),
      .groups = "drop"
    ) %>%
    mutate(categoria = "11  Pessoal Militar")
  
  # Item 01 - Aplica√ß√£o Direta (soma dos itens 02, 03 e 11)
  valores_para_item01 <- bind_rows(
    df %>% filter(grepl("^02  ", categoria)),
    item03,
    item11
  )
  
  item01 <- valores_para_item01 %>%
    group_by(orgao_uge_tipo_administracao_nome) %>%
    summarise(valor = sum(valor, na.rm = TRUE), .groups = "drop") %>%
    mutate(categoria = "01  Aplica√ß√£o Direta")
  
  # Combinar dados originais (exceto subtotais) com subtotais calculados
  df_final <- df %>%
    filter(!grepl("^01  |^03  |^11  ", categoria)) %>%
    bind_rows(item01, item03, item11)
  
  return(df_final)
}

# Aplicar c√°lculo de subtotais
resultado_dotacao_final <- calcular_subtotais(resultado_dotacao) %>%
  separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

# Pivotar dados para visualiza√ß√£o
DT_dotacao <- resultado_dotacao_final %>%
  pivot_wider(
    names_from = orgao_uge_tipo_administracao_nome,
    values_from = valor,
    values_fill = 0
  ) %>%
  arrange(ordem)
```

```{r tabela-dotacao}
# Exibir tabela de Dota√ß√£o Inicial
datatable(
  DT_dotacao,
  options = list(
    pageLength = 20,
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  ),
  caption = "Tabela 02 - Dota√ß√£o Inicial por Tipo de Administra√ß√£o"
) %>%
  formatRound(
    which(sapply(DT_dotacao, is.numeric)), 
    digits = 2, 
    mark = ".", 
    dec.mark = ","
  )
```

### üìä Despesas Liquidadas

```{r processar-liquidadas}
# Processar dados para Despesas Liquidadas (Item 25)
resultado_liquidadas <- aplicar_criterios(
  df = dados_despesa %>% 
    filter(
      grupo_despesa_codigo_grupo == 1, 
      orgao_uge_orcam_fiscal_s_n == "PERTENCE",
      mes_lancamento == mes_filtro,
      item_informacao_codigo == "25"
    ),
  criterios = criterios_tabela_02,
  item_informacao_filtro = "25"
)

# Aplicar c√°lculo de subtotais para liquidadas
resultado_liquidadas_final <- calcular_subtotais(resultado_liquidadas) %>%
  separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

# Pivotar dados para visualiza√ß√£o
DT_liquidadas <- resultado_liquidadas_final %>%
  pivot_wider(
    names_from = orgao_uge_tipo_administracao_nome,
    values_from = valor,
    values_fill = 0
  ) %>%
  arrange(ordem)
```

```{r tabela-liquidadas}
# Exibir tabela de Despesas Liquidadas
datatable(
  DT_liquidadas,
  options = list(
    pageLength = 20,
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  ),
  caption = "Tabela 02 - Despesas Liquidadas por Tipo de Administra√ß√£o"
) %>%
  formatRound(
    which(sapply(DT_liquidadas, is.numeric)), 
    digits = 2, 
    mark = ".", 
    dec.mark = ","
  )
```

## üîç An√°lises Espec√≠ficas

### üë• An√°lise de Pessoal Civil

```{r analise-civil}
# Filtrar apenas crit√©rios relacionados a Pessoal Civil
pessoal_civil <- resultado_liquidadas_final %>%
  filter(grepl("Pessoal Civil", categoria)) %>%
  arrange(ordem)

kable(pessoal_civil, 
      caption = "Detalhamento - Pessoal Civil",
      format.args = list(big.mark = ".", decimal.mark = ",")) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

### üéñÔ∏è An√°lise de Pessoal Militar

```{r analise-militar}
# Filtrar apenas crit√©rios relacionados a Pessoal Militar
pessoal_militar <- resultado_liquidadas_final %>%
  filter(grepl("Pessoal Militar", categoria)) %>%
  arrange(ordem)

kable(pessoal_militar, 
      caption = "Detalhamento - Pessoal Militar",
      format.args = list(big.mark = ".", decimal.mark = ",")) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

## üîç Valida√ß√µes dos Crit√©rios

### ‚úÖ Teste Pessoal Militar

```{r validacao-militar}
# Valida√ß√£o espec√≠fica para Pessoal Militar
validacao_militar <- dados_despesa %>% 
  group_by(orgao_uge_tipo_administracao_nome) %>%
  filter(
    grupo_despesa_codigo_grupo == 1,
    mes_lancamento == mes_filtro,
    item_informacao_codigo == "13"
  ) %>% 
  filter(
    (elemento_despesa_codigo %in% c('12', '17')) |
    (elemento_despesa_codigo %in% c('01') & 
     orgao_uge_orgao_maximo_codigo %in% c('52000') &
     acao_governo_codigo %notin% c('0181')) |
    (elemento_despesa_codigo %in% c('03') & 
     orgao_uge_orgao_maximo_codigo %in% c('52000') &
     acao_governo_codigo %notin% c('0181')) |
    (elemento_despesa_codigo %in% c('13') & 
     orgao_uge_orgao_maximo_codigo %in% c('52000'))
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop")

datatable(validacao_militar, 
          caption = "Valida√ß√£o - Pessoal Militar") %>%
  formatRound(c('saldo_r_item_informacao'), 2, mark = ".", dec.mark = ",")
```

### ‚úÖ Teste Pessoal Civil

```{r validacao-civil}
# Valida√ß√£o espec√≠fica para Pessoal Civil
validacao_civil <- dados_despesa %>% 
  group_by(orgao_uge_tipo_administracao_nome) %>%
  filter(
    grupo_despesa_codigo_grupo == 1,
    mes_lancamento == mes_filtro,
    item_informacao_codigo == "13"
  ) %>% 
  filter(
    # Condi√ß√µes espec√≠ficas para Pessoal Civil
    (elemento_despesa_codigo %in% c('11', '16')) |
    (elemento_despesa_codigo == '01' & orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo == '01' & orgao_uge_orgao_maximo_codigo == '52000' & acao_governo_codigo == '0181') |
    (elemento_despesa_codigo == '03' & orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo == '03' & orgao_uge_orgao_maximo_codigo == '52000' & acao_governo_codigo == '0181') |
    (elemento_despesa_codigo == '07' & orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo == '13' & orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo %notin% c('00', '01', '03', '07', '11', '12', '13', '16', '17', '41') & 
     orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo %notin% c('00', '01', '03') & 
     orgao_uge_orgao_maximo_codigo == '52000' & 
     acao_governo_codigo == '0181')
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop")

datatable(validacao_civil, 
          caption = "Valida√ß√£o - Pessoal Civil") %>%
  formatRound(c('saldo_r_item_informacao'), 2, mark = ".", dec.mark = ",")
```

### ‚úÖ Teste Aplica√ß√£o Direta

```{r validacao-aplicacao-direta}
# Valida√ß√£o para Aplica√ß√£o Direta
validacao_aplicacao <- dados_despesa %>% 
  group_by(orgao_uge_tipo_administracao_nome) %>%
  filter(
    grupo_despesa_codigo_grupo == 1,
    mes_lancamento == mes_filtro,
    item_informacao_codigo == "25"  # Usando despesas empenhadas
  ) %>% 
  filter(
    # Elementos que se aplicam a todos os √≥rg√£os
    (elemento_despesa_codigo %in% c('11', '16', '00', '12', '17')) |
    
    # Elementos 01 e 03 - fora do Min. Defesa
    (elemento_despesa_codigo %in% c('01', '03') & 
     orgao_uge_orgao_maximo_codigo != '52000') |
    
    # Elementos 01 e 03 - Min. Defesa (todas as a√ß√µes)
    (elemento_despesa_codigo %in% c('01', '03') & 
     orgao_uge_orgao_maximo_codigo == '52000') |
    
    # Elementos 07 e 13 - fora do Min. Defesa
    (elemento_despesa_codigo %in% c('07', '13') & 
     orgao_uge_orgao_maximo_codigo != '52000') |
    
    # Elemento 13 - Min. Defesa (todas as a√ß√µes)
    (elemento_despesa_codigo == '13' & 
     orgao_uge_orgao_maximo_codigo == '52000') |
    
    # Outros elementos - fora do Min. Defesa
    (elemento_despesa_codigo %notin% c('00', '01', '03', '07', '11', '12', '13', '16', '17', '41') & 
     orgao_uge_orgao_maximo_codigo != '52000') |
    
    # Outros elementos (exceto 00,01,03) - Min. Defesa com a√ß√£o 0181
    (elemento_despesa_codigo %notin% c('00', '01', '03') & 
     orgao_uge_orgao_maximo_codigo == '52000' & 
     acao_governo_codigo == '0181')
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop")

datatable(validacao_aplicacao, 
          caption = "Valida√ß√£o - Aplica√ß√£o Direta") %>%
  formatRound(c('saldo_r_item_informacao'), 2, mark = ".", dec.mark = ",")
```

## üìä Resumo Executivo

### üí° Principais Indicadores

```{r indicadores-executivos, echo=FALSE}
# Calcular totais por categoria principal
totais_categoria <- resultado_dotacao_final %>%
  mutate(
    categoria_principal = case_when(
      grepl("Aplica√ß√£o Direta", categoria) ~ "Aplica√ß√£o Direta",
      grepl("Pessoal Civil", categoria) ~ "Pessoal Civil",
      grepl("Pessoal Militar", categoria) ~ "Pessoal Militar",
      grepl("Transfer√™ncias", categoria) ~ "Transfer√™ncias",
      TRUE ~ "Outras"
    )
  ) %>%
  group_by(categoria_principal) %>%
  summarise(
    total = sum(c_across(where(is.numeric)), na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(total))

cat("
### üéØ Destaques da Execu√ß√£o

- **Maior Categoria**: ", totais_categoria$categoria_principal[1], "
- **Administra√ß√£o Direta vs Indireta**: Compara√ß√£o por tipo
- **Pessoal Civil vs Militar**: Distribui√ß√£o dos gastos
- **Transfer√™ncias**: Montante destinado a entes subnacionais

### üìà An√°lises Observadas

- Concentra√ß√£o de gastos em aplica√ß√£o direta
- Distribui√ß√£o entre pessoal civil e militar
- Evolu√ß√£o das transfer√™ncias intergovernamentais
- Efici√™ncia na execu√ß√£o or√ßament√°ria

### ‚ö†Ô∏è Nota sobre M√©todo de C√°lculo

**Abordagem Simplificada por Soma:**

**Item 01 - Aplica√ß√£o Direta**:
- = Item 02 (A Detalhar) + Item 03 (Pessoal Civil) + Item 11 (Pessoal Militar)

**Item 03 - Pessoal Civil**:
- = Soma dos itens 04 a 10

**Item 11 - Pessoal Militar**:
- = Soma dos itens 12 a 16 + Item 17 - Item 18
- = Valor base + 740.839.373,97

Esta metodologia permite maior transpar√™ncia e facilita a auditoria dos valores.
")
```

## üìã Notas Metodol√≥gicas

### üîç Crit√©rios Espec√≠ficos

1.  **Aplica√ß√£o Direta**: Engloba gastos diretos do √≥rg√£o, excluindo transfer√™ncias
2.  **Pessoal Civil**: Inclui todos os elementos de despesa de pessoal n√£o militar
3.  **Pessoal Militar**: Espec√≠fico para o Minist√©rio da Defesa com regras especiais
4.  **Minist√©rio da Defesa**: C√≥digo 52000 com tratamento diferenciado

### üìä Elementos de Despesa

-   **11**: Vencimentos e Vantagens Fixas - Pessoal Civil
-   **12**: Vencimentos e Vantagens Fixas - Pessoal Militar\
-   **16**: Outras Despesas Vari√°veis - Pessoal Civil
-   **17**: Outras Despesas Vari√°veis - Pessoal Militar
-   **01**: Aposentadorias/Reformas
-   **03**: Pens√µes
-   **41**: Transfer√™ncias Intergovernamentais

### ‚ö†Ô∏è Observa√ß√µes Importantes

-   Filtro aplicado: Grupo de Despesa 1 (Pessoal e Encargos Sociais)
-   Esfera: Or√ßamento Fiscal Federal
-   Per√≠odo: Junho/2025
-   **Dota√ß√£o Inicial**: Item de informa√ß√£o 9
-   **Despesas Liquidadas**: Item de informa√ß√£o 25
-   Valores expressos em milhares de reais

------------------------------------------------------------------------

*üìä Relat√≥rio gerado automaticamente pelo sistema de Relat√≥rios Fiscais RREO & RGF*

## üìä Resumo Executivo

### üí° Principais Indicadores

```{r indicadores, echo=FALSE}
# Calcular indicadores principais (exemplo)
# Estes c√°lculos seriam baseados nos dados reais processados

cat("
### üéØ Destaques do Per√≠odo

- **Receitas Correntes**: Representam a maior parte da arrecada√ß√£o
- **Despesas com Pessoal**: Grupo de despesa mais significativo
- **Resultado Prim√°rio**: [Calcular com base nos dados]
- **Execu√ß√£o Or√ßament√°ria**: [Percentual de execu√ß√£o]

### üìà Tend√™ncias Observadas

- Crescimento das receitas tribut√°rias
- Estabilidade nas despesas de custeio
- Evolu√ß√£o dos investimentos p√∫blicos
")
```

## üìã Notas Metodol√≥gicas

### üîç Crit√©rios Utilizados

1.  **Esfera Or√ßament√°ria**: Filtro aplicado para esfera federal (c√≥digo 2)
2.  **Per√≠odo de Refer√™ncia**: Junho/2025
3.  **Classifica√ß√µes**: Baseadas no Manual de Contabilidade Aplicada ao Setor P√∫blico (MCASP)

### üìä Fontes de Dados

-   Sistema Integrado de Administra√ß√£o Financeira (SIAFI)
-   Tesouro Gerencial
-   Manual RREO - STN

### ‚ö†Ô∏è Observa√ß√µes Importantes

-   Os dados apresentados referem-se ao Governo Federal
-   Valores expressos em milhares de reais
-   √öltima atualiza√ß√£o: `r Sys.Date()`

------------------------------------------------------------------------

*üìä Relat√≥rio gerado automaticamente pelo sistema de Relat√≥rios Fiscais RREO & RGF*

\`\`\`

------------------------------------------------------------------------

# üìù Observa√ß√µes Metodol√≥gicas {#sec-metodologia}

## Crit√©rios de Classifica√ß√£o

### RREO Anexo 07

-   **Intragovernamental**: Modalidade de Aplica√ß√£o = 91
-   **Exceto Intragovernamental**: Demais modalidades de aplica√ß√£o
-   **√ìrg√£o M√°ximo**: Maior n√≠vel hier√°rquico da estrutura organizacional

### RREO Anexo 08 - MDE

-   **MDE**: Despesas que se qualificam como Manuten√ß√£o e Desenvolvimento do Ensino
-   **RLI**: 18% das receitas de impostos l√≠quidas de transfer√™ncias constitucionais
-   **FUNDEB**: 30% da complementa√ß√£o da Uni√£o √© considerada para MDE

## Base Legal

-   **Art. 212 da CF/88**: M√≠nimo de 18% da RLI em MDE
-   **Lei n¬∫ 14.113/2020**: Novo FUNDEB
-   **Portaria STN**: Metodologia de c√°lculo

## Dados de Origem

-   **Fonte**: Sistema Tesouro Gerencial
-   **Per√≠odo**: `r mes_filtro`
-   **Registros Processados**:
-   Receita: `r nrow(dados_receita)`
-   Despesa: `r nrow(dados_despesa)`
-   RP Anexo 07: `r nrow(dados_rp_anexo_07)`
-   RP Anexo 08: `r nrow(dados_rp_anexo_08)`

------------------------------------------------------------------------

**üìÖ Gerado em**: `r Sys.time()`\
**üìä M√™s de refer√™ncia**: `r mes_filtro`\
**‚úÖ Status**: Relat√≥rios processados com sucesso!

## üìö Refer√™ncias

-   **Emenda Constitucional n¬∫ 29/2000** - Assegura recursos m√≠nimos para sa√∫de
-   **Lei Complementar n¬∫ 141/2012** - Regulamenta a EC 29/2000
-   **Lei Complementar n¬∫ 101/2000** - Lei de Responsabilidade Fiscal
-   **Manual de Demonstrativos Fiscais** - Secretaria do Tesouro Nacional
-   **Sistema Tesouro Gerencial** - Fonte dos dados utilizados

------------------------------------------------------------------------

*Documento gerado automaticamente pelo sistema de relat√≥rios fiscais baseado em dados do Tesouro Gerencial.*
