---
title: "üìä RREO & RGF - Relat√≥rios Fiscais"
subtitle: "Sistema Unificado de Relat√≥rios Fiscais do Governo Federal"
author: "Governo Federal"
date: today
execute:
  warning: false
  message: false
  cache: true
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    number-sections: true
    code-fold: true
    code-summary: "Mostrar c√≥digo"
    fig-width: 10
    fig-height: 6
---

# üìö Carregamento de Bibliotecas e Configura√ß√µes {#sec-setup}

```{r setup}
#| include: false

# Bibliotecas principais
library(dplyr)
library(tidyr)
library(stringr)
library(readxl)
library(janitor)
library(purrr)
library(forcats)
library(DT)
library(knitr)
library(kableExtra)

# Configura√ß√µes globais
options(OutDec = ",")
options(scipen = 999)

# Configura√ß√µes DT
options(DT.options = 
  list(
    pageLength = 20,
    lengthMenu = c(5, 10, 25, 50, 100),
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese.json')
  )
)

# Operadores customizados
`%notin%` <- Negate(`%in%`)
`%||%` <- function(x, y) if(is.null(x) || length(x) == 0 || is.na(x)) y else x

print("‚úÖ Bibliotecas carregadas com sucesso!")
```

## üîß Vari√°veis Globais

```{r variaveis_globais}
# Filtro principal do m√™s
mes_filtro <- "JUN/2025"

print(paste("üìÖ M√™s de refer√™ncia definido:", mes_filtro))
```

# üì• Importa√ß√£o dos Dados {#sec-dados}

## üßæ Dados de Receita

```{r dados_receita}
#| echo: true
#| eval: true

dados_receita <- read_excel("data/tg_receita.xlsx") %>% 
  clean_names() %>% 
  filter(orgao_uge_orcam_fiscal_s_n == "PERTENCE")

# Criar vari√°veis derivadas
dados_receita <- dados_receita %>% 
  mutate(
    tipo_modalidade = ifelse(
      nre1_categoria_economica_codigo %in% c(7, 8), 
      "intra", 
      "exceto intra"
    ),
    refinanciamento = ifelse(
      natureza_receita_codigo_completo %in% c(81110201, 21110201, 21210201), 
      "sim", 
      "nao"
    )
  )

print(paste("‚úÖ Dados de receita carregados:", nrow(dados_receita), "registros"))
```

## üí∞ Dados de Despesa

```{r dados_despesa}
#| echo: true
#| eval: true

# Buscar todos os arquivos de despesa
arq_despesa <- list.files(path = "data/", pattern = 'tg_despesa', full.names = TRUE)

dados_despesa <- map_df(arq_despesa, read_excel) %>%
  clean_names() %>%
  filter(orgao_uge_orcam_fiscal_s_n == "PERTENCE")

# Criar vari√°veis derivadas
dados_despesa <- dados_despesa %>%
  mutate(
    tipo_modalidade = ifelse(
      modalidade_aplicacao_codigo == 91,
      "intra",
      "exceto intra"
    ),
    refinanciamento = case_when(
      grupo_despesa_codigo_grupo == 6 &
        elemento_despesa_codigo %in% c(76, 77) &
        subfuncao_governo_codigo %in% c(841, 842, 843, 844, 846) &
        fonte_recursos_codigo == "443" ~ "sim",
      !(grupo_despesa_codigo_grupo == 6 &
        elemento_despesa_codigo %in% c(76, 77) &
        subfuncao_governo_codigo %in% c(841, 842, 843, 844, 846) &
        fonte_recursos_codigo == "443") ~ "nao",
      TRUE ~ "escape"
    ),
    poder = case_when(
      orgao_uge_orgao_maximo_codigo %in% c(59000) ~ "MINIST√âRIO P√öBLICO DA UNI√ÉO",
      orgao_uge_orgao_maximo_codigo %in% c(29000) ~ "DEFENSORIA P√öBLICA",
      TRUE ~ orgao_uge_poder_nome
    )
  )

print(paste("‚úÖ Dados de despesa carregados:", nrow(dados_despesa), "registros"))
```

## üìã Dados de Restos a Pagar

```{r dados_rp}
#| echo: true
#| eval: true

# RP Anexo 07
dados_rp_anexo_07 <- read_excel("data/tg_rp_anexo_07.xlsx") %>% 
  clean_names()

dados_rp_anexo_07 <- dados_rp_anexo_07 %>%  
  mutate(
    tipo_modalidade = ifelse(
      modalidade_aplicacao_codigo == 91, 
      "intra", 
      "exceto intra"
    ),
    poder = case_when(
      orgao_uge_orgao_maximo_codigo %in% c(59000) ~ "MINIST√âRIO P√öBLICO DA UNI√ÉO",
      orgao_uge_orgao_maximo_codigo %in% c(29000) ~ "DEFENSORIA P√öBLICA",
      TRUE ~ orgao_uge_poder_nome
    )
  )

# RP Anexo 12
dados_rp_anexo_12 <- read_excel("data/tg_rp_anexo_12.xlsx") %>% 
  clean_names()

# RP Anexo 08
dados_rp_anexo_08 <- read_excel("data/tg_rp_anexo_08.xlsx") %>% 
  clean_names()

print("‚úÖ Dados de Restos a Pagar carregados:")
print(paste("   - Anexo 07:", nrow(dados_rp_anexo_07), "registros"))
print(paste("   - Anexo 12:", nrow(dados_rp_anexo_12), "registros"))
print(paste("   - Anexo 08:", nrow(dados_rp_anexo_08), "registros"))
```

## üè¶ Dados Cont√°beis e Espec√≠ficos

```{r dados_contabeis}
#| echo: true
#| eval: true

# Tabela 04 - Contas Cont√°beis
dados_tabela_04 <- read_excel("data/dados_conta_contabil_tabela_04_claude_conta_contabil.xlsx") %>% 
  clean_names()

dados_tabela_04_170600 <- read_excel("data/dados_conta_contabil_tabela_04_claude_conta_contabil_170600.xlsx") %>% 
  clean_names() %>% 
  mutate(ug = "170600")

dados_tabela_04_filtro_rreo <- read_excel("data/dados_conta_contabil_tabela_04_claude_conta_contabil_filtro_rreo.xlsx") %>% 
  clean_names() %>% 
  mutate(ug = "demais")

# Anexo 06 - NDD e Categoria/Grupo
dados_ndd <- read_excel("data/tg_anexo_06_rreo_despesas_primarias_ndd.xlsx") %>% 
  clean_names()

dados_categoria_grupo <- read_excel("data/tg_anexo_06_rreo_despesas_primarias_categoria_grupo.xlsx") %>% 
  clean_names()

# RPN - Juros e Disponibilidades
tg_RPN_juros <- read_excel("data/tg_RPN_juros.xlsx") %>% 
  clean_names()

tg_RPN_disponibilidades <- read_excel("data/tg_RPN_disponibilidades.xlsx") %>% 
  clean_names()

print("‚úÖ Dados cont√°beis carregados:")
print(paste("   - Tabela 04:", nrow(dados_tabela_04), "registros"))
print(paste("   - Tabela 04 (170600):", nrow(dados_tabela_04_170600), "registros"))
print(paste("   - NDD:", nrow(dados_ndd), "registros"))
print(paste("   - RPN Juros:", nrow(tg_RPN_juros), "registros"))
```

## ‚öôÔ∏è Metodologia e Filtros

```{r metodologia}
#| echo: true
#| eval: true

# Filtros de metodologia
filtros_metodologia <- read_excel("data/filtros.xlsx", sheet = "metodologia")
atributos_metodologia <- read_excel("data/filtros.xlsx", sheet = "metodologia")

print("‚úÖ Metodologia carregada:")
print(paste("   - Filtros:", nrow(filtros_metodologia), "registros"))
print(paste("   - Atributos:", nrow(atributos_metodologia), "registros"))
```

## üìä Resumo dos Dados Carregados

```{r resumo_dados}
#| echo: false

# Criar tabela resumo
resumo_dados <- data.frame(
  Dataset = c(
    "Receita", "Despesa", "RP Anexo 07", "RP Anexo 12", "RP Anexo 08",
    "Tabela 04", "Tabela 04 (170600)", "Tabela 04 (RREO)", 
    "NDD", "Categoria/Grupo", "RPN Juros", "RPN Disponibilidades",
    "Filtros Metodologia"
  ),
  Registros = c(
    nrow(dados_receita), nrow(dados_despesa), nrow(dados_rp_anexo_07),
    nrow(dados_rp_anexo_12), nrow(dados_rp_anexo_08),
    nrow(dados_tabela_04), nrow(dados_tabela_04_170600), nrow(dados_tabela_04_filtro_rreo),
    nrow(dados_ndd), nrow(dados_categoria_grupo), nrow(tg_RPN_juros), 
    nrow(tg_RPN_disponibilidades), nrow(filtros_metodologia)
  ),
  Status = rep("‚úÖ Carregado", 13)
)

kable(resumo_dados, 
      caption = "üìã Resumo dos Datasets Carregados",
      format = "html") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
  row_spec(0, bold = TRUE, background = "#f8f9fa")
```

# üîß Fun√ß√µes Auxiliares {#sec-funcoes-aux}

## üî¢ Fun√ß√µes de Formata√ß√£o

### Formata√ß√£o de N√∫meros

```{r formatar_numero}
#| echo: true
#| eval: true

#' Formatar n√∫meros para exibi√ß√£o brasileira
#' @param x Vetor num√©rico a ser formatado
#' @return String formatada com ponto como separador de milhares e v√≠rgula como decimal
formatar_numero <- function(x) {
  format(x, big.mark = ".", decimal.mark = ",", scientific = FALSE, nsmall = 2)
}

# Teste da fun√ß√£o
exemplo_numero <- 1234567.89
print(paste("N√∫mero original:", exemplo_numero))
print(paste("N√∫mero formatado:", formatar_numero(exemplo_numero)))
```

### Formata√ß√£o de Tabelas

```{r dt_formatada}
#| echo: true
#| eval: true

#' Criar tabela DT formatada com totais
#' @param df Data frame a ser formatado
#' @param grupo Vetor com nomes das colunas de agrupamento (n√£o num√©ricas)
#' @return Objeto DT formatado
dt_formatada <- function(df, grupo) {
  library(DT)
  library(janitor)
  
  datatable(
    df %>% adorn_totals("row"), 
    rownames = FALSE,
    extensions = 'Buttons',
    options = list(
      lengthMenu = c(5, 10, 25, 50, 100),
      dom = 'Bfrtip',
      buttons = list('excel')
    )
  ) %>% 
  formatRound(
    setdiff(df %>% colnames(), grupo), 
    2, 
    mark = ".", 
    dec.mark = ","
  ) %>% 
  DT::formatStyle(
    columns = colnames(.$x$data), 
    fontSize = '75%'
  )
}

print("‚úÖ Fun√ß√£o dt_formatada definida")
```

## üîÑ Fun√ß√µes de Transforma√ß√£o

### Tabela Pivotada

```{r tabela_pivotada}
#| echo: true
#| eval: true

#' Pivotar tabela a partir dos itens de informa√ß√£o
#' @param df Data frame com dados
#' @param grupo Vetor com nomes das colunas de agrupamento
#' @return Data frame pivotado e sumarizado
tabela_pivotada <- function(df, grupo) {
  library(dplyr)
  library(tidyr)
  
  # Obter itens √∫nicos de informa√ß√£o
  itens <- df$item_informacao_nome %>% unique() %>% na.omit()
  
  # Verificar se a coluna principal existe
  if (!"saldo_r_item_informacao" %in% names(df)) {
    stop("Coluna 'saldo_r_item_informacao' n√£o encontrada no data frame")
  }
  
  # Pivotar e sumarizar apenas a coluna num√©rica
  df %>% 
    group_by(!!!syms(grupo)) %>% 
    pivot_wider(
      names_from = item_informacao_nome, 
      values_from = saldo_r_item_informacao,
      values_fill = 0
    ) %>% 
    # Sumarizar apenas as colunas que correspondem aos itens (num√©ricas)
    summarise(
      across(all_of(itens), ~ sum(.x, na.rm = TRUE)),
      .groups = "drop"
    )
}

print("‚úÖ Fun√ß√£o tabela_pivotada definida")

#' Debug de estrutura de dados
#' @param df Data frame para debug
#' @param nome Nome do data frame
debug_estrutura <- function(df, nome = "DataFrame") {
  cat("\n=== DEBUG:", nome, "===\n")
  cat("Dimens√µes:", nrow(df), "linhas x", ncol(df), "colunas\n")
  cat("Colunas:", paste(names(df), collapse = ", "), "\n")
  
  # Mostrar tipos de colunas
  cat("Tipos de colunas:\n")
  tipos <- sapply(df, class)
  for(i in seq_along(tipos)) {
    cat(" -", names(tipos)[i], ":", tipos[i], "\n")
  }
  
  # Mostrar amostras de cada coluna
  cat("Amostras (primeiras 3 linhas):\n")
  print(head(df, 3))
  
  cat("========================\n\n")
}

print("‚úÖ Fun√ß√£o debug_estrutura definida")
```

## üß© Fun√ß√µes de Desmembramento

### Desmembrar C√≥digo

```{r desmembrar_codigo}
#| echo: true
#| eval: true

#' Desmembrar c√≥digo no formato MMM/AAAXXX[A|T]##[A-Za-z0-9]{0,10}
#' @param codigo String no formato especificado
#' @return Lista com componentes: mes_lancamento, demonstrativo, anexo, parte
desmembrar_codigo <- function(codigo) {
  library(stringr)
  
  # Validar formato
  if (!str_detect(codigo, "^[A-Z]{3}/\\d{4}[A-Za-z0-9]{3}[AT]\\d{2}[A-Za-z0-9]{0,10}$")) {
    stop("C√≥digo inv√°lido. Deve seguir o formato: MMM/AAAXXX[A|T]##[A-Za-z0-9]{0,10}")
  }
  
  # Extrair componentes
  mes_lancamento <- str_sub(codigo, 1, 8)   # Ex.: "JUN/2025"
  demonstrativo <- str_sub(codigo, 9, 11)   # Ex.: "RGF" ou "REO"
  anexo <- str_sub(codigo, 12, 14)          # Ex.: "A08"
  parte <- str_sub(codigo, 15, -1)          # Ex.: "despesa" ou ""
  
  # Validar mes_lancamento
  if (!str_detect(mes_lancamento, "^[A-Z]{3}/\\d{4}$")) {
    stop("Formato de mes_lancamento inv√°lido. Deve ser MMM/AAAA")
  }
  
  # Validar m√™s
  meses_validos <- c("JAN", "FEV", "MAR", "ABR", "MAI", "JUN", 
                     "JUL", "AGO", "SET", "OUT", "NOV", "DEZ")
  mes_letras <- str_sub(mes_lancamento, 1, 3)
  if (!(mes_letras %in% meses_validos)) {
    stop(paste("M√™s inv√°lido:", mes_letras))
  }
  
  # Validar demonstrativo
  if (!str_detect(demonstrativo, "^[A-Za-z0-9]{3}$")) {
    stop("Demonstrativo deve ter exatamente 3 caracteres alfanum√©ricos")
  }
  
  # Validar anexo
  if (!str_detect(anexo, "^[AT]\\d{2}$")) {
    stop("Anexo deve ser A ou T seguido por 2 d√≠gitos")
  }
  
  # Definir parte como NA se vazio
  parte <- ifelse(parte == "", NA_character_, parte)
  
  list(
    mes_lancamento = mes_lancamento,
    demonstrativo = demonstrativo,
    anexo = anexo,
    parte = parte
  )
}

# Teste da fun√ß√£o
codigo_teste <- "JUN/2025RGFA07"
resultado_teste <- desmembrar_codigo(codigo_teste)
print("Teste de desmembramento:")
print(resultado_teste)
```

### Agrupar e Combinar Dados

```{r agrupar_combinar}
#| echo: true
#| eval: true

#' Agrupar, combinar e adicionar colunas com base no c√≥digo
#' @param df Data frame de entrada
#' @param criterios Lista de crit√©rios por categoria
#' @param codigo C√≥digo a ser desmembrado
#' @return Data frame processado e classificado
agrupar_e_combinar_dados <- function(df, criterios, codigo) {
  library(dplyr)
  library(purrr)
  library(forcats)
  library(stringr)
  
  # Desmembrar c√≥digo
  params <- desmembrar_codigo(codigo)
  
  # Filtrar por m√™s se coluna existir
  if ("mes_lancamento" %in% colnames(df)) {
    df <- df %>% filter(mes_lancamento == params$mes_lancamento)
  } else {
    warning("Coluna 'mes_lancamento' n√£o encontrada. Ignorando filtro por m√™s.")
  }
  
  # Processar cada categoria
  processar_categoria <- function(categoria, crit) {
    tryCatch({
      # Avaliar condi√ß√£o
      condicao_expr <- eval(parse(text = crit$criterio), envir = df)
      
      df %>%
        filter(condicao_expr) %>%
        group_by(mes_lancamento, item_informacao_nome, item_informacao_codigo) %>%
        summarise(
          saldo_r_item_informacao = sum(saldo_r_item_informacao, na.rm = TRUE), 
          .groups = "drop"
        ) %>%
        mutate(
          categoria = categoria,
          mes_lancamento = params$mes_lancamento,
          demonstrativo = params$demonstrativo,
          anexo = params$anexo,
          parte = params$parte
        ) %>%
        # Reordenar por c√≥digo
        mutate(item_informacao_nome = fct_reorder(item_informacao_nome, item_informacao_codigo))
    }, error = function(e) {
      warning(paste("Erro ao processar categoria", categoria, ":", e$message))
      return(data.frame())
    })
  }
  
  # Aplicar crit√©rios
  resultado <- map_df(names(criterios), ~ processar_categoria(.x, criterios[[.x]]))
  
  # Criar objeto no ambiente global
  assign(codigo, resultado, envir = .GlobalEnv)
  
  return(resultado)
}

print("‚úÖ Fun√ß√£o agrupar_e_combinar_dados definida")
```

## üõ†Ô∏è Utilit√°rios Diversos

### Fun√ß√£o de Valida√ß√£o

```{r validacao}
#| echo: true
#| eval: true

#' Validar se data frame possui colunas obrigat√≥rias
#' @param df Data frame a ser validado
#' @param colunas_obrigatorias Vetor com nomes das colunas obrigat√≥rias
#' @return TRUE se v√°lido, erro se inv√°lido
validar_colunas <- function(df, colunas_obrigatorias) {
  colunas_presentes <- names(df)
  colunas_ausentes <- setdiff(colunas_obrigatorias, colunas_presentes)
  
  if (length(colunas_ausentes) > 0) {
    stop(paste("Colunas ausentes:", paste(colunas_ausentes, collapse = ", ")))
  }
  
  return(TRUE)
}

print("‚úÖ Fun√ß√£o validar_colunas definida")
```

# üìä Fun√ß√µes de An√°lise {#sec-funcoes-analise}

## üí∞ Fun√ß√µes para DCL (D√≠vida Consolidada L√≠quida)

### Tratamento de Valores NA

```{r tratar_na}
#| echo: true
#| eval: true

#' Tratar valores NA e nulos
#' @param x Valor a ser tratado
#' @return Valor tratado (0 se NA/NULL)
tratar_na <- function(x) {
  ifelse(is.na(x) | length(x) == 0, 0, x)
}

print("‚úÖ Fun√ß√£o tratar_na definida")
```

## üßÆ Fun√ß√µes de C√°lculo Geral

### C√°lculo de Percentuais

```{r calcular_percentuais}
#| echo: true
#| eval: true

#' Calcular percentuais com tratamento de divis√£o por zero
#' @param valor_numerador Valor do numerador
#' @param valor_denominador Valor do denominador
#' @param casas_decimais N√∫mero de casas decimais
#' @return Percentual calculado
calcular_percentual <- function(valor_numerador, valor_denominador, casas_decimais = 2) {
  if (is.na(valor_denominador) || valor_denominador == 0) {
    return(0)
  }
  
  percentual <- (valor_numerador / valor_denominador) * 100
  round(percentual, casas_decimais)
}

# Teste da fun√ß√£o
teste_perc <- calcular_percentual(25, 100)
print(paste("Teste percentual 25/100:", teste_perc, "%"))
```

# üìã RREO Anexo 07 - Restos a Pagar {#sec-anexo-07}

## üìù Descri√ß√£o

Este anexo apresenta os Restos a Pagar classificados por:

-   **Tipo de Modalidade**: Intragovernamental vs Exceto Intragovernamental
-   **√ìrg√£o**: M√°ximo da estrutura organizacional
-   **Situa√ß√£o**: Processados e N√£o Processados

## üéØ Processamento dos Dados

### Valida√ß√£o dos Dados

```{r validacao_anexo_07}
#| echo: true

# Verificar se os dados existem
if (!exists("dados_rp_anexo_07")) {
  stop("‚ùå Dados do Anexo 07 n√£o encontrados. Execute a se√ß√£o de importa√ß√£o primeiro.")
}

# Validar colunas necess√°rias
colunas_necessarias <- c(
  "tipo_modalidade",
  "orgao_uge_orgao_maximo_codigo", 
  "orgao_uge_orgao_maximo_nome",
  "item_informacao_nome",
  "saldo_r_item_informacao"
)

# Valida√ß√£o usando fun√ß√£o centralizada
validar_colunas(dados_rp_anexo_07, colunas_necessarias)

print(paste("‚úÖ Dados validados:", nrow(dados_rp_anexo_07), "registros"))
print(paste("‚úÖ Colunas verificadas:", length(colunas_necessarias), "de", length(colunas_necessarias)))
```

### Defini√ß√£o dos Agrupamentos

```{r agrupamentos_anexo_07}
#| echo: true

# Definir colunas de agrupamento
agrupado_despesa_tipo_modalidade_orgao <- c(
  "tipo_modalidade", 
  "orgao_uge_orgao_maximo_codigo", 
  "orgao_uge_orgao_maximo_nome"
)

print("‚úÖ Agrupamentos definidos:")
print(agrupado_despesa_tipo_modalidade_orgao)
```

## üìà Tabela Principal - Restos a Pagar por Modalidade e √ìrg√£o

```{r tabela_anexo_07}
#| echo: true
#| eval: true

# Processar e exibir tabela principal usando fun√ß√µes centralizadas
dt_formatada(
  tabela_pivotada(dados_rp_anexo_07 %>% filter(mes_lancamento == mes_filtro), agrupado_despesa_tipo_modalidade_orgao), 
  agrupado_despesa_tipo_modalidade_orgao
)
```

## üìä An√°lises Complementares

### Resumo por Tipo de Modalidade

```{r resumo_modalidade_anexo_07}
#| echo: true
#| eval: true

resumo_modalidade <- dados_rp_anexo_07 %>%
  group_by(tipo_modalidade) %>%
  summarise(
    total_saldo = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    percentual = calcular_percentual(total_saldo, sum(total_saldo)),
    total_saldo_formatado = formatar_numero(total_saldo)
  )

kable(resumo_modalidade, 
      caption = "üí∞ Resumo de Restos a Pagar por Tipo de Modalidade",
      col.names = c("Tipo de Modalidade", "Total (R$)", "Percentual (%)", "Total Formatado"),
      format = "html") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
  row_spec(0, bold = TRUE, background = "#f8f9fa")
```

### Top 10 √ìrg√£os com Maiores Valores

```{r top_10_orgaos_anexo_07}
#| echo: true
#| eval: true

top_10_orgaos <- dados_rp_anexo_07 %>%
  group_by(orgao_uge_orgao_maximo_codigo, orgao_uge_orgao_maximo_nome) %>%
  summarise(
    total_saldo = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(total_saldo)) %>%
  head(10) %>%
  mutate(
    posicao = row_number(),
    total_saldo_formatado = formatar_numero(total_saldo)
  )

kable(top_10_orgaos, 
      caption = "üèÜ Top 10 √ìrg√£os com Maiores Valores de Restos a Pagar",
      col.names = c("C√≥digo", "Nome do √ìrg√£o", "Total (R$)", "Posi√ß√£o", "Total Formatado"),
      format = "html") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
  row_spec(0, bold = TRUE, background = "#f8f9fa") %>%
  column_spec(4, bold = TRUE, color = "white", background = "#007bff")
```

## üìà Indicadores-Chave Anexo 07

```{r indicadores_anexo_07}
#| echo: false

# Calcular indicadores principais
total_geral <- sum(dados_rp_anexo_07$saldo_r_item_informacao, na.rm = TRUE)
total_intra <- sum(dados_rp_anexo_07$saldo_r_item_informacao[dados_rp_anexo_07$tipo_modalidade == "intra"], na.rm = TRUE)
total_exceto_intra <- sum(dados_rp_anexo_07$saldo_r_item_informacao[dados_rp_anexo_07$tipo_modalidade == "exceto intra"], na.rm = TRUE)
qtd_orgaos <- length(unique(dados_rp_anexo_07$orgao_uge_orgao_maximo_codigo))

indicadores_principais <- data.frame(
  Indicador = c(
    "üí∞ Total Geral de Restos a Pagar",
    "üîÑ Total Intragovernamental", 
    "üèõÔ∏è Total Exceto Intragovernamental",
    "üìä Quantidade de √ìrg√£os",
    "üìÖ Per√≠odo de Refer√™ncia"
  ),
  Valor = c(
    formatar_numero(total_geral),
    formatar_numero(total_intra),
    formatar_numero(total_exceto_intra),
    as.character(qtd_orgaos),
    mes_filtro
  )
)

kable(indicadores_principais, 
      caption = "üéØ Indicadores-Chave do Anexo 07",
      format = "html") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
  row_spec(0, bold = TRUE, background = "#f8f9fa") %>%
  column_spec(1, bold = TRUE, color = "#007bff")
```

# üìö RREO Anexo 08 - MDE {#sec-anexo-08}

## üìù Descri√ß√£o

Este anexo apresenta as **Receitas e Despesas com Manuten√ß√£o e Desenvolvimento do Ensino (MDE)**, incluindo:

-   üìä **Classifica√ß√£o por categoria** conforme crit√©rios espec√≠ficos
-   üí∞ **C√°lculo da RLI** (Receita L√≠quida de Impostos)
-   üéØ **Percentual de aplica√ß√£o** em MDE
-   üìã **An√°lise de transfer√™ncias constitucionais**

## üéØ Defini√ß√£o dos Crit√©rios

### Crit√©rios de Educa√ß√£o

```{r criterios_educacao}
#| echo: true

# Definir a lista de crit√©rios para classifica√ß√£o das despesas MDE
criterios_educacao <- list(
  `01 - COMPLEMENTA√á√ÉO DA UNI√ÉO AO FUNDEB` = list(
    criterio = "acao_governo_codigo %in% c('00SB', '0E36')"
  ),
  `03 - EDUCA√á√ÉO B√ÅSICA` = list(
    criterio = "fonte_recursos_codigo %notin% c('008', '035', '133', '134', '213', '242') & iduso_codigo == 8 & elemento_despesa_codigo %notin% c('01', '03', '59') & subfuncao_governo_codigo == '368'"
  ),
  `04 - ENSINO SUPERIOR` = list(
    criterio = "fonte_recursos_codigo %notin% c(157, 175, 193, 109, 134, 181) & iduso_codigo == 8 & elemento_despesa_codigo %notin% c('01', '03', '59') & subfuncao_governo_codigo %in% c('364')"
  ),
  `05 - ENSINO PROFISSIONAL N√ÉO INTEGRADO AO ENSINO REGULAR` = list(
    criterio = "fonte_recursos_codigo %notin% c('008', '035', '133', '134') & iduso_codigo == 8 & elemento_despesa_codigo %notin% c('01', '03', '59') & subfuncao_governo_codigo == '363'"
  ),
  `06 - OUTRAS` = list(
    criterio = "fonte_recursos_codigo %notin% c('008', '035', '133', '134') & iduso_codigo == 8 & elemento_despesa_codigo %notin% c('01', '03', '59') & !subfuncao_governo_codigo %in% c('363', '364', '368') & acao_governo_codigo %notin% c('00SB', '0E36')"
  ),
  `08 - COMPLEMENTA√á√ÉO DA UNI√ÉO - VAAT` = list(
    criterio = "acao_governo_codigo %in% c('00SB', '0E36') & fonte_recursos_codigo %notin% c('133', '134', '213', '008', '035', '212') & plano_orcamentario_codigo_po == '0001'"
  ),
  `09 - COMPLEMENTA√á√ÉO DA UNI√ÉO - VAAT` = list(
    criterio = "acao_governo_codigo %in% c('00SB', '0E36') & fonte_recursos_codigo %notin% c('133', '134', '213', '008', '035', '212') & plano_orcamentario_codigo_po %in% c('0002')"
  ),
  `09b - VAAT po 26298 12 847 5111 00SB 0003` = list(
    criterio = "fonte_recursos_codigo %notin% c('008') & plano_orcamentario_codigo_po %in% c('0003') & funcao_governo_codigo == '12' & subfuncao_governo_codigo == '847' & programa_governo_codigo == 5111 & acao_governo_codigo == '00SB' & unidade_orcamentaria_codigo == '26298'"
  ),
  `11 - DESPESAS CUSTEADAS COM A CONTRIBUI√á√ÉO SOCIAL DO SAL√ÅRIO-EDUCA√á√ÉO` = list(
    criterio = "fonte_recursos_codigo %in% c('133', '134', '213', '008', '035', '212') & iduso_codigo == 8 & acao_governo_codigo %notin% c('00SB', '0E36')"
  ),
  `12 - DESPESAS COM O FUNDO CONSTITUCIONAL DO DISTRITO FEDERAL - FCDF` = list(
    criterio = "acao_governo_codigo %in% c('0312') & fonte_recursos_codigo %notin% c('133', '134', '213', '008', '035', '212')"
  ),
  `13 - DESPESAS CUSTEADAS COM RECEITAS DE ROYALTIES DE EXPLORA√á√ÉO DO PR√â-SAL` = list(
    criterio = "fonte_recursos_codigo %in% c('242') & iduso_codigo == 8 & elemento_despesa_codigo %in% c('01', '03', '59')"
  ),
  `14 - DEMAIS DESPESAS COM EDUCA√á√ÉO` = list(
    criterio = "iduso_codigo == 8 & fonte_recursos_codigo %in% c('008', '035', '133', '134', '213', '050', '000') & elemento_despesa_codigo %in% c('01', '03', '59') & acao_governo_codigo %notin% c('00SB', '0312', '0E36')"
  )
)

print("‚úÖ Crit√©rios de educa√ß√£o definidos:")
print(names(criterios_educacao))
```

## üìä Processamento dos Dados

### Valida√ß√£o dos Dados

```{r validacao_anexo_08}
#| echo: true

# Verificar se os dados existem
datasets_necessarios <- c("dados_despesa", "dados_receita", "dados_rp_anexo_08")

for(dataset in datasets_necessarios) {
  if (!exists(dataset)) {
    stop(paste("‚ùå", dataset, "n√£o encontrado. Execute a se√ß√£o de importa√ß√£o primeiro."))
  }
}

print("‚úÖ Todos os datasets necess√°rios est√£o dispon√≠veis")
print(paste("‚úÖ dados_despesa:", nrow(dados_despesa), "registros"))
print(paste("‚úÖ dados_receita:", nrow(dados_receita), "registros")) 
print(paste("‚úÖ dados_rp_anexo_08:", nrow(dados_rp_anexo_08), "registros"))
```

### Aplicar Crit√©rios de Educa√ß√£o

```{r aplicar_criterios_anexo_08}
#| echo: true
#| eval: true

# Gerar dados classificados usando a fun√ß√£o de agrupamento
codigo_anexo08 <- paste0(mes_filtro, "REO", "A08", "despesa")

print(paste("üîç C√≥digo gerado:", codigo_anexo08))
print(paste("üìä Dados de entrada:", nrow(dados_despesa), "registros"))

anexo_08 <- agrupar_e_combinar_dados(
  dados_despesa, 
  criterios_educacao, 
  codigo_anexo08
)

print(paste("‚úÖ Dados do Anexo 08 processados:", nrow(anexo_08), "registros"))

print("‚úÖ Categorias criadas:")
print(unique(anexo_08$categoria))
```

## üìà Tabela Principal - Despesas por Categoria MDE

```{r tabela_principal_anexo_08}
#| echo: true
#| eval: true

# Definir agrupamento por categoria
agrupamento_mde <- c("categoria")

# Criar tabela principal com fun√ß√£o robusta
if (nrow(anexo_08) > 0) {
  # Fun√ß√£o pivotagem espec√≠fica para MDE
  tabela_mde <- anexo_08 %>%
    # Garantir que temos apenas dados num√©ricos para saldo
    filter(!is.na(saldo_r_item_informacao)) %>%
    # Agrupar por categoria
    group_by(categoria, item_informacao_nome) %>%
    # Sumarizar valores
    summarise(
      total = sum(saldo_r_item_informacao, na.rm = TRUE),
      .groups = "drop"
    ) %>%
    # Pivotar para formato de tabela
    pivot_wider(
      names_from = item_informacao_nome,
      values_from = total,
      values_fill = 0
    )
  
  # Exibir tabela formatada
  dt_formatada(tabela_mde, agrupamento_mde)
  
} else {
  print("‚ùå Nenhum dado encontrado no anexo_08")
  
  # Tabela vazia para exibi√ß√£o
  tabela_vazia <- data.frame(
    categoria = "Nenhum dado encontrado",
    observacao = "Verificar crit√©rios e dados de entrada"
  )
  
  kable(tabela_vazia, 
        caption = "‚ö†Ô∏è Tabela MDE - Sem Dados",
        format = "html") %>%
    kable_styling(bootstrap_options = c("striped", "hover"))
}
```

## üí∞ C√°lculo da Receita L√≠quida de Impostos (RLI)

### Receitas Base para RLI

```{r receitas_rli}
#| echo: true
#| eval: true

# Receitas que comp√µem a base da RLI (impostos)
receitas_base_rli <- dados_receita %>% 
  filter(
    item_informacao_codigo == "5",
    startsWith(natureza_receita_codigo_completo, '711') | 
    startsWith(natureza_receita_codigo_completo, "111")
  ) %>% 
  group_by(mes_lancamento) %>% 
  summarise(
    receita = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  )

kable(receitas_base_rli, 
      caption = "üí∞ Receitas Base para RLI por M√™s",
      col.names = c("M√™s", "Receita (R$)"),
      format = "html") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
```

### Transfer√™ncias Constitucionais

```{r transferencias_anexo_08}
#| echo: true
#| eval: true

# Classificar transfer√™ncias constitucionais
rli_transf <- dados_despesa %>% 
  filter(item_informacao_codigo == "56") %>% 
  mutate(
    transferencia = case_when(
      acao_governo_codigo == "0044" ~ "FPE",
      acao_governo_codigo == "0045" ~ "FPM", 
      acao_governo_codigo == "0046" ~ "IPI_repasse",
      acao_governo_codigo == "0C33" ~ "FUNDEB",
      acao_governo_codigo == "00H6" ~ "IOF_repasse",
      acao_governo_codigo == "006M" ~ "ITR_repasse",
      .default = "demais"
    )
  ) %>% 
  group_by(transferencia, mes_lancamento) %>%  
  summarise(
    valor_transferencia = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  )

# Mostrar transfer√™ncias por tipo
transferencias_resumo <- rli_transf %>%
  group_by(transferencia) %>%
  summarise(
    total = sum(valor_transferencia, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(total)) %>%
  mutate(total_formatado = formatar_numero(total))

# Exibir com DT::datatable
DT::datatable(
  transferencias_resumo,
  colnames = c("Tipo de Transfer√™ncia", "Total (R$)", "Total Formatado"),
  caption = "üîÑ Transfer√™ncias Constitucionais por Tipo",
  rownames = FALSE,
  options = list(
    pageLength = 10,
    dom = 'ft',
    columnDefs = list(
      list(className = 'dt-left', targets = 0),      # Tipo √† esquerda
      list(className = 'dt-right', targets = c(1,2)) # Valores √† direita
    ),
    language = list(
      url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese.json'
    )
  )
) %>%
  DT::formatStyle(
    columns = "transferencia",
    fontWeight = 'bold'
  ) %>%
  DT::formatStyle(
    columns = c("total", "total_formatado"),
    textAlign = 'right'
  )
```

### C√°lculo da RLI Mensal

```{r rli_mensal}
#| echo: true
#| eval: true

# Consolidar transfer√™ncias (exceto "demais")
transferencias_consolidadas <- rli_transf %>% 
  filter(transferencia != "demais") %>% 
  group_by(mes_lancamento) %>% 
  summarise(
    transferencia_total = sum(valor_transferencia, na.rm = TRUE),
    .groups = "drop"
  )

# Calcular RLI mensal
rli_mensal <- full_join(
  receitas_base_rli, 
  transferencias_consolidadas, 
  by = "mes_lancamento"
) %>%
  mutate(
    transferencia_total = ifelse(is.na(transferencia_total), 0, transferencia_total),
    receita = ifelse(is.na(receita), 0, receita),
    rli = (receita - transferencia_total) * 0.18
  ) %>%
  # Ordenar por m√™s corretamente
  mutate(
    mes_ordenacao = case_when(
      str_detect(mes_lancamento, "JAN") ~ 1,
      str_detect(mes_lancamento, "FEV") ~ 2,
      str_detect(mes_lancamento, "MAR") ~ 3,
      str_detect(mes_lancamento, "ABR") ~ 4,
      str_detect(mes_lancamento, "MAI") ~ 5,
      str_detect(mes_lancamento, "JUN") ~ 6,
      str_detect(mes_lancamento, "JUL") ~ 7,
      str_detect(mes_lancamento, "AGO") ~ 8,
      str_detect(mes_lancamento, "SET") ~ 9,
      str_detect(mes_lancamento, "OUT") ~ 10,
      str_detect(mes_lancamento, "NOV") ~ 11,
      str_detect(mes_lancamento, "DEZ") ~ 12,
      TRUE ~ 99
    )
  ) %>%
  arrange(mes_ordenacao) %>%
  select(-mes_ordenacao) %>%
  mutate(
    receita_formatada = formatar_numero(receita),
    transferencia_formatada = formatar_numero(transferencia_total),
    rli_formatado = formatar_numero(rli)
  )

# Exibir com DT::datatable
DT::datatable(
  rli_mensal %>% 
    select(mes_lancamento, receita_formatada, transferencia_formatada, rli_formatado),
  colnames = c("M√™s", "Receita Base", "Transfer√™ncias", "RLI (18%)"),
  caption = "üìä Receita L√≠quida de Impostos (RLI) Mensal",
  rownames = FALSE,
  options = list(
    pageLength = 15,
    dom = 'ft',
    columnDefs = list(
      list(className = 'dt-left', targets = "_all")  # Alinhar tudo √† esquerda
    ),
    language = list(
      url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese.json'
    )
  )
) %>%
  DT::formatStyle(
    columns = c("receita_formatada", "transferencia_formatada", "rli_formatado"),
    textAlign = 'right'  # N√∫meros √† direita
  ) %>%
  DT::formatStyle(
    columns = "mes_lancamento",
    textAlign = 'left',   # M√™s √† esquerda
    fontWeight = 'bold'
  )
```

## üéØ Aplica√ß√£o M√≠nima em MDE

### RLI do Per√≠odo de Refer√™ncia

```{r rli_periodo}
#| echo: true
#| eval: true

# RLI espec√≠fica do m√™s de refer√™ncia
rli_maio <- rli_mensal %>% 
  filter(mes_lancamento == mes_filtro) %>% 
  summarise(minimo_mde = sum(rli, na.rm = TRUE)) %>%
  pull(minimo_mde)

print(paste("üìÖ RLI para", mes_filtro, ":", formatar_numero(rli_maio)))
```

### Despesas MDE do Per√≠odo

```{r despesas_mde}
#| echo: true
#| eval: true

# Despesas MDE das categorias principais (02, 03, 04, 05, 06)
despesa_mde <- anexo_08 %>% 
  filter(
    item_informacao_codigo == 25, 
    categoria %in% c(
      "03 - EDUCA√á√ÉO B√ÅSICA",
      "04 - ENSINO SUPERIOR", 
      "05 - ENSINO PROFISSIONAL N√ÉO INTEGRADO AO ENSINO REGULAR",
      "06 - OUTRAS"
    )
  ) %>% 
  summarise(saldo_mde = sum(saldo_r_item_informacao, na.rm = TRUE)) %>%
  pull(saldo_mde)

print(paste("üí∞ Despesas MDE principais:", formatar_numero(despesa_mde)))
```

### Complementa√ß√£o FUNDEB

```{r complementacao_fundeb}
#| echo: true
#| eval: true

# Complementa√ß√£o FUNDEB (30% da complementa√ß√£o da Uni√£o)
complementacao_fundeb <- dados_despesa %>% 
  filter(
    item_informacao_codigo == 25, 
    mes_lancamento == mes_filtro,
    fonte_recursos_codigo %in% c('000',  '014', '130'), 
    acao_governo_codigo %in% c('0E36', '00SB')
  ) %>% 
  summarise(comp_fundeb = sum(saldo_r_item_informacao, na.rm = TRUE) * 0.3) %>%
  pull(comp_fundeb)

print(paste("üéØ Complementa√ß√£o FUNDEB (30%):", formatar_numero(complementacao_fundeb)))
```

### Restos a Pagar MDE

```{r rp_mde}
#| echo: true
#| eval: true

# AJUSTADO: Agrupado por item de informa√ß√£o
despesa_mde_rp_detalhado <- dados_rp_anexo_08 %>%
  filter(
    mes_lancamento == mes_filtro,  
    !elemento_despesa_codigo %in% c('01', '03'),
    (
      (fonte_recursos_codigo %in% c('000', '012', '00', '12') & 
       (iduso_codigo == 8 | lei_calmon_s_n == 'SIM')) |
      (ne_c_cor_ano_emissao >= 2020 & 
       !fonte_recursos_codigo %in% c('133', '134', '213', '08', '13', '93') & 
       iduso_codigo == 8)
    )
  ) %>%
  group_by(item_informacao_codigo, item_informacao_nome) %>%
  summarise(
    valor = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(item_informacao_codigo)

# Total consolidado para c√°lculos
despesa_mde_rp <- sum(despesa_mde_rp_detalhado$valor, na.rm = TRUE)

print("üìã Restos a Pagar MDE por Item de Informa√ß√£o:")
print(despesa_mde_rp_detalhado)
print(paste("üìã Total RP MDE:", formatar_numero(despesa_mde_rp)))
```

## üìä C√°lculo do Percentual de Aplica√ß√£o

```{r percentual_aplicacao}
#| echo: true
#| eval: true

# C√°lculo do percentual total aplicado em MDE
total_despesas_mde <- despesa_mde + complementacao_fundeb 
percentual_aplicacao <- (total_despesas_mde / rli_maio) * 100

# Tabela resumo
resumo_aplicacao <- data.frame(
  Item = c(
    "üí∞ Despesas MDE Principais",
    "üéØ Complementa√ß√£o FUNDEB (30%)",
    "üìã Restos a Pagar MDE",
    "üìä Total Despesas MDE",
    "üìà RLI (Base de C√°lculo)",
    "üéØ Percentual Aplicado",
    "‚úÖ M√≠nimo Constitucional"
  ),
  Valor = c(
    formatar_numero(despesa_mde),
    formatar_numero(complementacao_fundeb),
    formatar_numero(despesa_mde_rp),
    formatar_numero(total_despesas_mde),
    formatar_numero(rli_maio),
    paste0(round(percentual_aplicacao, 2), "%"),
    "18,00%"
  ),
  Status = c(
    "‚úÖ Calculado",
    "‚úÖ Calculado", 
    "‚úÖ Calculado",
    "‚úÖ Consolidado",
    "‚úÖ Base",
    ifelse(percentual_aplicacao >= 18, "‚úÖ Atendido", "‚ùå N√£o Atendido"),
    "üìã Refer√™ncia"
  )
)

kable(resumo_aplicacao, 
      caption = "üéØ Resumo da Aplica√ß√£o em MDE",
      format = "html") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
  row_spec(0, bold = TRUE, background = "#f8f9fa") %>%
  row_spec(6, bold = TRUE, 
           background = ifelse(percentual_aplicacao >= 18, "#d4edda", "#f8d7da"),
           color = ifelse(percentual_aplicacao >= 18, "#155724", "#721c24"))
```

# üìã RREO Anexo 12 - Sa√∫de.

## üìã Introdu√ß√£o

O **Anexo 12 do RREO** apresenta o demonstrativo das receitas e despesas com a√ß√µes e servi√ßos p√∫blicos de sa√∫de do Governo Federal, conforme estabelecido pela Emenda Constitucional n¬∫ 29/2000 e regulamentado pela Lei Complementar n¬∫ 141/2012.

Este relat√≥rio consolida informa√ß√µes sobre: - **Despesas Computadas**: Aplica√ß√µes diretas e transfer√™ncias nas subfun√ß√µes espec√≠ficas de sa√∫de - **Despesas N√£o Computadas**: Despesas do Minist√©rio da Sa√∫de n√£o computadas para o limite constitucional - **An√°lise por Modalidade**: Separa√ß√£o entre aplica√ß√£o direta e transfer√™ncias - **Indicadores de Cumprimento**: Verifica√ß√£o do atendimento aos limites constitucionais

## üè• Processamento das Despesas com Sa√∫de

### 1. Despesas Computadas - Subfun√ß√µes Espec√≠ficas

```{r despesas-saude-especificas}
# Filtrar despesas das subfun√ß√µes espec√≠ficas de sa√∫de (301-306)
despesas_saude <- dados_despesa %>% 
  filter(
    mes_lancamento == mes_filtro, 
    iduso_codigo == 6, 
    item_informacao_codigo == 25, 
    subfuncao_governo_codigo %in% c(301, 302, 303, 304, 305, 306)
  ) %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome, 
    categoria_economica_despesa_codigo,
    categoria_economica_despesa_nome, 
    modalidade_aplicacao_codigo
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop")

# Classificar por tipo de aplica√ß√£o
despesas_saude <- despesas_saude %>% 
  mutate(
    transferencia = ifelse(
      modalidade_aplicacao_codigo %in% c('30', '31', '32', '35', '36', '40', '41', '42', '45', '46'), 
      "_transferencia", 
      "aplicacao_direta"
    )
  )

# Criar tabela consolidada INCLUINDO LINHAS COM ZERO
tabela_saude_especificas <- despesas_saude %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome,
    categoria_economica_despesa_codigo, 
    categoria_economica_despesa_nome, 
    transferencia
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop") %>%
  # MANTER TODAS AS LINHAS, incluindo as com valor zero
  filter(TRUE)  # N√£o filtrar valores zero

# Exibir tabela
DT::datatable(
  tabela_saude_especificas,
  caption = "Despesas com Sa√∫de - Subfun√ß√µes Espec√≠ficas (301-306) - Incluindo Valores Zero",
  options = list(
    pageLength = 20,  # Aumentar para mostrar mais linhas
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  )
) %>%
  DT::formatRound("saldo_r_item_informacao", 2, mark = ".", dec.mark = ",")

# Calcular total das subfun√ß√µes espec√≠ficas
total_subfuncoes_especificas <- sum(despesas_saude$saldo_r_item_informacao)
cat("\nüí∞ **Total das Subfun√ß√µes Espec√≠ficas de Sa√∫de:** R$", 
    format(total_subfuncoes_especificas, big.mark = ".", decimal.mark = ","), "\n")
```

### 2. Despesas em Outras Subfun√ß√µes (Demais)

```{r despesas-saude-demais}
# Calcular despesas em outras subfun√ß√µes
despesas_saude_demais <- as.numeric(
  dados_despesa %>% 
  filter(
    mes_lancamento == mes_filtro, 
    iduso_codigo == 6, 
    item_informacao_codigo == 25, 
    subfuncao_governo_codigo %notin% c(301, 302, 303, 304, 305, 306)
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao))
)

cat("üí∞ **Total das Demais Subfun√ß√µes de Sa√∫de:** R$", 
    format(despesas_saude_demais, big.mark = ".", decimal.mark = ","), "\n")

# Total geral das despesas computadas
total_despesas_computadas <- total_subfuncoes_especificas + despesas_saude_demais
cat("üí∞ **Total Geral das Despesas Computadas:** R$", 
    format(total_despesas_computadas, big.mark = ".", decimal.mark = ","), "\n\n")
```

### 3. An√°lise Consolidada de Todas as Despesas

```{r despesas-saude-consolidada}
# Processar todas as despesas de sa√∫de com agrupamento
despesas_saude_completa <- dados_despesa %>% 
  filter(
    mes_lancamento == mes_filtro, 
    iduso_codigo == 6, 
    item_informacao_codigo == 25
  ) %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome, 
    categoria_economica_despesa_codigo,
    categoria_economica_despesa_nome, 
    modalidade_aplicacao_codigo
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop")

# Reclassificar subfun√ß√µes e modalidades
despesas_saude_completa <- despesas_saude_completa %>% 
  mutate(
    subfuncao_governo_codigo = case_when(
      subfuncao_governo_codigo %in% c(301, 302, 303, 304, 305, 306) ~ as.character(subfuncao_governo_codigo),
      TRUE ~ "demais"
    ),
    subfuncao_governo_nome = case_when(
      subfuncao_governo_codigo %in% c("301", "302", "303", "304", "305", "306") ~ subfuncao_governo_nome,
      TRUE ~ "demais"
    ),
    transferencia = ifelse(
      modalidade_aplicacao_codigo %in% c('30', '31', '32', '35', '36', '40', '41', '42', '45', '46'), 
      "_transferencia", 
      "aplicacao_direta"
    )
  )

# Criar tabela consolidada final INCLUINDO VALORES ZERO
tabela_consolidada <- despesas_saude_completa %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome,
    categoria_economica_despesa_codigo, 
    categoria_economica_despesa_nome, 
    transferencia
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop") %>%
  # MANTER TODAS AS LINHAS, incluindo as com valor zero
  arrange(subfuncao_governo_codigo, categoria_economica_despesa_codigo, transferencia)

# Exibir tabela consolidada
DT::datatable(
  tabela_consolidada,
  caption = "Despesas com Sa√∫de - An√°lise Consolidada (Incluindo Valores Zero)",
  options = list(
    pageLength = 25,  # Aumentar para mostrar mais linhas
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  )
) %>%
  DT::formatRound("saldo_r_item_informacao", 2, mark = ".", dec.mark = ",")

# Total consolidado em milhares
total_consolidado <- sum(despesas_saude_completa$saldo_r_item_informacao) / 1000
cat("\nüí∞ **Total Consolidado das Despesas com Sa√∫de:** R$", 
    format(total_consolidado, big.mark = ".", decimal.mark = ","), "mil\n")
```

## üö´ Despesas N√£o Computadas

### Despesas do Minist√©rio da Sa√∫de N√£o Computadas

```{r despesas-nao-computadas}
# Filtrar despesas n√£o computadas do Minist√©rio da Sa√∫de
despesa_saude_nao_computadas <- dados_despesa %>% 
  filter(
    mes_lancamento == mes_filtro, 
    iduso_codigo != 6, 
    item_informacao_codigo == 25,
    uo_orgao_superior_codigo == "36000", 
    unidade_orcamentaria_codigo != "74202"
  ) %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome, 
    categoria_economica_despesa_codigo,
    categoria_economica_despesa_nome, 
    modalidade_aplicacao_codigo
  ) %>%  
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop")

# Reclassificar para an√°lise
despesa_saude_nao_computadas <- despesa_saude_nao_computadas %>% 
  mutate(
    subfuncao_governo_codigo = case_when(
      subfuncao_governo_codigo %in% c(301, 302, 303, 304, 305, 306) ~ as.character(subfuncao_governo_codigo),
      TRUE ~ "demais"
    ),
    subfuncao_governo_nome = case_when(
      subfuncao_governo_codigo %in% c("301", "302", "303", "304", "305", "306") ~ subfuncao_governo_nome,
      TRUE ~ "demais"
    ),
    transferencia = ifelse(
      modalidade_aplicacao_codigo %in% c('30', '31', '32', '35', '36', '40', '41', '42', '45', '46'), 
      "_transferencia", 
      "aplicacao_direta"
    )
  )

# Tabela das despesas n√£o computadas INCLUINDO VALORES ZERO
tabela_nao_computadas <- despesa_saude_nao_computadas %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome,
    categoria_economica_despesa_codigo, 
    categoria_economica_despesa_nome, 
    transferencia
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop") %>%
  # MANTER TODAS AS LINHAS, incluindo as com valor zero
  arrange(subfuncao_governo_codigo, categoria_economica_despesa_codigo, transferencia)

# Exibir tabela
DT::datatable(
  tabela_nao_computadas,
  caption = "Despesas do Minist√©rio da Sa√∫de N√ÉO Computadas para o Limite (Incluindo Valores Zero)",
  options = list(
    pageLength = 20,  # Aumentar para mostrar mais linhas
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  )
) %>%
  DT::formatRound("saldo_r_item_informacao", 2, mark = ".", dec.mark = ",")
```

## ‚úÖ Valida√ß√£o dos Resultados

### Compara√ß√£o com Dados Oficiais

```{r validacao-resultados}
# Validar totais por subfun√ß√£o espec√≠fica
validacao_subfuncoes <- despesas_saude_completa %>%
  filter(subfuncao_governo_codigo %in% c("301", "302", "303", "304", "305", "306")) %>%
  group_by(subfuncao_governo_codigo, subfuncao_governo_nome) %>%
  summarise(
    nosso_total = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    # Dados oficiais para compara√ß√£o (valores em milhares, multiplicando por 1000)
    oficial_total = case_when(
      subfuncao_governo_codigo == "301" ~ 22060304 * 1000,
      subfuncao_governo_codigo == "302" ~ 38151320 * 1000,
      subfuncao_governo_codigo == "303" ~ 8449894 * 1000,
      subfuncao_governo_codigo == "304" ~ 38550 * 1000,
      subfuncao_governo_codigo == "305" ~ 5020346 * 1000,
      subfuncao_governo_codigo == "306" ~ 196 * 1000,
      TRUE ~ 0
    ),
    diferenca = nosso_total - oficial_total,
    status = ifelse(abs(diferenca) < 1, "‚úÖ MATCH", "‚ùå DIVERG√äNCIA")
  )

# Exibir tabela de valida√ß√£o
DT::datatable(
  validacao_subfuncoes,
  caption = "Valida√ß√£o: Nossos Resultados vs Dados Oficiais",
  options = list(
    pageLength = 10,
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  )
) %>%
  DT::formatRound(c("nosso_total", "oficial_total", "diferenca"), 0, mark = ".", dec.mark = ",")

# Calcular total das subfun√ß√µes espec√≠ficas
total_subfuncoes_validacao <- sum(validacao_subfuncoes$nosso_total)
total_oficial_subfuncoes <- 84798771 * 1000  # Total oficial em milhares, convertendo para reais

cat("\nüéØ **Resumo da Valida√ß√£o:**\n")
cat("- Total Subfun√ß√µes Espec√≠ficas (Nosso):", format(total_subfuncoes_validacao, big.mark = "."), "\n")
cat("- Total Oficial (todas as despesas):", format(total_oficial_subfuncoes, big.mark = "."), "\n")
cat("- Outras Subfun√ß√µes (Oficial):", format(11078161 * 1000, big.mark = "."), "\n")
```

## üìä Resumo Executivo e Indicadores

### Totais Consolidados

```{r resumo-executivo}
# Calcular totais principais
total_computadas <- sum(despesas_saude_completa$saldo_r_item_informacao, na.rm = TRUE)
total_nao_computadas <- sum(despesa_saude_nao_computadas$saldo_r_item_informacao, na.rm = TRUE)
total_geral_saude <- total_computadas + total_nao_computadas

# Criar tabela resumo
resumo_saude <- data.frame(
  Categoria = c(
    "Despesas Computadas para o Limite",
    "Despesas N√ÉO Computadas",
    "Total Geral das Despesas com Sa√∫de"
  ),
  `Valor (R$)` = c(
    total_computadas,
    total_nao_computadas,
    total_geral_saude
  ),
  `Valor (R$ Milh√µes)` = c(
    total_computadas / 1000000,
    total_nao_computadas / 1000000,
    total_geral_saude / 1000000
  ),
  `Percentual` = c(
    (total_computadas / total_geral_saude) * 100,
    (total_nao_computadas / total_geral_saude) * 100,
    100
  )
)

# Exibir tabela resumo
knitr::kable(
  resumo_saude,
  caption = "**Resumo Executivo - Despesas com Sa√∫de**",
  format.args = list(big.mark = ".", decimal.mark = ",", digits = 2),
  align = c("l", "r", "r", "r")
) %>%
  kableExtra::kable_styling(
    bootstrap_options = c("striped", "hover", "condensed"),
    full_width = FALSE
  ) %>%
  kableExtra::row_spec(3, bold = TRUE, background = "#e8f5e8")
```

### Indicadores Principais

```{r indicadores-saude}
# Calcular indicadores
percentual_computadas <- (total_computadas / total_geral_saude) * 100
percentual_nao_computadas <- (total_nao_computadas / total_geral_saude) * 100

cat("### üéØ Indicadores Principais\n\n")
cat("üíö **Despesas Computadas para o Limite:** ", 
    format(round(percentual_computadas, 2), decimal.mark = ","), "%\n\n")
cat("‚ùå **Despesas N√ÉO Computadas:** ", 
    format(round(percentual_nao_computadas, 2), decimal.mark = ","), "%\n\n")
cat("üí∞ **Total de Despesas Computadas:** R$ ", 
    format(round(total_computadas / 1000000, 2), big.mark = ".", decimal.mark = ","), 
    " milh√µes\n\n")
cat("üìä **Total Geral com Sa√∫de:** R$ ", 
    format(round(total_geral_saude / 1000000, 2), big.mark = ".", decimal.mark = ","), 
    " milh√µes\n\n")
```

## üìà Visualiza√ß√µes

### Gr√°fico Comparativo: Computadas vs N√£o Computadas

```{r grafico-comparativo}
# Preparar dados para o gr√°fico
dados_grafico <- data.frame(
  Categoria = c("Despesas Computadas", "Despesas N√ÉO Computadas"),
  Valor = c(
    total_computadas / 1000000,
    total_nao_computadas / 1000000
  ),
  Tipo = c("Computadas", "N√£o Computadas")
)

# Criar gr√°fico
library(ggplot2)
ggplot(dados_grafico, aes(x = Categoria, y = Valor, fill = Tipo)) +
  geom_col(alpha = 0.8) +
  geom_text(aes(label = paste0("R$ ", format(round(Valor, 1), big.mark = ".", decimal.mark = ","))), 
            vjust = -0.5, 
            size = 4) +
  scale_fill_manual(values = c("Computadas" = "#228B22", "N√£o Computadas" = "#DC143C")) +
  labs(
    title = "Despesas com Sa√∫de - Computadas vs N√£o Computadas",
    subtitle = paste0("M√™s de Refer√™ncia: ", mes_filtro),
    x = "Categoria",
    y = "Valor (R$ Milh√µes)",
    fill = "Tipo",
    caption = "Fonte: Tesouro Gerencial"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.text.x = element_text(size = 11),
    legend.position = "bottom"
  )
```

### Distribui√ß√£o por Subfun√ß√£o de Governo

```{r grafico-subfuncoes-saude}
# Preparar dados das despesas por subfun√ß√£o (apenas computadas)
despesas_por_subfuncao <- tabela_consolidada %>%
  filter(subfuncao_governo_codigo != "demais") %>%
  group_by(subfuncao_governo_nome) %>%
  summarise(
    valor_total = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(valor_total)) %>%
  mutate(
    valor_milhoes = valor_total / 1000000,
    percentual = (valor_total / sum(valor_total)) * 100
  )

# Criar gr√°fico de barras
ggplot(despesas_por_subfuncao, aes(x = reorder(subfuncao_governo_nome, valor_milhoes), y = valor_milhoes)) +
  geom_col(fill = "#4682B4", alpha = 0.8) +
  geom_text(aes(label = paste0("R$ ", format(round(valor_milhoes, 1), big.mark = ".", decimal.mark = ","))), 
            hjust = -0.1, size = 3.5) +
  coord_flip() +
  labs(
    title = "Despesas com Sa√∫de por Subfun√ß√£o de Governo",
    subtitle = "Subfun√ß√µes Espec√≠ficas de Sa√∫de (301-306)",
    x = "Subfun√ß√£o",
    y = "Valor (R$ Milh√µes)",
    caption = "Fonte: Tesouro Gerencial"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.text.y = element_text(size = 10)
  )
```

### An√°lise por Tipo de Aplica√ß√£o

```{r grafico-modalidade-aplicacao}
# Preparar dados por modalidade de aplica√ß√£o
despesas_por_modalidade <- tabela_consolidada %>%
  group_by(transferencia) %>%
  summarise(
    valor_total = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    valor_milhoes = valor_total / 1000000,
    percentual = (valor_total / sum(valor_total)) * 100,
    tipo_limpo = case_when(
      transferencia == "aplicacao_direta" ~ "Aplica√ß√£o Direta",
      transferencia == "_transferencia" ~ "Transfer√™ncias",
      TRUE ~ transferencia
    )
  )

# Criar gr√°fico de pizza
library(plotly)
plot_ly(
  despesas_por_modalidade,
  labels = ~tipo_limpo,
  values = ~valor_milhoes,
  type = 'pie',
  textposition = 'inside',
  textinfo = 'label+percent',
  hovertemplate = paste(
    '<b>%{label}</b><br>',
    'Valor: R$ %{value:.1f} milh√µes<br>',
    'Percentual: %{percent}<br>',
    '<extra></extra>'
  )
) %>%
  layout(
    title = list(
      text = "Distribui√ß√£o das Despesas com Sa√∫de por Modalidade de Aplica√ß√£o",
      font = list(size = 16)
    ),
    showlegend = TRUE,
    legend = list(
      orientation = "v",
      x = 1.02,
      y = 0.5
    )
  )
```

## üìã Considera√ß√µes Metodol√≥gicas

### Crit√©rios de Classifica√ß√£o

```{r metodologia-saude}
cat("### üîç Metodologia Aplicada\n\n")
cat("**Despesas Computadas para o Limite Constitucional:**\n")
cat("- ID de USO: Sa√∫de (6)\n")
cat("- Item de Informa√ß√£o: Pago (25)\n")
cat("- Subfun√ß√µes Espec√≠ficas: 301, 302, 303, 304, 305, 306\n")
cat("- Base Legal: LC n¬∫ 141/2012\n\n")

cat("**Despesas N√ÉO Computadas:**\n")
cat("- ID de USO: Diferente de Sa√∫de (‚â† 6)\n")
cat("- √ìrg√£o Superior: Minist√©rio da Sa√∫de (36000)\n")
cat("- Exclus√£o: UO 74202 (conforme crit√©rios espec√≠ficos)\n")
cat("- Incluem: despesas administrativas, aposentadorias, etc.\n\n")

cat("**Modalidades de Aplica√ß√£o:**\n")
cat("  - **Aplica√ß√£o Direta:** 20, 22, 71, 72, 75, 76, 91, 93, 94, 95, 96, 97, 99\n")
cat("  - **Transfer√™ncias:** 30, 31, 32, 35, 36, 40, 41, 42, 45, 46\n\n")

cat("**Subfun√ß√µes Espec√≠ficas de Sa√∫de:**\n")
cat("- 301: Aten√ß√£o B√°sica\n")
cat("- 302: Assist√™ncia Hospitalar e Ambulatorial\n")
cat("- 303: Suporte Profil√°tico e Terap√™utico\n")
cat("- 304: Vigil√¢ncia Sanit√°ria\n")
cat("- 305: Vigil√¢ncia Epidemiol√≥gica\n")
cat("- 306: Alimenta√ß√£o e Nutri√ß√£o\n\n")

cat("**Per√≠odo de Refer√™ncia:**\n")
cat("- M√™s: ", mes_filtro, "\n")
cat("- Base de dados: Tesouro Gerencial (SIAFI)\n\n")
```

## üìÑ Observa√ß√µes Finais

```{r observacoes-saude}
cat("### ‚ö†Ô∏è Observa√ß√µes Importantes\n\n")
cat("1. **Limite Constitucional:** Uni√£o deve aplicar m√≠nimo de 15% da RCL em sa√∫de\n")
cat("2. **Periodicidade:** Relat√≥rio com periodicidade bimestral, conforme LRF\n")
cat("3. **Abrang√™ncia:** Dados consolidados do Governo Federal\n")
cat("4. **Legisla√ß√£o:** EC n¬∫ 29/2000, LC n¬∫ 141/2012, e demais normas aplic√°veis\n")
cat("5. **Metodologia:** Segue as normas da STN e crit√©rios do Minist√©rio da Sa√∫de\n\n")

# Informa√ß√µes t√©cnicas do processamento
cat("### üìä Informa√ß√µes T√©cnicas\n\n")
cat("- **Data de Processamento:** ", format(Sys.time(), "%d/%m/%Y %H:%M:%S"), "\n")
cat("- **Total de Registros Processados:** ", nrow(dados_despesa), "\n")
cat("- **Registros de Despesas Computadas:** ", nrow(despesas_saude_completa), "\n")
cat("- **Registros de Despesas N√ÉO Computadas:** ", nrow(despesa_saude_nao_computadas), "\n")
### An√°lise das "Demais" Subfun√ß√µes

# Analisar quais subfun√ß√µes est√£o sendo classificadas como "demais"
demais_subfuncoes_detalhado <- dados_despesa %>% 
  filter(
    mes_lancamento == mes_filtro, 
    iduso_codigo == 6, 
    item_informacao_codigo == 25,
    subfuncao_governo_codigo %notin% c(301, 302, 303, 304, 305, 306)
  ) %>%
  group_by(subfuncao_governo_codigo, subfuncao_governo_nome) %>%
  summarise(
    valor_total = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(valor_total)) %>%
  mutate(valor_milhares = valor_total / 1000)

# Exibir detalhamento das "demais" subfun√ß√µes
DT::datatable(
  demais_subfuncoes_detalhado,
  caption = "Detalhamento das 'Demais' Subfun√ß√µes de Sa√∫de",
  options = list(
    pageLength = 15,
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  )
) %>%
  DT::formatRound(c("valor_total", "valor_milhares"), 2, mark = ".", dec.mark = ",")

# Total das demais subfun√ß√µes
total_demais_detalhado <- sum(demais_subfuncoes_detalhado$valor_total)
cat("\nüí∞ **Total Detalhado das 'Demais' Subfun√ß√µes:** R$", 
    format(total_demais_detalhado, big.mark = ".", decimal.mark = ","), "\n")
cat("üí∞ **Valor Oficial 'Outras Subfun√ß√µes':** R$", 
    format(11078161 * 1000, big.mark = ".", decimal.mark = ","), "\n")
cat("üìä **Diferen√ßa:** R$", 
    format(total_demais_detalhado - (11078161 * 1000), big.mark = ".", decimal.mark = ","), "\n")
```

\`\`\`

------------------------------------------------------------------------

# üìù Observa√ß√µes Metodol√≥gicas {#sec-metodologia}

## Crit√©rios de Classifica√ß√£o

### RREO Anexo 07

-   **Intragovernamental**: Modalidade de Aplica√ß√£o = 91
-   **Exceto Intragovernamental**: Demais modalidades de aplica√ß√£o
-   **√ìrg√£o M√°ximo**: Maior n√≠vel hier√°rquico da estrutura organizacional

### RREO Anexo 08 - MDE

-   **MDE**: Despesas que se qualificam como Manuten√ß√£o e Desenvolvimento do Ensino
-   **RLI**: 18% das receitas de impostos l√≠quidas de transfer√™ncias constitucionais
-   **FUNDEB**: 30% da complementa√ß√£o da Uni√£o √© considerada para MDE

## Base Legal

-   **Art. 212 da CF/88**: M√≠nimo de 18% da RLI em MDE
-   **Lei n¬∫ 14.113/2020**: Novo FUNDEB
-   **Portaria STN**: Metodologia de c√°lculo

## Dados de Origem

-   **Fonte**: Sistema Tesouro Gerencial
-   **Per√≠odo**: `r mes_filtro`
-   **Registros Processados**:
-   Receita: `r nrow(dados_receita)`
-   Despesa: `r nrow(dados_despesa)`
-   RP Anexo 07: `r nrow(dados_rp_anexo_07)`
-   RP Anexo 08: `r nrow(dados_rp_anexo_08)`

------------------------------------------------------------------------

**üìÖ Gerado em**: `r Sys.time()`\
**üìä M√™s de refer√™ncia**: `r mes_filtro`\
**‚úÖ Status**: Relat√≥rios processados com sucesso!

## üìö Refer√™ncias

-   **Emenda Constitucional n¬∫ 29/2000** - Assegura recursos m√≠nimos para sa√∫de
-   **Lei Complementar n¬∫ 141/2012** - Regulamenta a EC 29/2000
-   **Lei Complementar n¬∫ 101/2000** - Lei de Responsabilidade Fiscal
-   **Manual de Demonstrativos Fiscais** - Secretaria do Tesouro Nacional
-   **Sistema Tesouro Gerencial** - Fonte dos dados utilizados

------------------------------------------------------------------------

*Documento gerado automaticamente pelo sistema de relat√≥rios fiscais baseado em dados do Tesouro Gerencial.*
