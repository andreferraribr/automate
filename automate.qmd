---
title: "üìä RREO & RGF - Relat√≥rios Fiscais"
subtitle: "Sistema Unificado de Relat√≥rios Fiscais do Governo Federal"
author: "Governo Federal"
date: today
execute:
  warning: false
  message: false
  cache: true
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    number-sections: true
    code-fold: true
    code-summary: "Mostrar c√≥digo"
    fig-width: 10
    fig-height: 6
---

# üìö Carregamento de Bibliotecas e Configura√ß√µes {#sec-setup}

```{r setup}
#| include: false

# Bibliotecas principais
library(dplyr)
library(tidyr)
library(stringr)
library(readxl)
library(janitor)
library(purrr)
library(forcats)
library(DT)
library(knitr)
library(kableExtra)
library(readr)
library(scales)
library(lubridate)

# Configura√ß√µes globais
options(OutDec = ".")
options(scipen = 999)

# Configura√ß√µes DT
options(DT.options = 
  list(
    pageLength = 20,
    lengthMenu = c(5, 10, 25, 50, 100),
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese.json')
  )
)

# Operadores customizados
`%notin%` <- Negate(`%in%`)
`%||%` <- function(x, y) if(is.null(x) || length(x) == 0 || is.na(x)) y else x

print("‚úÖ Bibliotecas carregadas com sucesso!")
```

## üîß Vari√°veis Globais

```{r variaveis_globais}
# Filtro principal do m√™s
mes_filtro <- "202508"

mes_pasta <- str_c("data/",mes_filtro,"/")

print(paste("üìÖ M√™s de refer√™ncia definido:", mes_filtro))
```

# üì• Importa√ß√£o dos Dados {#sec-dados}

## üßæ Dados de Receita

```{r dados_receita}
#| echo: true
#| eval: true

dados_receita <- read_excel(str_c(mes_pasta, "tg_receita.xlsx"), skip = 5) %>% 
  clean_names() %>% 
  filter(orgao_uge_orcam_fiscal_s_n == "PERTENCE") %>%
  mutate(
    # Convers√£o de data
    mes_lancamento = as.numeric(mes_lancamento),
    data_lancamento = ceiling_date(ymd(paste0(mes_lancamento, "01")), "month") - days(1),
    # Vari√°veis derivadas existentes
    tipo_modalidade = ifelse(
      nre1_categoria_economica_codigo %in% c(7, 8), 
      "intra", 
      "exceto intra"
    ),
    refinanciamento = ifelse(
      natureza_receita_codigo_completo %in% c(81110201, 21110201, 21210201), 
      "sim", 
      "nao"
    )
  )

print(paste("‚úÖ Dados de receita carregados:", nrow(dados_receita), "registros"))


```

## üí∞ Dados de Despesa

Criar vari√°veis:

tipo_modalidade

refinanciamento

transferencia

```{r dados_despesa}
#| echo: true
#| eval: true

# Buscar todos os arquivos de despesa
arq_despesa <- list.files(path = mes_pasta, pattern = 'tg_despesa', full.names = TRUE)
dados_despesa <- map_df(arq_despesa, ~ read_excel(.x, skip = 5, col_types = "text")) %>%
  clean_names() %>%
  filter(orgao_uge_orcam_fiscal_s_n == "PERTENCE") %>%
  mutate(
    # Converter colunas num√©ricas espec√≠ficas
    across(contains("saldo"), as.numeric),
    across(contains("valor"), as.numeric),
    mes_lancamento = as.numeric(mes_lancamento),
    # Convers√£o de data
    data_lancamento = ceiling_date(ymd(paste0(mes_lancamento, "01")), "month") - days(1),
    # Vari√°veis derivadas existentes
    tipo_modalidade = ifelse(
      modalidade_aplicacao_codigo == 91,
      "intra",
      "exceto intra"
    ),
    refinanciamento = case_when(
      grupo_despesa_codigo_grupo == 6 &
        elemento_despesa_codigo %in% c(76, 77) &
        subfuncao_governo_codigo %in% c(841, 842, 843, 844, 846) &
        fonte_recursos_codigo == "443" ~ "sim",
      !(grupo_despesa_codigo_grupo == 6 &
        elemento_despesa_codigo %in% c(76, 77) &
        subfuncao_governo_codigo %in% c(841, 842, 843, 844, 846) &
        fonte_recursos_codigo == "443") ~ "nao",
      TRUE ~ "escape"
    ),
    poder = case_when(
      orgao_uge_orgao_maximo_codigo %in% c(59000) ~ "MINIST√âRIO P√öBLICO DA UNI√ÉO",
      orgao_uge_orgao_maximo_codigo %in% c(29000) ~ "DEFENSORIA P√öBLICA",
      TRUE ~ orgao_uge_poder_nome
    ),
    transferencia = ifelse(
      modalidade_aplicacao_codigo %in% c('30', '31', '32', '35', '36', '40', '41', '42', '45', '46'), 
      "_transferencia", 
      "aplicacao_direta"
    )
  )


# RGF Anexo 1
rgf_a01 <- read_excel(str_c(mes_pasta, "rgf_a01.xlsx"), skip = 5) %>% 
  clean_names() %>%
  mutate(
    mes_lancamento = as.numeric(mes_lancamento),
    data_lancamento = ceiling_date(ymd(paste0(mes_lancamento, "01")), "month") - days(1)
  )
```

## üìã Dados de Restos a Pagar

```{r dados_rp}
#| echo: true
#| eval: true

# RP Anexo 07
dados_rp_anexo_07 <- read_excel(str_c(mes_pasta, "tg_rp_anexo_07.xlsx"), skip = 5) %>% 
  clean_names() %>%
  mutate(
    mes_lancamento = as.numeric(mes_lancamento),
    data_lancamento = ceiling_date(ymd(paste0(mes_lancamento, "01")), "month") - days(1),
    tipo_modalidade = ifelse(
      modalidade_aplicacao_codigo == 91, 
      "intra", 
      "exceto intra"
    ),
    poder = case_when(
      orgao_uge_orgao_maximo_codigo %in% c(59000) ~ "MINIST√âRIO P√öBLICO DA UNI√ÉO",
      orgao_uge_orgao_maximo_codigo %in% c(29000) ~ "DEFENSORIA P√öBLICA",
      TRUE ~ orgao_uge_poder_nome
    )
  )

# RP Anexo 12
dados_rp_anexo_12 <- read_excel(str_c(mes_pasta, "tg_rp_anexo_12.xlsx"), skip = 5) %>% 
  clean_names() %>%
  mutate(
    mes_lancamento = as.numeric(mes_lancamento),
    data_lancamento = ceiling_date(ymd(paste0(mes_lancamento, "01")), "month") - days(1)
  )

# RP Anexo 08
dados_rp_anexo_08 <- read_excel(str_c(mes_pasta, "tg_rp_anexo_08.xlsx"), skip = 5) %>% 
  clean_names() %>%
  mutate(
    mes_lancamento = as.numeric(mes_lancamento),
    data_lancamento = ceiling_date(ymd(paste0(mes_lancamento, "01")), "month") - days(1)
  )

# RP Anexo 03 RCL
dados_rp_anexo_03_rcl <- read_excel(str_c(mes_pasta, "tg_rp_anexo_03_rcl.xlsx"), skip = 5) %>% 
  clean_names() %>%
  mutate(
    mes_lancamento = as.numeric(mes_lancamento),
    data_lancamento = ceiling_date(ymd(paste0(mes_lancamento, "01")), "month") - days(1)
  )






print("‚úÖ Dados de Restos a Pagar carregados:")
print(paste("   - Anexo 07:", nrow(dados_rp_anexo_07), "registros"))
print(paste("   - Anexo 12:", nrow(dados_rp_anexo_12), "registros"))
print(paste("   - Anexo 08:", nrow(dados_rp_anexo_08), "registros"))
print(paste("   - Anexo 03 RCL:", nrow(dados_rp_anexo_03_rcl), "registros"))
```

## üè¶ Dados Cont√°beis e Espec√≠ficos

```{r dados_contabeis}
#| echo: true
#| eval: true


# Buscar todos os arquivos de despesa
arq_tabela_04 <- list.files(path = mes_pasta, pattern = 'tabela_04_p', full.names = TRUE)
dados_tabela_04 <- map_df(arq_tabela_04, ~ read_excel(.x, skip = 5, col_types = "text")) %>%
  clean_names()  %>%
  mutate(
    # Converter colunas num√©ricas espec√≠ficas do DCL 2a
    saldo_r_conta_contabil = as.numeric(saldo_r_conta_contabil),
    mes_lancamento = as.numeric(mes_lancamento),
    # Convers√£o de data
    data_lancamento = ceiling_date(ymd(paste0(mes_lancamento, "01")), "month") - days(1)
  )
# Dados filtro RREO - demais UGs
dados_tabela_04_filtro_rreo <- read_excel(str_c(mes_pasta, "tg_rreo_tabela_04_filtro_rreo.xlsx"), skip = 5) %>% 
  clean_names() %>% 
  mutate(
    ug = "demais",
    saldo_r_conta_contabil = as.numeric(saldo_r_conta_contabil),
    mes_lancamento = as.numeric(mes_lancamento),
    data_lancamento = ceiling_date(ymd(paste0(mes_lancamento, "01")), "month") - days(1)
  )

# Dados NDD (Natureza de Despesa Detalhada)
dados_ndd <- read_excel(str_c(mes_pasta, "tg_anexo_06_rreo_despesas_primarias_ndd.xlsx"), skip = 5) %>% 
  clean_names() %>%
  mutate(
    mes_lancamento = as.numeric(mes_lancamento),
    data_lancamento = ceiling_date(ymd(paste0(mes_lancamento, "01")), "month") - days(1)
  )

# Dados Categoria/Grupo
dados_categoria_grupo <- read_excel(str_c(mes_pasta, "tg_anexo_06_rreo_despesas_primarias_categoria_grupo.xlsx"), skip = 5) %>% 
  clean_names() %>%
  mutate(
    mes_lancamento = as.numeric(mes_lancamento),
    data_lancamento = ceiling_date(ymd(paste0(mes_lancamento, "01")), "month") - days(1)
  )

# RPN - Juros
tg_RPN_juros <- read_excel(str_c(mes_pasta, "tg_RPN_juros.xlsx"), skip = 5) %>% 
  clean_names() %>%
  mutate(
    mes_lancamento = as.numeric(mes_lancamento),
    data_lancamento = ceiling_date(ymd(paste0(mes_lancamento, "01")), "month") - days(1)
  )
dados_juros <- tg_RPN_juros

# RPN - Disponibilidades
tg_RPN_disponibilidades <- read_excel(paste0(mes_pasta, "tg_RPN_disponibilidades.xlsx"), skip = 5) %>% 
  clean_names() %>%
  mutate(
    mes_lancamento = as.numeric(mes_lancamento),
    data_lancamento = ceiling_date(ymd(paste0(mes_lancamento, "01")), "month") - days(1)
  )

# DCL 1
dcl_1 <- read_excel(str_c(mes_pasta, "dcl_1.xlsx"), skip = 5) %>% 
  clean_names() %>%
  mutate(
    mes_lancamento = as.numeric(mes_lancamento),
    data_lancamento = ceiling_date(ymd(paste0(mes_lancamento, "01")), "month") - days(1)
  )

# DCL 2a
arq_dcl_2a <- list.files(path = mes_pasta, pattern = 'dcl_2a', full.names = TRUE)
dcl_2a <- map_df(arq_dcl_2a, ~ read_excel(.x, skip = 5, col_types = "text")) %>%
  clean_names() %>%
  mutate(
    # Converter colunas num√©ricas espec√≠ficas do DCL 2a
    saldo_r_conta_contabil = as.numeric(saldo_r_conta_contabil),
    mes_lancamento = as.numeric(mes_lancamento),
    orgao_uge_tipo_administracao_codigo = as.numeric(orgao_uge_tipo_administracao_codigo),
    orgao_uge_codigo = as.numeric(orgao_uge_codigo),
    ug_executora_codigo = as.numeric(ug_executora_codigo),
    # Convers√£o de data
    data_lancamento = ceiling_date(ymd(paste0(mes_lancamento, "01")), "month") - days(1)
  )
# DCL 2b

arq_dcl_2b <- list.files(path = mes_pasta, pattern = 'dcl_2b', full.names = TRUE)
dcl_2b <- map_df(arq_dcl_2b, ~ read_excel(.x, skip = 5, col_types = "text")) %>%
  clean_names() %>%
  mutate(
    # Converter colunas num√©ricas espec√≠ficas do DCL 2b
    saldo_r_conta_contabil = as.numeric(saldo_r_conta_contabil),
    mes_lancamento = as.numeric(mes_lancamento),
    orgao_uge_tipo_administracao_codigo = as.numeric(orgao_uge_tipo_administracao_codigo),
    orgao_uge_codigo = as.numeric(orgao_uge_codigo),
    ug_executora_codigo = as.numeric(ug_executora_codigo),
    # Convers√£o de data
    data_lancamento = ceiling_date(ymd(paste0(mes_lancamento, "01")), "month") - days(1)
  )



```

# Fun√ß√µes {#sec-funcoes-aux}

## Formata√ß√£o de N√∫meros

```{r formatar_numero}
#| echo: true
#| eval: true

#' Formatar n√∫meros para exibi√ß√£o brasileira
#' @param x Vetor num√©rico a ser formatado
#' @return String formatada com ponto como separador de milhares e v√≠rgula como decimal
formatar_numero <- function(x) {
  format(x, big.mark = ".", decimal.mark = ",", scientific = FALSE, nsmall = 2)
}

# Teste da fun√ß√£o
exemplo_numero <- 1234567.89
print(paste("N√∫mero original:", exemplo_numero))
print(paste("N√∫mero formatado:", formatar_numero(exemplo_numero)))
```

## Formata√ß√£o de Tabelas

```{r dt_formatada}
#| echo: true
#| eval: true

#' Criar tabela DT formatada com totais
#' @param df Data frame a ser formatado
#' @param grupo Vetor com nomes das colunas de agrupamento (n√£o num√©ricas)
#' @return Objeto DT formatado
dt_formatada <- function(df, grupo) {
  # library(DT)
  # library(janitor)
  
  datatable(
    df %>% adorn_totals("row"), 
    rownames = FALSE,
    extensions = 'Buttons',
    options = list(
      lengthMenu = c(5, 10, 25, 50, 100),
      dom = 'Bfrtip',
      buttons = list('excel')
    )
  ) %>% 
  formatRound(
    setdiff(df %>% colnames(), grupo), 
    2, 
    mark = ".", 
    dec.mark = ","
  ) %>% 
  DT::formatStyle(
    columns = colnames(.$x$data), 
    fontSize = '75%'
  )
}

print("‚úÖ Fun√ß√£o dt_formatada definida")
```

## Tabela Pivotada

```{r tabela_pivotada}
#| echo: true
#| eval: true

#' Pivotar tabela a partir dos itens de informa√ß√£o
#' @param df Data frame com dados
#' @param grupo Vetor com nomes das colunas de agrupamento
#' @return Data frame pivotado e sumarizado
tabela_pivotada <- function(df, grupo) {
  # library(dplyr)
  # library(tidyr)
  
  # Obter itens √∫nicos de informa√ß√£o
  itens <- df$item_informacao_nome %>% unique() %>% na.omit()
  
  # Verificar se a coluna principal existe
  if (!"saldo_r_item_informacao" %in% names(df)) {
    stop("Coluna 'saldo_r_item_informacao' n√£o encontrada no data frame")
  }
  
  # Pivotar e sumarizar apenas a coluna num√©rica
  df %>% 
    group_by(!!!syms(grupo)) %>% 
    pivot_wider(
      names_from = item_informacao_nome, 
      values_from = saldo_r_item_informacao,
      values_fill = 0
    ) %>% 
    # Sumarizar apenas as colunas que correspondem aos itens (num√©ricas)
    summarise(
      across(all_of(itens), ~ sum(.x, na.rm = TRUE)),
      .groups = "drop"
    )
}


```

## Aplicar Crit√©rios

```{r aplicar_criterios}
aplicar_criterios <- function(df, criterios) {
  
  # Detectar automaticamente a m√©trica
  metrica <- names(df)[grepl("^(saldo|movim)", names(df), ignore.case = TRUE)][1]
  
  # Capturar o nome do dataframe passado como argumento
  df_completo <- paste(deparse(substitute(df)), collapse = " ")
  
  # Separar nome da df de eventuais filtros
  if (grepl("%>%", df_completo)) {
    # Se h√° pipe, extrair apenas o nome da df original
    df_nome <- trimws(strsplit(df_completo, "%>%")[[1]][1])
    df_filtros <- paste(strsplit(df_completo, "%>%")[[1]][-1], collapse = " %>% ")
    df_filtros <- trimws(df_filtros)
  } else {
    # Se n√£o h√° pipe, usar o nome completo
    df_nome <- df_completo
    df_filtros <- NA
  }
  
  # Capturar o nome da vari√°vel criterios passada como argumento
  criterios_nome <- deparse(substitute(criterios))
  
  # Verificar e criar colunas necess√°rias se n√£o existirem
  if (!"item_informacao_nome" %in% names(df)) {
    df$item_informacao_nome <- "nao_se_aplica"
  }
  
  if (!"item_informacao_codigo" %in% names(df)) {
    df$item_informacao_codigo <- "nao_se_aplica"
  }
  
  if (!"orgao_uge_tipo_administracao_nome" %in% names(df)) {
    df$orgao_uge_tipo_administracao_nome <- "nao_se_aplica"
  }
  
  if (!"orgao_uge_tipo_administracao_codigo" %in% names(df)) {
    df$orgao_uge_tipo_administracao_codigo <- "nao_se_aplica"
  }
  
  # Definir vari√°veis de agrupamento fixas
  group_vars <- c("mes_lancamento", "item_informacao_nome", "item_informacao_codigo", 
                  "orgao_uge_tipo_administracao_nome", "orgao_uge_tipo_administracao_codigo")
  
  # Desmembrar o nome da vari√°vel criterios usando "_" como separador
  partes <- strsplit(criterios_nome, "_")[[1]]
  
  # Remover "criterios" se estiver presente
  if (partes[1] == "criterios") {
    partes <- partes[-1]
  }
  
  relatorio <- if (length(partes) >= 1) partes[1] else NA
  anexo_codigo <- if (length(partes) >= 2) partes[2] else NA
  anexo_nome <- if (length(partes) >= 3) partes[3] else NA
  detalhe <- if (length(partes) >= 4) paste(partes[4:length(partes)], collapse = "_") else NA
  
  # Aplicar crit√©rios - apenas filtros normais
  resultado <- map_df(names(criterios), function(categoria) {
    crit <- criterios[[categoria]]
    
    # Pular f√≥rmulas matem√°ticas - ser√£o tratadas em calcular_operacoes
    if (grepl("\\{[^}]+\\}", crit$criterio)) {
      return(data.frame())
    }
    
    # Extrair informa√ß√£o de print do nome da categoria
    if (grepl("_s$", categoria)) {
      print_flag <- "s"
      categoria_limpa <- str_replace(categoria, "_s$", "")
    } else if (grepl("_n$", categoria)) {
      print_flag <- "n"
      categoria_limpa <- str_replace(categoria, "_n$", "")
    } else {
      print_flag <- "s"  # default
      categoria_limpa <- categoria
    }
    
    # Avaliar condi√ß√£o
    condicao_expr <- eval(parse(text = crit$criterio), envir = df)
    
    df %>%
      filter(condicao_expr) %>%
      group_by(across(all_of(group_vars))) %>%
      summarise(
        valor = sum(.data[[metrica]], na.rm = TRUE), 
        .groups = "drop"
      ) %>%
      mutate(
        categoria = categoria_limpa,
        metrica = metrica,
        dataframe_nome = df_nome,
        dataframe_filtros = df_filtros,
        relatorio = relatorio,
        anexo_codigo = anexo_codigo,
        anexo_nome = anexo_nome,
        detalhe = detalhe,
        print = print_flag,
        filtro = crit$criterio
      ) %>%
      separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE) %>%
      select(mes_lancamento, dataframe_nome, dataframe_filtros, relatorio, anexo_codigo, 
             anexo_nome, detalhe, print, filtro, metrica, 
             item_informacao_nome, item_informacao_codigo, 
             orgao_uge_tipo_administracao_nome, orgao_uge_tipo_administracao_codigo, 
             ordem, nome, valor)
  })
  
  # Criar o nome da nova dataframe com prefixo df_
  novo_nome <- paste0("df_", criterios_nome)
  
  # Atribuir o resultado √† nova dataframe no ambiente global
  assign(novo_nome, resultado, envir = .GlobalEnv)
  
  # Retornar o resultado tamb√©m
  return(resultado)
}


```

## Consolidar Crit√©rios

```{r consolidar_criterios}

# Fun√ß√£o para consolidar todas as dataframes com prefixo "df_criterios"
consolidar_criterios <- function() {
  # Obter todos os objetos no ambiente global
  objetos <- ls(envir = .GlobalEnv)
  
  # Filtrar apenas as dataframes que come√ßam com "df_criterios"
  df_criterios <- objetos[grepl("^df_criterios", objetos)]
  
  if (length(df_criterios) == 0) {
    stop("Nenhuma dataframe com prefixo 'df_criterios' foi encontrada")
  }
  
  # Obter todas as dataframes e combin√°-las
  tabelas <- map(df_criterios, ~ get(.x, envir = .GlobalEnv))
  
  # Padronizar tipos de colunas antes de combinar
  tabelas_padronizadas <- map(tabelas, function(tabela) {
    tabela %>%
      mutate(
        item_informacao_codigo = as.character(item_informacao_codigo),
        orgao_uge_tipo_administracao_codigo = as.character(orgao_uge_tipo_administracao_codigo),
        item_informacao_nome = as.character(item_informacao_nome),
        orgao_uge_tipo_administracao_nome = as.character(orgao_uge_tipo_administracao_nome)
      )
  })
  
  # Combinar todas as tabelas
  resultado_completo <- bind_rows(tabelas_padronizadas)
  
  # Reagrupar apenas por mes_lancamento, ignorando agrupamentos adicionais
  resultado <- resultado_completo %>%
    group_by(mes_lancamento, ordem, nome, metrica, dataframe_nome, dataframe_filtros,
             relatorio, anexo_codigo, anexo_nome, detalhe, print, filtro,
             item_informacao_nome, item_informacao_codigo, 
             orgao_uge_tipo_administracao_nome, orgao_uge_tipo_administracao_codigo) %>%
    summarise(valor = sum(valor, na.rm = TRUE), .groups = "drop") %>%
    arrange(mes_lancamento, relatorio, anexo_codigo, detalhe, ordem) %>%
    mutate(
      # Converter mes_lancamento para data (√∫ltimo dia do m√™s) - m√©todo simplificado
      data_lancamento = ceiling_date(ymd(paste0(mes_lancamento, "01")), "month") - days(1),
      # Criar chave √∫nica
      chave = paste0(mes_lancamento, "_", tolower(relatorio), "_", tolower(anexo_codigo), "_", tolower(detalhe), "_", ordem)
    ) %>%
    select(chave, mes_lancamento, data_lancamento, dataframe_nome, dataframe_filtros, relatorio, anexo_codigo, 
           anexo_nome, detalhe, print, filtro, metrica, 
           item_informacao_nome, item_informacao_codigo, 
           orgao_uge_tipo_administracao_nome, orgao_uge_tipo_administracao_codigo, 
           ordem, nome, valor)
  
  # Criar nome da dataframe baseado no m√™s mais recente
  mes_recente <- max(resultado$mes_lancamento)
  ano <- substr(as.character(mes_recente), 1, 4)
  mes_num <- substr(as.character(mes_recente), 5, 6)
  
  nome_df <- paste0("criterios_consolidados_", ano, "_", mes_num)
  
  # Salvar no ambiente global
  assign(nome_df, resultado, envir = .GlobalEnv)
  
  return(resultado)
}
```

## Calcular opera√ß√µes

```{r calcular_operacoes}
# Fun√ß√£o para realizar opera√ß√µes matem√°ticas usando as chaves √∫nicas
calcular_operacoes <- function(dados_consolidados = NULL, ...) {
  
  # Se dados n√£o fornecidos, usar consolidar_criterios()
  if (is.null(dados_consolidados)) {
    dados_consolidados <- consolidar_criterios()
  }
  
  # Capturar as opera√ß√µes passadas como argumentos
  operacoes <- list(...)
  
  if (length(operacoes) == 0) {
    stop("Nenhuma opera√ß√£o foi especificada")
  }
  
  # Criar um lookup table para facilitar a busca
  lookup_valores <- setNames(dados_consolidados$valor, dados_consolidados$chave)
  
  # Processar cada opera√ß√£o
  resultados <- map(names(operacoes), function(nome_operacao) {
    operacao <- operacoes[[nome_operacao]]
    
    if (is.character(operacao)) {
      # Opera√ß√£o simples: apenas a f√≥rmula como string
      formula <- operacao
    } else if (is.list(operacao) && !is.null(operacao$formula)) {
      # Opera√ß√£o estruturada
      formula <- operacao$formula
    } else {
      stop(paste("Opera√ß√£o", nome_operacao, "deve ser uma string (f√≥rmula) ou list com 'formula'"))
    }
    
    formula_processada <- formula
    
    # Encontrar todas as chaves na f√≥rmula (padr√£o: YYYYMM_texto_texto_texto_NN)
    chaves <- str_extract_all(formula, "[0-9]{6}_[a-zA-Z0-9/_]+_[a-zA-Z0-9/_]+_[a-zA-Z0-9/_]+_[0-9]+")[[1]]
    
    for (chave in chaves) {
      valor <- ifelse(chave %in% names(lookup_valores), 
                      lookup_valores[[chave]], 
                      0)
      # Converter para num√©rico e usar format cient√≠fico se necess√°rio para evitar v√≠rgulas
      valor_numerico <- as.numeric(valor)
      # Usar options para garantir nota√ß√£o sem v√≠rgula
      valor_limpo <- format(valor_numerico, scientific = FALSE, big.mark = "")
      
      formula_processada <- str_replace(formula_processada, 
                                        fixed(chave), 
                                        valor_limpo)
    }
    
    # Avaliar a express√£o matem√°tica
    resultado_calculo <- eval(parse(text = formula_processada))
    
    return(list(
      operacao = nome_operacao,
      formula_original = formula,
      formula_processada = formula_processada,
      resultado = resultado_calculo
    ))
  })
  
  names(resultados) <- names(operacoes)
  return(resultados)
}
```

# üìã RREO Anexo 01 - Balan√ßo Or√ßament√°rio {#sec-anexo-07}

```{r}
criterios_rreo_A01_receitas_bo  <- list(
  
  # ========== RECEITAS CORRENTES ==========
  
  # RECEITAS CORRENTES
  `01_receitas_correntes` = list(
    criterio = "nre1_categoria_economica_codigo == 1"
  ),
  
  # IMPOSTOS, TAXAS E CONTRIBUI√á√ïES DE MELHORIA
  `02_impostos_taxas_contrib_melhoria` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 1 &
    nre3_especie_receita_codigo_especie %in% c(1, 2, 3)
    "
  ),
  
  # IMPOSTOS
  `03_impostos` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 1 &
    nre3_especie_receita_codigo_especie == 1
    "
  ),
  
  # TAXAS
  `04_taxas` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 1 &
    nre3_especie_receita_codigo_especie == 2
    "
  ),
  
  # CONTRIBUI√á√ïES
  `05_contribuicoes` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 2
    "
  ),
  
  # CONTRIBUI√á√ïES SOCIAIS
  `06_contribuicoes_sociais` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 2 &
    nre3_especie_receita_codigo_especie == 1
    "
  ),
  
  # CONTRIBUI√á√ïES DE INTERVEN√á√ÉO NO DOM√çNIO ECON√îMICO
  `07_contrib_intervencao_dominio_economico` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 2 &
    nre3_especie_receita_codigo_especie == 2
    "
  ),
  
  # RECEITA PATRIMONIAL
  `08_receita_patrimonial` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 3
    "
  ),
  
  # EXPLORA√á√ÉO DO PATRIM√îNIO IMOBILI√ÅRIO DO ESTADO
  `09_exploracao_patrimonio_imobiliario` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 3 &
    nre3_especie_receita_codigo_especie == 1
    "
  ),
  
  # VALORES MOBILI√ÅRIOS
  `10_valores_mobiliarios` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 3 &
    nre3_especie_receita_codigo_especie == 2
    "
  ),
  
  # DELEGA√á√ÉO DE SERVI√áOS P√öBLICOS
  `11_delegacao_servicos_publicos` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 3 &
    nre3_especie_receita_codigo_especie == 3
    "
  ),
  
  # EXPLORA√á√ÉO DE RECURSOS NATURAIS
  `12_exploracao_recursos_naturais` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 3 &
    nre3_especie_receita_codigo_especie == 4
    "
  ),
  
  # EXPLORA√á√ÉO DO PATRIM√îNIO INTANG√çVEL
  `13_exploracao_patrimonio_intangivel` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 3 &
    nre3_especie_receita_codigo_especie == 5
    "
  ),
  
  # CESS√ÉO DE DIREITOS
  `14_cessao_direitos` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 3 &
    nre3_especie_receita_codigo_especie == 6
    "
  ),
  
  # DEMAIS RECEITAS PATRIMONIAIS
  `15_demais_receitas_patrimoniais` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 3 &
    nre3_especie_receita_codigo_especie == 9
    "
  ),
  
  # RECEITA AGROPECU√ÅRIA
  `16_receita_agropecuaria` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 4
    "
  ),
  
  # RECEITA INDUSTRIAL
  `17_receita_industrial` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 5
    "
  ),
  
  # RECEITAS DE SERVI√áOS
  `18_receitas_servicos` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 6
    "
  ),
  
  # SERVI√áOS ADMINISTRATIVOS E COMERCIAIS GERAIS
  `19_servicos_admin_comerciais` = list(
    criterio = "startsWith(natureza_receita_codigo_completo, '161')"
  ),
  
  # SERVI√áOS E ATIVIDADES REFERENTES √Ä NAVEGA√á√ÉO E AO TRANSPORTE
  `20_servicos_navegacao_transporte` = list(
    criterio = "startsWith(natureza_receita_codigo_completo, '162')"
  ),
  
  # SERVI√áOS E ATIVIDADES REFERENTES √Ä SA√öDE
  `21_servicos_saude` = list(
    criterio = "startsWith(natureza_receita_codigo_completo, '163')"
  ),
  
  # SERVI√áOS E ATIVIDADES FINANCEIRAS
  `22_servicos_financeiros` = list(
    criterio = "startsWith(natureza_receita_codigo_completo, '164')"
  ),
  
  # OUTROS SERVI√áOS
  `23_outros_servicos` = list(
    criterio = "startsWith(natureza_receita_codigo_completo, '169')"
  ),
  
  # TRANSFER√äNCIAS CORRENTES
  `24_transferencias_correntes` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 7
    "
  ),
  
  # TRANSFER√äNCIAS DA UNI√ÉO E DE SUAS ENTIDADES
  `25_transf_uniao_entidades` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 7 &
    nre3_especie_receita_codigo_especie == 1
    "
  ),
  
  # TRANSFER√äNCIAS DOS ESTADOS E DO DISTRITO FEDERAL E DE SUAS ENTIDADES
  `26_transf_estados_df_entidades` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 7 &
    nre3_especie_receita_codigo_especie == 2
    "
  ),
  
  # TRANSFER√äNCIAS DOS MUNIC√çPIOS E DE SUAS ENTIDADES
  `27_transf_municipios_entidades` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 7 &
    nre3_especie_receita_codigo_especie == 3
    "
  ),
  
  # TRANSFER√äNCIAS DE INSTITUI√á√ïES PRIVADAS
  `28_transf_instituicoes_privadas` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 7 &
    nre3_especie_receita_codigo_especie == 4
    "
  ),
  
  # TRANSFER√äNCIAS DE OUTRAS INSTITUI√á√ïES P√öBLICAS
  `29_transf_outras_instituicoes_publicas` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 7 &
    nre3_especie_receita_codigo_especie == 5
    "
  ),
  
  # TRANSFER√äNCIAS DO EXTERIOR
  `30_transf_exterior` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 7 &
    nre3_especie_receita_codigo_especie == 6
    "
  ),
  
  # DEMAIS TRANSFER√äNCIAS CORRENTES
  `31_demais_transf_correntes` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 7 &
    nre3_especie_receita_codigo_especie == 9
    "
  ),
  
  # OUTRAS RECEITAS CORRENTES
  `32_outras_receitas_correntes` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 9
    "
  ),
  
  # MULTAS ADMINISTRATIVAS, CONTRATUAIS E JUDICIAIS
  `33_multas_admin_contratuais` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 9 &
    nre3_especie_receita_codigo_especie == 1
    "
  ),
  
  # INDENIZA√á√ïES, RESTITUI√á√ïES E RESSARCIMENTOS
  `34_indenizacoes_restituicoes` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 9 &
    nre3_especie_receita_codigo_especie == 2
    "
  ),
  
  # BENS, DIREITOS E VALORES INCORPORADOS AO PATRIM√îNIO P√öBLICO
  `35_bens_direitos_valores` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 9 &
    nre3_especie_receita_codigo_especie == 3
    "
  ),
  
  # MULTAS E JUROS DE MORA DAS RECEITAS DE CAPITAL
  `36_multas_juros_mora_capital` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 9 &
    nre3_especie_receita_codigo_especie == 4
    "
  ),
  
  # DEMAIS RECEITAS CORRENTES
  `37_demais_receitas_correntes` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 9 &
    nre3_especie_receita_codigo_especie == 9
    "
  ),
  
  # RECEITAS CORRENTES A CLASSIFICAR
  `38_receitas_correntes_classificar` = list(
    criterio = "
    nre2_origem_receita_codigo_origem == 8 &
    nre3_especie_receita_codigo_especie == 8
    "
  ),
  
  # ========== RECEITAS DE CAPITAL ==========
  
  # RECEITAS DE CAPITAL
`39_receitas_capital` = list(
  criterio = "
  nre1_categoria_economica_codigo == 2 &
  !(startsWith(natureza_receita_codigo_completo, '21110201') |
    startsWith(natureza_receita_codigo_completo, '21210201'))
  "
),
  
 # OPERA√á√ïES DE CR√âDITO
`40_operacoes_credito` = list(
  criterio = "
  nre1_categoria_economica_codigo == 2 & 
  nre2_origem_receita_codigo_origem == 1 &
  !(startsWith(natureza_receita_codigo_completo, '21110201') |
    startsWith(natureza_receita_codigo_completo, '21210201'))
  "
),

# OPERA√á√ïES DE CR√âDITO INTERNAS
`41_operacoes_credito_internas` = list(
  criterio = "
  nre1_categoria_economica_codigo == 2 & 
  nre2_origem_receita_codigo_origem == 1 &
  nre3_especie_receita_codigo_especie == 1 &
  !startsWith(natureza_receita_codigo_completo, '21110201')
  "
),

# OPERA√á√ïES DE CR√âDITO EXTERNAS
`42_operacoes_credito_externas` = list(
  criterio = "
  nre1_categoria_economica_codigo == 2 & 
  nre2_origem_receita_codigo_origem == 1 &
  nre3_especie_receita_codigo_especie == 2 &
  !startsWith(natureza_receita_codigo_completo, '21210201')
  "
),
  
  # ALIENA√á√ÉO DE BENS
  `43_alienacao_bens` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem == 2
    "
  ),
  
  # ALIENA√á√ÉO DE BENS M√ìVEIS
  `44_alienacao_bens_moveis` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem == 2 &
    nre3_especie_receita_codigo_especie == 1
    "
  ),
  
  # ALIENA√á√ÉO DE BENS IM√ìVEIS
  `45_alienacao_bens_imoveis` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem == 2 &
    nre3_especie_receita_codigo_especie == 2
    "
  ),
  
  # ALIENA√á√ÉO DE BENS INTANG√çVEIS
  `46_alienacao_bens_intangiveis` = list(
    criterio = "startsWith(natureza_receita_codigo_completo, '223')"
  ),
  
  # AMORTIZA√á√ïES DE EMPR√âSTIMOS
  `47_amortizacoes_emprestimos` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem == 3
    "
  ),
  
  # TRANSFER√äNCIAS DE CAPITAL
  `48_transferencias_capital` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem == 4
    "
  ),
  
  # TRANSFER√äNCIAS DOS ESTADOS E DO DISTRITO FEDERAL E DE SUAS ENTIDADES (CAPITAL)
  `49_transf_estados_df_capital` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem == 4 &
    nre3_especie_receita_codigo_especie == 2
    "
  ),
  
  # TRANSFER√äNCIAS DOS MUNIC√çPIOS E DE SUAS ENTIDADES (CAPITAL)
  `50_transf_municipios_capital` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem == 4 &
    nre3_especie_receita_codigo_especie == 3
    "
  ),
  
  # TRANSFER√äNCIAS DE INSTITUI√á√ïES PRIVADAS (CAPITAL)
  `51_transf_instituicoes_privadas_capital` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem == 4 &
    nre3_especie_receita_codigo_especie == 4
    "
  ),
  
  # TRANSFER√äNCIAS DE OUTRAS INSTITUI√á√ïES P√öBLICAS (CAPITAL)
  `52_transf_outras_instituicoes_publicas_capital` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem == 4 &
    nre3_especie_receita_codigo_especie == 5
    "
  ),
  
  # TRANSFER√äNCIAS DO EXTERIOR (CAPITAL)
  `53_transf_exterior_capital` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem == 4 &
    nre3_especie_receita_codigo_especie == 6
    "
  ),
  
  # DEMAIS TRANSFER√äNCIAS DE CAPITAL
  `54_demais_transf_capital` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem == 4 &
    nre3_especie_receita_codigo_especie == 9
    "
  ),
  
  # OUTRAS RECEITAS DE CAPITAL
  `55_outras_receitas_capital` = list(
    criterio = "
    nre2_origem_receita_codigo_origem == 9 &
    nre1_categoria_economica_codigo == 2
    "
  ),
  
  # RESULTADO DO BANCO CENTRAL DO BRASIL
  `56_resultado_banco_central` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem == 9 &
    nre3_especie_receita_codigo_especie == 2
    "
  ),
  
  # REMUNERA√á√ÉO DAS DISPONIBILIDADES DO TESOURO
  `57_remuneracao_disponibilidades_tesouro` = list(
    criterio = "startsWith(natureza_receita_codigo_completo, '293')"
  ),
  
  # ========== RECEITAS INTRA-OR√áAMENT√ÅRIAS ==========
  
  # RECEITAS CORRENTES INTRA
  `58_receitas_correntes_intra` = list(
    criterio = "nre1_categoria_economica_codigo == 7"
  ),
  
  # IMPOSTOS, TAXAS E CONTRIBUI√á√ïES DE MELHORIA INTRA
  `59_impostos_taxas_contrib_melhoria_intra` = list(
    criterio = "
    nre1_categoria_economica_codigo == 7 & 
    nre2_origem_receita_codigo_origem == 1
    "
  ),
  
  # IMPOSTOS INTRA
  `60_impostos_intra` = list(
    criterio = "
    nre1_categoria_economica_codigo == 7 & 
    nre2_origem_receita_codigo_origem == 1 &
    nre3_especie_receita_codigo_especie == 1
    "
  ),
  
  # TAXAS INTRA
  `61_taxas_intra` = list(
    criterio = "
    nre1_categoria_economica_codigo == 7 & 
    nre2_origem_receita_codigo_origem == 1 &
    nre3_especie_receita_codigo_especie == 2
    "
  ),
  
  # CONTRIBUI√á√ïES INTRA
  `62_contribuicoes_intra` = list(
    criterio = "
    nre1_categoria_economica_codigo == 7 & 
    nre2_origem_receita_codigo_origem == 2
    "
  ),
  
  # CONTRIBUI√á√ïES SOCIAIS INTRA
  `63_contribuicoes_sociais_intra` = list(
    criterio = "
    nre1_categoria_economica_codigo == 7 & 
    nre2_origem_receita_codigo_origem == 2 &
    nre3_especie_receita_codigo_especie == 1
    "
  ),
  
  # CONTRIBUI√á√ïES ECON√îMICAS INTRA
  `64_contribuicoes_economicas_intra` = list(
    criterio = "
    nre1_categoria_economica_codigo == 7 & 
    nre2_origem_receita_codigo_origem == 2 &
    nre3_especie_receita_codigo_especie == 2
    "
  ),
  
  # RECEITA PATRIMONIAL INTRA
  `65_receita_patrimonial_intra` = list(
    criterio = "
    nre1_categoria_economica_codigo == 7 & 
    nre2_origem_receita_codigo_origem == 3
    "
  ),
  
  # EXPLORA√á√ÉO PATRIM√îNIO IMOBILI√ÅRIO INTRA
  `66_exploracao_patrimonio_imobiliario_intra` = list(
    criterio = "
    nre1_categoria_economica_codigo == 7 & 
    nre2_origem_receita_codigo_origem == 3 &
    nre3_especie_receita_codigo_especie == 1
    "
  ),
  
  # VALORES MOBILI√ÅRIOS INTRA
  `67_valores_mobiliarios_intra` = list(
    criterio = "
    nre1_categoria_economica_codigo == 7 & 
    nre2_origem_receita_codigo_origem == 3 &
    nre3_especie_receita_codigo_especie == 2
    "
  ),
  
  # DELEGA√á√ÉO SERVI√áOS P√öBLICOS INTRA
  `68_delegacao_servicos_publicos_intra` = list(
    criterio = "
    nre1_categoria_economica_codigo == 7 & 
    nre2_origem_receita_codigo_origem == 3 &
    nre3_especie_receita_codigo_especie == 3
    "
  ),
  
  # RECEITA INDUSTRIAL INTRA
  `69_receita_industrial_intra` = list(
    criterio = "startsWith(natureza_receita_codigo_completo, '75')"
  ),
  
  # RECEITA DE SERVI√áOS INTRA
  `70_receita_servicos_intra` = list(
    criterio = "startsWith(natureza_receita_codigo_completo, '76')"
  ),
  
  # SERVI√áOS ADMINISTRATIVOS COMERCIAIS INTRA
  `71_servicos_admin_comerciais_intra` = list(
    criterio = "startsWith(natureza_receita_codigo_completo, '761')"
  ),
  
  # SERVI√áOS E ATIVIDADES REFERENTES √Ä SA√öDE INTRA
  `72_servicos_saude_intra` = list(
    criterio = "startsWith(natureza_receita_codigo_completo, '763')"
  ),
  
  # SERVI√áOS E ATIVIDADES FINANCEIRAS INTRA
  `73_servicos_financeiros_intra` = list(
    criterio = "startsWith(natureza_receita_codigo_completo, '764')"
  ),
  
  # OUTROS SERVI√áOS INTRA
  `74_outros_servicos_intra` = list(
    criterio = "startsWith(natureza_receita_codigo_completo, '769')"
  ),
  
  # OUTRAS RECEITAS CORRENTES INTRA
  `75_outras_receitas_correntes_intra` = list(
    criterio = "
    nre1_categoria_economica_codigo == 7 & 
    nre2_origem_receita_codigo_origem == 9
    "
  ),
  
  # MULTAS ADMINISTRATIVAS, CONTRATUAIS E JUDICIAIS INTRA
  `76_multas_admin_contratuais_intra` = list(
    criterio = "
    nre1_categoria_economica_codigo == 7 & 
    nre2_origem_receita_codigo_origem == 9 &
    nre3_especie_receita_codigo_especie == 1
    "
  ),
  
  # INDENIZA√á√ïES, RESTITUI√á√ïES E RESSARCIMENTOS INTRA
  `77_indenizacoes_restituicoes_intra` = list(
    criterio = "
    nre1_categoria_economica_codigo == 7 & 
    nre2_origem_receita_codigo_origem == 9 &
    nre3_especie_receita_codigo_especie == 2
    "
  ),
  
  # DEMAIS RECEITAS CORRENTES INTRA
  `78_demais_receitas_correntes_intra` = list(
    criterio = "
    nre1_categoria_economica_codigo == 7 & 
    nre2_origem_receita_codigo_origem == 9 &
    nre3_especie_receita_codigo_especie == 9
    "
  ),
  
  # ========== SUBTOTAIS E OPERA√á√ïES DE REFINANCIAMENTO ==========
  
  # SUBTOTAL DAS RECEITAS (III) = (I + II)
  `79_subtotal_receitas` = list(
    criterio = "
    nre1_categoria_economica_codigo %in% c(1, 2, 7, 8) &
    !(startsWith(natureza_receita_codigo_completo, '21110201') |
      startsWith(natureza_receita_codigo_completo, '21210201') |
      startsWith(natureza_receita_codigo_completo, '81110201') |
      startsWith(natureza_receita_codigo_completo, '81210201'))
    "
  ),
  
  # OPERA√á√ïES DE CR√âDITO - REFINANCIAMENTO (IV)
  `80_operacoes_credito_refinanciamento` = list(
    criterio = "
    startsWith(natureza_receita_codigo_completo, '21110201') |
    startsWith(natureza_receita_codigo_completo, '21210201') |
    startsWith(natureza_receita_codigo_completo, '81110201') |
    startsWith(natureza_receita_codigo_completo, '81210201')
    "
  ),
  
  # OPERA√á√ïES DE CR√âDITO INTERNAS - REFINANCIAMENTO
  `81_operacoes_credito_internas_refinanciamento` = list(
    criterio = "
    startsWith(natureza_receita_codigo_completo, '21110201') |
    startsWith(natureza_receita_codigo_completo, '81110201')
    "
  ),
  
  # MOBILI√ÅRIA - REFINANCIAMENTO (CR√âDITO INTERNO)
  `82_mobiliaria_refinanciamento_interno` = list(
    criterio = "
    startsWith(natureza_receita_codigo_completo, '21110201') |
    startsWith(natureza_receita_codigo_completo, '81110201')
    "
  ),
  
  # OPERA√á√ïES DE CR√âDITO EXTERNAS - REFINANCIAMENTO
  `83_operacoes_credito_externas_refinanciamento` = list(
    criterio = "
    startsWith(natureza_receita_codigo_completo, '212102') |
    startsWith(natureza_receita_codigo_completo, '812102')
    "
  ),
  
  # MOBILI√ÅRIA - REFINANCIAMENTO (CR√âDITO EXTERNO)
  `84_mobiliaria_refinanciamento_externo` = list(
    criterio = "
    startsWith(natureza_receita_codigo_completo, '212102') |
    startsWith(natureza_receita_codigo_completo, '812102')
    "
  ),
  
  # SUBTOTAL COM REFINANCIAMENTO (V) = (III + IV)
  `85_subtotal_com_refinanciamento` = list(
    criterio = "nre1_categoria_economica_codigo %in% c(1, 2, 7, 8)"
  )
)
datatable(aplicar_criterios(dados_receita, criterios_rreo_A01_receitas_bo))%>% formatRound("valor", 2, mark = ".", dec.mark = "," )
```

```{r}
criterios_rreo_A01_despesas_bo <- list(
  
  # ========== DESPESAS (Exceto Intra-Or√ßament√°rias) (IX) ==========
  
  # DESPESAS (Exceto Intra-Or√ßament√°rias) (IX)
  `01_despesas_exceto_intra` = list(
    criterio = "
    modalidade_aplicacao_codigo != 91 &
    !(elemento_despesa_codigo %in% c('76', '77') &
      subfuncao_governo_codigo %in% c('841', '842', '843', '844', '846') &
      fonte_recursos_codigo == '443')
    "
  ),
  
  # ========== DESPESAS CORRENTES ==========
  
  # DESPESAS CORRENTES
  `02_despesas_correntes` = list(
    criterio = "
    categoria_economica_despesa_codigo == 3 &
    modalidade_aplicacao_codigo != 91
    "
  ),
  
  # PESSOAL E ENCARGOS SOCIAIS
  `03_pessoal_encargos_sociais` = list(
    criterio = "
    categoria_economica_despesa_codigo == 3 &
    grupo_despesa_codigo_grupo == 1 &
    modalidade_aplicacao_codigo != 91
    "
  ),
  
  # JUROS E ENCARGOS DA D√çVIDA
  `04_juros_encargos_divida` = list(
    criterio = "
    categoria_economica_despesa_codigo == 3 &
    grupo_despesa_codigo_grupo == 2 &
    modalidade_aplicacao_codigo != 91
    "
  ),
  
  # OUTRAS DESPESAS CORRENTES
  `05_outras_despesas_correntes` = list(
    criterio = "
    categoria_economica_despesa_codigo == 3 &
    grupo_despesa_codigo_grupo == 3 &
    modalidade_aplicacao_codigo != 91
    "
  ),
  
  # TRANSFER√äNCIA A ESTADOS, DF E MUNIC√çPIOS
  `06_transferencia_estados_df_municipios` = list(
    criterio = "
    categoria_economica_despesa_codigo == 3 &
    grupo_despesa_codigo_grupo == 3 &
    modalidade_aplicacao_codigo %in% c('30', '31', '32', '40', '41', '42', '43', '44', '45', '46') &
    modalidade_aplicacao_codigo != 91
    "
  ),
  
  # BENEF√çCIOS PREVIDENCI√ÅRIOS
  `07_beneficios_previdenciarios` = list(
    criterio = "
    categoria_economica_despesa_codigo == 3 &
    grupo_despesa_codigo_grupo == 3 &
    modalidade_aplicacao_codigo != 91 &
    unidade_orcamentaria_codigo %in% c('55902', '40904', '33904', '25917')
    "
  ),
  
  # DEMAIS DESPESAS CORRENTES
  `08_demais_despesas_correntes` = list(
    criterio = "
    categoria_economica_despesa_codigo == 3 &
    grupo_despesa_codigo_grupo == 3 &
    modalidade_aplicacao_codigo != 91 &
    !(modalidade_aplicacao_codigo %in% c('30', '31', '32', '40', '41', '42', '43', '44', '45', '46')) &
    !(unidade_orcamentaria_codigo %in% c('55902', '40904', '33904', '25917'))
    "
  ),
  
  # ========== DESPESAS DE CAPITAL ==========
  
  # DESPESAS DE CAPITAL (corrigido)
  `09_despesas_capital` = list(
    criterio = "
    categoria_economica_despesa_codigo == 4 &
    modalidade_aplicacao_codigo != 91 &
    !(elemento_despesa_codigo %in% c('76', '77') &
      subfuncao_governo_codigo %in% c('841', '842', '843', '844', '846') &
      fonte_recursos_codigo == '443')
    "
  ),
  
  # INVESTIMENTOS
  `10_investimentos` = list(
    criterio = "
    categoria_economica_despesa_codigo == 4 &
    grupo_despesa_codigo_grupo == 4 &
    modalidade_aplicacao_codigo != 91
    "
  ),
  
  # INVERS√ïES FINANCEIRAS
  `11_inversoes_financeiras` = list(
    criterio = "
    categoria_economica_despesa_codigo == 4 &
    grupo_despesa_codigo_grupo == 5 &
    modalidade_aplicacao_codigo != 91
    "
  ),
  
  # AMORTIZA√á√ÉO DA D√çVIDA
  `12_amortizacao_divida` = list(
    criterio = "
    categoria_economica_despesa_codigo == 4 &
    grupo_despesa_codigo_grupo == 6 &
    modalidade_aplicacao_codigo != 91 &
    !(elemento_despesa_codigo %in% c('76', '77') &
      subfuncao_governo_codigo %in% c('841', '842', '843', '844', '846') &
      fonte_recursos_codigo == '443')
    "
  ),
  
  # ========== RESERVA DE CONTING√äNCIA ==========
  
  # RESERVA DE CONTING√äNCIA
  `13_reserva_contingencia` = list(
    criterio = "
    categoria_economica_despesa_codigo == 9 &
    modalidade_aplicacao_codigo != 91
    "
  ),
  
  # ========== DESPESAS INTRA-OR√áAMENT√ÅRIAS ==========
  
  # DESPESAS INTRA-OR√áAMENT√ÅRIAS (X)
  `14_despesas_intra` = list(
    criterio = "modalidade_aplicacao_codigo == 91"
  ),
  
  # DESPESAS CORRENTES INTRA
  `15_despesas_correntes_intra` = list(
    criterio = "
    categoria_economica_despesa_codigo == 3 &
    modalidade_aplicacao_codigo == 91
    "
  ),
  
  # PESSOAL E ENCARGOS SOCIAIS INTRA
  `16_pessoal_encargos_sociais_intra` = list(
    criterio = "
    categoria_economica_despesa_codigo == 3 &
    grupo_despesa_codigo_grupo == 1 &
    modalidade_aplicacao_codigo == 91
    "
  ),
  
  # JUROS E ENCARGOS DA D√çVIDA INTRA
  `17_juros_encargos_divida_intra` = list(
    criterio = "
    categoria_economica_despesa_codigo == 3 &
    grupo_despesa_codigo_grupo == 2 &
    modalidade_aplicacao_codigo == 91
    "
  ),
  
  # OUTRAS DESPESAS CORRENTES INTRA
  `18_outras_despesas_correntes_intra` = list(
    criterio = "
    categoria_economica_despesa_codigo == 3 &
    grupo_despesa_codigo_grupo == 3 &
    modalidade_aplicacao_codigo == 91
    "
  ),
  
  # BENEF√çCIOS PREVIDENCI√ÅRIOS INTRA
  `19_beneficios_previdenciarios_intra` = list(
    criterio = "
    categoria_economica_despesa_codigo == 3 &
    grupo_despesa_codigo_grupo == 3 &
    modalidade_aplicacao_codigo == 91 &
    unidade_orcamentaria_codigo %in% c('55902', '40904', '33904', '25917')
    "
  ),
  
  # DEMAIS DESPESAS CORRENTES INTRA
  `20_demais_despesas_correntes_intra` = list(
    criterio = "
    categoria_economica_despesa_codigo == 3 &
    grupo_despesa_codigo_grupo == 3 &
    modalidade_aplicacao_codigo == 91 &
    !(unidade_orcamentaria_codigo %in% c('55902', '40904', '33904', '25917'))
    "
  ),
  
  # DESPESAS DE CAPITAL INTRA
  `21_despesas_capital_intra` = list(
    criterio = "
    categoria_economica_despesa_codigo == 4 &
    modalidade_aplicacao_codigo == 91
    "
  ),
  
  # INVESTIMENTOS INTRA
  `22_investimentos_intra` = list(
    criterio = "
    categoria_economica_despesa_codigo == 4 &
    grupo_despesa_codigo_grupo == 4 &
    modalidade_aplicacao_codigo == 91
    "
  ),
  
  # INVERS√ïES FINANCEIRAS INTRA
  `23_inversoes_financeiras_intra` = list(
    criterio = "
    categoria_economica_despesa_codigo == 4 &
    grupo_despesa_codigo_grupo == 5 &
    modalidade_aplicacao_codigo == 91
    "
  ),
  
  # AMORTIZA√á√ÉO DA D√çVIDA INTRA
  `24_amortizacao_divida_intra` = list(
    criterio = "
    categoria_economica_despesa_codigo == 4 &
    grupo_despesa_codigo_grupo == 6 &
    modalidade_aplicacao_codigo == 91 &
    !(elemento_despesa_codigo %in% c('76', '77') &
      subfuncao_governo_codigo %in% c('841', '842', '843', '844', '846') &
      fonte_recursos_codigo == '443')
    "
  ),
  
  # RESERVA DE CONTING√äNCIA INTRA
  `25_reserva_contingencia_intra` = list(
    criterio = "
    categoria_economica_despesa_codigo == 9 &
    modalidade_aplicacao_codigo == 91
    "
  ),
  
  # ========== SUBTOTAIS ==========
  
  # SUBTOTAL DAS DESPESAS (XI) = (IX + X)
  `26_subtotal_despesas` = list(
    criterio = "
    categoria_economica_despesa_codigo %in% c(3, 4, 9) &
    !(elemento_despesa_codigo %in% c('76', '77') &
      subfuncao_governo_codigo %in% c('841', '842', '843', '844', '846') &
      fonte_recursos_codigo == '443')
    "
  ),
  
  # ========== AMORTIZA√á√ÉO DA D√çVIDA - REFINANCIAMENTO ==========
  
  # AMORTIZA√á√ÉO DA D√çVIDA - REFINANCIAMENTO (XII)
  `27_amortizacao_divida_refinanciamento` = list(
    criterio = "
    grupo_despesa_codigo_grupo == 6 &
    elemento_despesa_codigo %in% c('76', '77') &
    subfuncao_governo_codigo %in% c('841', '842', '843', '844', '846') &
    fonte_recursos_codigo == '443'
    "
  ),
  
  # AMORTIZA√á√ÉO DA D√çVIDA INTERNA
  `28_amortizacao_divida_interna` = list(
    criterio = "
    grupo_despesa_codigo_grupo == 6 &
    elemento_despesa_codigo %in% c('76', '77') &
    subfuncao_governo_codigo %in% c('841', '843', '846') &
    fonte_recursos_codigo == '443'
    "
  ),
  
  # D√çVIDA MOBILI√ÅRIA
  `29_divida_mobiliaria` = list(
    criterio = "
    grupo_despesa_codigo_grupo == 6 &
    elemento_despesa_codigo == '76' &
    subfuncao_governo_codigo %in% c('841', '843', '846') &
    fonte_recursos_codigo == '443'
    "
  ),
  
  # OUTRAS D√çVIDAS
  `30_outras_dividas` = list(
    criterio = "
    grupo_despesa_codigo_grupo == 6 &
    elemento_despesa_codigo == '77' &
    subfuncao_governo_codigo %in% c('841', '843', '846') &
    fonte_recursos_codigo == '443'
    "
  ),
  
  # AMORTIZA√á√ÉO DA D√çVIDA EXTERNA
  `31_amortizacao_divida_externa` = list(
    criterio = "
    grupo_despesa_codigo_grupo == 6 &
    elemento_despesa_codigo %in% c('76', '77') &
    subfuncao_governo_codigo %in% c('842', '844') &
    fonte_recursos_codigo == '443'
    "
  ),
  
  # D√çVIDA MOBILI√ÅRIA (EXTERNA)
  `32_divida_mobiliaria_externa` = list(
    criterio = "
    grupo_despesa_codigo_grupo == 6 &
    elemento_despesa_codigo == '76' &
    subfuncao_governo_codigo %in% c('842', '844') &
    fonte_recursos_codigo == '443'
    "
  ),
  
  # OUTRAS D√çVIDAS (EXTERNA)
  `33_outras_dividas_externa` = list(
    criterio = "
    grupo_despesa_codigo_grupo == 6 &
    elemento_despesa_codigo == '77' &
    subfuncao_governo_codigo %in% c('842', '844') &
    fonte_recursos_codigo == '443'
    "
  ),
  
  # SUBTOTAL COM REFINANCIAMENTO (XIII) = (XI + XII)
  `34_subtotal_com_refinanciamento` = list(
    criterio = "categoria_economica_despesa_codigo %in% c(3, 4, 9)"
  )
)
datatable(aplicar_criterios(dados_despesa, criterios_rreo_A01_despesas_bo))%>% formatRound("valor", 2, mark = ".", dec.mark = "," )

bo_depsesa <- (aplicar_criterios(dados_despesa, criterios_rreo_A01_despesas_bo))

datatable(bo_depsesa %>% filter(item_informacao_codigo == "9") %>% group_by(ordem, nome) %>% summarise(valor = sum(valor)))%>% formatRound("valor", 2, mark = ".", dec.mark = "," )


datatable(dados_despesa %>%filter(item_informacao_codigo == 9, tipo_modalidade != "intra") %>% group_by(categoria_economica_despesa_codigo, categoria_economica_despesa_nome, grupo_despesa_codigo_grupo,grupo_despesa_nome , refinanciamento, tipo_modalidade) %>% summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao)))%>% formatRound("saldo_r_item_informacao", 2, mark = ".", dec.mark = "," )


datatable(dados_despesa %>%filter(item_informacao_codigo == 9, tipo_modalidade != "intra") %>% group_by(categoria_economica_despesa_codigo, categoria_economica_despesa_nome,  refinanciamento, tipo_modalidade) %>% summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao)))%>% formatRound("saldo_r_item_informacao", 2, mark = ".", dec.mark = "," )
```

```{r}
datatable(dados_despesa %>% filter(mes_lancamento == mes_filtro, tipo_modalidade != "intra", item_informacao_nome == "DESPESAS PAGAS") %>% group_by(refinanciamento, grupo_despesa_codigo_grupo, grupo_despesa_nome) %>% summarise(despesa_empenhada = sum(saldo_r_item_informacao, na.rm = TRUE) )  %>% adorn_totals("row"), rownames = FALSE,
  colnames = c("refinanciamento", "Grupo c√≥digo", "Grupo Nome", "Despesa empenhada"))%>% formatRound("despesa_empenhada", 2, mark = ".", dec.mark = "," )%>% 
  DT::formatStyle(columns = colnames(.$x$data), fontSize = '75%')
```

Voc√™ estava tentando fazer o pivot com dados **n√£o agregados**, onde cada combina√ß√£o de chaves tinha milhares de registros. Agregando primeiro com `sum()`, voc√™ ter√° apenas **12 linhas** (uma para cada combina√ß√£o √∫nica).

```{r}
agrupado_despesa_tipo_modalidade_refinanciamento_categoria_grupo <- c( "tipo_modalidade"  ,"refinanciamento","categoria_economica_despesa_codigo", "categoria_economica_despesa_nome", "grupo_despesa_codigo_grupo", "grupo_despesa_nome")


dados_agregados <- dados_despesa %>% 
  filter(mes_lancamento == mes_filtro) %>%
  group_by(across(all_of(c(agrupado_despesa_tipo_modalidade_refinanciamento_categoria_grupo, "item_informacao_nome")))) %>%
  summarise(
    saldo_r_item_informacao = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  )

dt_formatada(
  tabela_pivotada(dados_agregados, agrupado_despesa_tipo_modalidade_refinanciamento_categoria_grupo), 
  agrupado_despesa_tipo_modalidade_refinanciamento_categoria_grupo
)
```

# üìã RREO Anexo 02 - Fun√ß√£o e Subfun√ß√£o

```{r}
datatable(dados_despesa %>% group_by(funcao_governo_codigo, funcao_governo_nome, refinanciamento) %>% filter(item_informacao_codigo == 25) %>% summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao)) %>% adorn_totals() )%>% formatRound("saldo_r_item_informacao", 2, mark = ".", dec.mark = "," )%>% 
  DT::formatStyle(columns = colnames(.$x$data), fontSize = '75%')
```

# üìã RREO Anexo 03 - RCL

```{r criterios-receitas}
#| code-fold: true


# ===============================================================================
# CRIT√âRIOS PARA RECEITAS - ANEXO 3 RCL
# ===============================================================================

criterios_rreo_A03_rcl_receitas_rcl <- list(
  
  # === RECEITAS CORRENTES POR ORIGEM (01-09) ===
  
  # IMPOSTOS, TAXAS E CONTRIBUI√á√ïES DE MELHORIA
  `01  Impostos, Taxas e Contribui√ß√µes de Melhoria` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 1"
  ),
  
  # RECEITA DE CONTRIBUI√á√ïES
  `02  Receita de Contribui√ß√µes` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 2"
  ),
  
  # RECEITA PATRIMONIAL
  `03  Receita Patrimonial` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 3"
  ),
  
  # RECEITA AGROPECU√ÅRIA
  `04  Receita Agropecu√°ria` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 4"
  ),
  
  # RECEITA INDUSTRIAL
  `05  Receita Industrial` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 5"
  ),
  
  # RECEITA DE SERVI√áOS
  `06  Receita de Servi√ßos` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 6"
  ),
  
  # TRANSFER√äNCIAS CORRENTES
  `07  Transfer√™ncias Correntes` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 7"
  ),
  
  # RECEITAS CORRENTES A CLASSIFICAR
  `08  Receitas Correntes a Classificar` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 8"
  ),
  
  # OUTRAS RECEITAS CORRENTES
  `09  Outras Receitas Correntes` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 9"
  ),
  
  # === ITENS ESPEC√çFICOS PARA C√ÅLCULO DA RCL ===
  
  # TRANSFER√äNCIAS CONSTITUCIONAIS E LEGAIS
  `10  Transfer√™ncias Constitucionais e Legais` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 7 & (
      grepl('FPE|FPM|CONSTITUCIONAL|LEGAL', natureza_receita_nome, ignore.case = TRUE) |
      grepl('^172[0-9]', natureza_receita_codigo_completo) |
      grepl('^171[0-9]', natureza_receita_codigo_completo)
    )
    "
  ),
  
  # CONTRIB. EMPREGADORES E TRAB. PARA SEG. SOCIAL
  `11  Contrib. Empregadores e Trabalhadores para Seguridade Social` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & fonte_recursos_codigo == '054' & 
    !natureza_receita_codigo_completo %in% c(
      '19900300', '19900310', '19900311', '19900312', '19900313', '19900314',
      '19990300', '19990301', '19990302', '19990303', '19990304'
    )
    "
  ),
  
  # CONTRIB. DO SERVIDOR PARA O PLANO DE PREVID√äNCIA
  `12  Contrib. Plano Seguridade Social do Servidor` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & (
      fonte_recursos_codigo %in% c('055', '056') |
      natureza_receita_codigo_completo == '12150116'
    )
    "
  ),
  
  # COMPENSA√á√ÉO FINANC. ENTRE REGIMES PREVID√äNCIA
  `13  Compensa√ß√£o Financeira entre Regimes RPPS` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & natureza_receita_codigo_completo %in% c(
      '19900300', '19900310', '19900311', '19900312', '19900313', '19900314',
      '19990300', '19990301', '19990302', '19990303', '19990304'
    )
    "
  ),
  
  # CONTRIB. DOS MILITARES PARA O CUSTEIO DAS PENS√ïES
  `14  Contrib. para Custeio Pens√µes Militares` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & (
      grepl('^1210051', natureza_receita_codigo_completo) |
      grepl('^1215041', natureza_receita_codigo_completo) |
      grepl('^121911', natureza_receita_codigo_completo)
    )
    "
  ),
  
  # CONTRIBUI√á√ïES PARA PIS/PASEP
  `15  Contribui√ß√£o para PIS/PASEP` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & (
      (grepl('^1210091|^1212', natureza_receita_codigo_completo) & 
       !fonte_recursos_codigo %in% c('055', '056', '054')) |
      (!grepl('^1210091|^1212', natureza_receita_codigo_completo) & 
       fonte_recursos_codigo %in% c('040', '041'))
    )
    "
  ),
  
  # DEDU√á√ïES DAS RECEITAS
  `16  Dedu√ß√µes das Receitas` = list(
    criterio = "
    (grepl('^1212', natureza_receita_codigo_completo) & fonte_recursos_codigo %in% c('031', '032', '040', '041')) |
    (grepl('^1214', natureza_receita_codigo_completo) & fonte_recursos_codigo == '054') |
    (grepl('^1215', natureza_receita_codigo_completo) & fonte_recursos_codigo %in% c('023', '032', '055', '056')) |
    (grepl('^1219', natureza_receita_codigo_completo) & fonte_recursos_codigo == '054') |
    (grepl('^1911', natureza_receita_codigo_completo) & fonte_recursos_codigo == '054') |
    (grepl('^1922', natureza_receita_codigo_completo) & fonte_recursos_codigo %in% c('040', '054', '056')) |
    (grepl('^1923', natureza_receita_codigo_completo) & fonte_recursos_codigo == '054') |
    (grepl('^1999', natureza_receita_codigo_completo) & fonte_recursos_codigo == '054')
    "
  )
)


datatable(aplicar_criterios(dados_receita, criterios_rreo_A03_rcl_receitas_rcl))

datatable(consolidar_criterios())
```

```{r criterios_despesas}

# ===============================================================================
# CRIT√âRIOS PARA DESPESAS (DEDU√á√ïES) - ANEXO 3 RCL
# ===============================================================================

criterios_rreo_A03_rcl_despesas_rcl <- list(
  
  # TRANSFER√äNCIAS CONSTITUCIONAIS E LEGAIS (DESPESAS)
  `01  Transfer√™ncias Constitucionais e Legais` = list(
    criterio = "
    acao_governo_codigo %in% c('0E36', '00SB') | 
    grepl('^28846090900RX', programa_governo_codigo) | 
    (programa_governo_codigo %in% c('0903', '2030', '2080') & 
     modalidade_aplicacao_codigo %in% c(30, 31, 32, 35, 36, 40, 41, 42, 45, 46) & 
     acao_governo_codigo %in% c('0044', '0045', '0046', '0050', '0051', '00H6', '006M', 
                                '00G6', '0169', '0223', '0369', '0546', '0547', '0999', 
                                '099B', '0A53', '0C03', '0C33', '0E25', '0E36', '00PX', 
                                '00QR', '00S3', '00S7', '00S8', '00SE', '00RX', '00UH'))
    "
  ),
  
  # OUTRAS DEDU√á√ïES (DESPESAS)
  `02  Outras Dedu√ß√µes` = list(
    criterio = "
    acao_governo_codigo %in% c('0E36', '00SB') | 
    grepl('^28846090900RX', programa_governo_codigo) | 
    (programa_governo_codigo %in% c('0903', '2030', '2080') & 
     modalidade_aplicacao_codigo %in% c(30, 31, 32, 35, 36, 40, 41, 42, 45, 46) & 
     acao_governo_codigo %in% c('0044', '0045', '0046', '0050', '0051', '00H6', '006M', 
                                '00G6', '0169', '0223', '0369', '0546', '0547', '0999', 
                                '099B', '0A53', '0C03', '0C33', '0E25', '0E36', '00PX', 
                                '00QR', '00S3', '00S7', '00S8', '00SE', '00RX', '00UH'))
    "
  )
)

datatable(aplicar_criterios(df = dados_despesa %>% unique(), criterios_rreo_A03_rcl_despesas_rcl))
```

```{r criterio_rp_cancelados_transferencias}
# Filtro para RREO Anexo 3 - Receita Corrente L√≠quida
# RP Cancelados de Transfer√™ncias Constitucionais e Legais

criterios_rreo_A03_rcl_rpcancelados_rcl <- list(
  
  # RP CANCELADOS DE TRANSFER√äNCIAS CONSTITUCIONAIS E LEGAIS
  `01 RP Cancelados de Transfer√™ncias Constitucionais e Legais` = list(
    criterio = "
    # CONDI√á√ÉO 1: A√ß√µes espec√≠ficas visualizadas no print
    acao_governo_codigo %in% c('0044', '0045', '006M', '0A53', '0C33') |
    
    # CONDI√á√ÉO 2: Programa que come√ßa com c√≥digo espec√≠fico (do SQL original)
    grepl('^28846090900RX', programa_governo_codigo) |
    
    # CONDI√á√ÉO 3: Combina√ß√£o de crit√©rios do SQL original
    (programa_governo_codigo %in% c('0903', '2030', '2080') & 
     modalidade_aplicacao_codigo %in% c(30, 31, 32, 35, 36, 40, 41, 42, 45, 46) & 
     acao_governo_codigo %in% c('0044', '0045', '0046', '0050', '0051', '00H6', '006M', 
                                '00G6', '0169', '0223', '0369', '0546', '0547', '0999', 
                                '099B', '0A53', '0C03', '0C33', '0E25', '0E36', '00PX', 
                                '00QR', '00S3', '00S7', '00S8', '00SE', '00RX', '00UH'))
    "
  )
)

datatable(aplicar_criterios(df = dados_rp_anexo_03_rcl %>% unique(), criterios_rreo_A03_rcl_rpcancelados_rcl))
```

------------------------------------------------------------------------

# üìã RREO Anexo 04 Previd√™ncia

O **Anexo 04** apresenta o demonstrativo das receitas e despesas previdenci√°rias do Governo Federal, segregado em tr√™s sistemas:

## üèõÔ∏è REGIME GERAL DE PREVID√äNCIA SOCIAL (RGPS)

### üí∞ Crit√©rios de Receitas RGPS

```{r criterios-receitas-rgps}

criterios_rreo_A04_rgps_receitas_rgps <- list(
  
  # RECEITAS CORRENTES - DOS EMPREGADORES, TRABALHADORES E DEMAIS SEGURADOS
  `01  Receitas Correntes - Dos Empregadores, Trabalhadores e Demais Segurados` = list(
    criterio = "natureza_receita_codigo_completo %in% c('12100311', '12100312', '12100313', '12100311') & nre2_origem_receita_codigo_origem %in% c(2)"
  ),
  
  # RECEITAS CORRENTES - DEMAIS CONTRIBUI√á√ïES  
  `02  Receitas Correntes - Demais Contribui√ß√µes` = list(
    criterio = "nre2_origem_receita_codigo_origem %in% c(2) & natureza_receita_codigo_completo %notin% c('12100311', '12100312', '12100313')"
  ),
  
  # OUTRAS RECEITAS CORRENTES - COMPENSA√á√ÉO PREVIDENCI√ÅRIA RPPS/RGPS
  `03  Outras Receitas Correntes - Compensa√ß√£o Previdenci√°ria RPPS/RGPS` = list(
    criterio = "nre2_origem_receita_codigo_origem %in% c(9)"
  ),
  
  # DEMAIS RECEITAS CORRENTES
  `04  Demais Receitas Correntes` = list(
    criterio = "nre1_categoria_economica_codigo %in% c(1) & nre2_origem_receita_codigo_origem %notin% c(2,9)"
  ),
  
  # RECEITAS DE CAPITAL - ALIENA√á√ïES
  `05  Receitas de Capital - Aliena√ß√µes` = list(
    criterio = "nre2_origem_receita_codigo_origem %in% c(2) & nre1_categoria_economica_codigo %in% c(2)"
  ),
  
  # DEMAIS RECEITAS DE CAPITAL
  `06  Demais Receitas de Capital` = list(
    criterio = "nre1_categoria_economica_codigo %in% c(2) & nre2_origem_receita_codigo_origem %notin% c(2)"
  ),
  
  # RECEITAS INTRA-OR√áAMENT√ÅRIAS
  `07  Receitas INTRA-OR√áAMENT√ÅRIAS` = list(
    criterio = "nre1_categoria_economica_codigo %in% c(7, 8)"
  )
)
```

### üí∏ Crit√©rios de Despesas RGPS

```{r criterios-despesas-rgps}
criterios_rreo_A04_rgps_despesas_rgps <- list(
  
  # APOSENTADORIAS
  `01  Aposentadorias` = list(
    criterio = "elemento_despesa_codigo %in% c('53', '54') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # PENS√ïES
  `02  Pens√µes` = list(
    criterio = "elemento_despesa_codigo %in% c('55', '56') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # OUTROS BENEF√çCIOS
  `03  Outros Benef√≠cios` = list(
    criterio = "elemento_despesa_codigo %in% c('57', '58') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # COMPENSA√á√ÉO PREVIDENCI√ÅRIA DO RGPS PARA O RPPS
  `04  Compensa√ß√£o Previdenci√°ria do RGPS para o RPPS` = list(
    criterio = "elemento_despesa_codigo %notin% c('57', '58', '53', '54', '55', '56') & acao_governo_codigo %in% c('009W', '0531') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # DEMAIS DESPESAS
  `05  Demais Despesas` = list(
    criterio = "elemento_despesa_codigo %notin% c('57', '58', '53', '54', '55', '56') & acao_governo_codigo %notin% c('009W', '0531') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # A DETALHAR
  `06  A detalhar` = list(
    criterio = "elemento_despesa_codigo %in% c('00') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # DESPESAS PREVIDENCI√ÅRIAS (INTRA)
  `07  Despesas Previdenci√°rias (INTRA)` = list(
    criterio = "grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %in% c('91') & elemento_despesa_codigo %notin% c('01', '03', '05')"
  )
)


```

### üìä Processamento RGPS - Receitas

```{r processar-rgps-receitas}

datatable(aplicar_criterios(df = dados_receita %>% 
    filter(
      unidade_orcamentaria_codigo %in% c(33904, 40904, 55902, 25917) | 
      natureza_receita_codigo_completo == 79900211), criterios_rreo_A04_rgps_receitas_rgps))




```

### üìä Processamento RGPS - Despesas

```{r processar-rgps-despesas}

datatable(aplicar_criterios(df = dados_despesa %>% 
    filter(unidade_orcamentaria_codigo %in% c(33904, 40904, 55902, 25917)), criterios_rreo_A04_rgps_despesas_rgps))


 
```

## üë• REGIME PR√ìPRIO DE PREVID√äNCIA SOCIAL (RPPS)

### üí∞ Crit√©rios de Receitas RPPS

```{r criterios-receitas-rpps}
criterios_rreo_A04_rpps_receitas_civil_militar_rpps <- list(
  
 # CIVIS - RECEITA SEGURADOS - Ativo (CORRIGIDO)
`01  CIVIS - RECEITA SEGURADOS - Ativo` = list(
  criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12100423', '12100421', '12100422', '12100424', '12100461', '12100462', '12100463', '12100464') | startsWith(natureza_receita_codigo_completo, '1215011') | startsWith(natureza_receita_codigo_completo, '1215014') | startsWith(natureza_receita_codigo_completo, '121503'))"
),

# CIVIS - RECEITA SEGURADOS - Inativos (CORRIGIDO)
`02  CIVIS - RECEITA SEGURADOS - Inativos` = list(
  criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12100431', '12100433', '12100432', '12100434', '12100471') | startsWith(natureza_receita_codigo_completo, '1215012') | startsWith(natureza_receita_codigo_completo, '1215015'))"
),

# CIVIS - RECEITAS SEGURADOS - Pensionistas (CORRIGIDO) 
`03  CIVIS - RECEITAS SEGURADOS - Pensionistas` = list(
  criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12100481', '12100441', '12100442', '12100443', '12100444') | startsWith(natureza_receita_codigo_completo, '1215013') | startsWith(natureza_receita_codigo_completo, '1215016'))"
),

# CIVIS - RECEITA PATRONAL - Ativo (CORRIGIDO)
`04  CIVIS - RECEITA PATRONAL - Ativo` = list(
  criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12100411', '12100413', '12100412', '12100414', '72100411', '72100413', '72100414', '72100451', '72100452', '12100452', '12100453', '12100454') | startsWith(natureza_receita_codigo_completo, '121502') | startsWith(natureza_receita_codigo_completo, '721502'))"
),

# CIVIS - RECEITA PATRONAL - Inativos e Pensionistas (J√Å CORRETO)
`05  CIVIS - RECEITA PATRONAL - Inativos e Pensionistas - vinculada` = list(
  criterio = "fonte_recursos_codigo %notin% c('00', '000') & natureza_receita_codigo_completo %in% c('72100441')"
),
  
  # DRU - FCDF
  `06  DRU - FCDF` = list(
    criterio = "fonte_recursos_codigo %in% c('000', '00') & endsWith(fonte_recursos_detalhada_codigo, '980001') & startsWith(natureza_receita_codigo_completo, '12151')"
  ),
  
  # MILITARES - RECEITAS - Segurados
  `07  MILITARES - RECEITAS - Segurados` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & 
(natureza_receita_codigo_completo %in% c('12100511', '12100512', '12100513', '12105141', '12150411', '12150412', '12150421', '12150043', '12150044') | 
startsWith(natureza_receita_codigo_completo, '121911'))"
  )
  
  # # Total das Receitas RPPS
  # `08  Total das Receitas RPPS` = list(
  #   criterio = "unidade_orcamentaria_codigo %notin% c('33904', '40904') & fonte_recursos_codigo %notin% c('54', '00', '000', '054') & (grepl('PENSOES MILIT|PENS.MIL|RPPS|CPSS|CIV', natureza_receita_nome, ignore.case = TRUE) | startsWith(natureza_receita_codigo_completo, '1215') | startsWith(natureza_receita_codigo_completo, '7215'))"
  # )
)
```

### üí∏ Crit√©rios de Despesas RPPS

```{r criterios-despesas-rpps}
criterios_rreo_A04_rpps_despesas_civil_militar_rpps <- list(
  
  # CIVIS - DESPESAS - A detalhar
  `01  CIVIS - DESPESAS - A detalhar` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('00') & acao_governo_codigo %in% c('0053', '0181') & funcao_governo_codigo %notin% c('10', '08')"
  ),
  
  # CIVIS - DESPESAS - Aposentadorias
  `02  CIVIS - DESPESAS - Aposentadorias` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('01') & acao_governo_codigo %in% c('0053', '0181')"
  ),
  
  # CIVIS - DESPESAS - Pens√µes
  `03  CIVIS - DESPESAS - Pens√µes` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('03') & acao_governo_codigo %in% c('0053', '0181')"
  ),
  
  # CIVIS - DESPESAS - Outros Benef√≠cios Previdenci√°rios
  `04  CIVIS - DESPESAS - Outros Benef√≠cios Previdenci√°rios` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845', '846') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %notin% c('00', '01', '03') & (acao_governo_codigo %in% c('0053', '0181', '0005', '0625') & funcao_governo_codigo %notin% c('10', '08') | acao_governo_codigo %in% c('0397'))"
  ),
  
  # MILITARES - DESPESAS - A Detalhar Pens√µes
  `05  MILITARES - DESPESAS - A Detalhar Pens√µes` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & acao_governo_codigo %in% c('0179', '000Q') & elemento_despesa_codigo %in% c('00')"
  ),
  
  # MILITARES - DESPESAS - Pens√µes
  `06  MILITARES - DESPESAS - Pens√µes` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845', '846') & grupo_despesa_codigo_grupo %in% c(1) & acao_governo_codigo %in% c('0179', '00QD') & elemento_despesa_codigo %in% c('03')"
  ),
  
  # MILITARES - DESPESAS - Outros Benef√≠cios Pensionistas
  `07  MILITARES - DESPESAS - Outros Benef√≠cios Pensionistas` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & acao_governo_codigo %in% c('214H', '218K', '0179', '00QD') & elemento_despesa_codigo %notin% c('00', '01', '03') & grupo_despesa_codigo_grupo %in% c(1)"
  ),
  
  
    # MILITARES - DESPESAS - A Detalhar Inativos
  `08  MILITARES - DESPESAS - A Detalhar Inativos` = list(
    criterio = "grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('00') & acao_governo_codigo %in% c('214H', '218K')"
  ),
  
  # MILITARES - DESPESAS - Inativos
  `09  MILITARES - DESPESAS - Inativos` = list(
    criterio = "grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('01') & acao_governo_codigo %in% c('214H', '218K')"
  ),
  

  
   # MILITARES - DESPESAS - Outros Outros Benef√≠cios Inativos
  `10  MILITARES - DESPESAS - Outros Outros Benef√≠cios Inativos` = list(
    criterio = "grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %notin% c( '00', '01') & acao_governo_codigo %in% c('214H', '218K')"
  )
)
```

### üìä Processamento RPPS - Receitas

```{r processar-rpps-receitas}

datatable(aplicar_criterios(df = dados_receita %>% 
    filter(
      unidade_orcamentaria_codigo %notin% c(73901),
      fonte_recursos_codigo %notin% c('054')
    ), criterios_rreo_A04_rpps_receitas_civil_militar_rpps))




```

verificar linha 08 Total das Receitas RPPS.

### üìä Processamento RPPS - Despesas

```{r processar-rpps-despesas}
# Processar despesas RPPS



datatable(aplicar_criterios(df = dados_despesa %>% 
    filter(
      unidade_orcamentaria_codigo %notin% c(73901),
      elemento_despesa_codigo %notin% c('04', '07', '11', '13', '16', '39', '67', '96'),
      acao_governo_codigo != '09HB'
    ), criterios_rreo_A04_rpps_despesas_civil_militar_rpps))




```

## üèõÔ∏è REGIME PR√ìPRIO DE PREVID√äNCIA SOCIAL - FCDF

### üí∞ Crit√©rios de Receitas FCDF

```{r criterios-receitas-fcdf}
criterios_rreo_A04_rpps_receitas_fcdf<- list(
  
  # FCDF - RECEITA SEGURADOS - Ativo
  `01  FCDF - RECEITA SEGURADOS - Ativo` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12100431', '12104211', '12104221', '12104231', '12104411', '12104421', '12104431', '12104611', '12104621', '12104631', '12191111', '12191321', '12191411') | startsWith(natureza_receita_codigo_completo, '121503') | startsWith(natureza_receita_codigo_completo, '1215011') | startsWith(natureza_receita_codigo_completo, '1215014'))"
  ),
  
  # FCDF - RECEITA SEGURADOS - Inativos
  `02  FCDF - RECEITA SEGURADOS - Inativos` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12104311', '12104321', '12104331', '12104341', '12104711') | startsWith(natureza_receita_codigo_completo, '1215012') | startsWith(natureza_receita_codigo_completo, '1215015'))"
  ),
  
  # FCDF - RECEITAS SEGURADOS - Pensionistas
  `03  FCDF - RECEITAS SEGURADOS - Pensionistas` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12104811', '12104411', '12104421', '12104431', '12104441', '12105121', '12105131') | startsWith(natureza_receita_codigo_completo, '1215013') | startsWith(natureza_receita_codigo_completo, '1215016'))"
  ),
  
  # FCDF - RECEITA PATRONAL - Ativo
  `04  FCDF - RECEITA PATRONAL - Ativo` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12104111', '12104131', '12104121', '12104141', '72104111', '72104121', '72104131', '72104141', '72104511', '72104521', '72104531', '72104541') | startsWith(natureza_receita_codigo_completo, '121502') | startsWith(natureza_receita_codigo_completo, '721502'))"
  ),
  
  # FCDF - RECEITA PATRONAL - Inativos e Pensionistas - vinculada
  `05  FCDF - RECEITA PATRONAL - Inativos e Pensionistas - vinculada` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & natureza_receita_codigo_completo %in% c('72104411', '12150211')"
  ),
  
  # DRU - FCDF
  `06  DRU - FCDF` = list(
    criterio = "fonte_recursos_codigo %in% c('00', '000') & (natureza_receita_codigo_completo %in% c('12104811', '12104411', '12104421', '12104431', '12104441', '12105111', '12104211', '12104221', '12104231', '12104311', '12104321', '12104331', '12104341', '12104521', '12104531', '12104621', '12104631', '12104721', '12104731', '12104741', '12104831', '12104841') | startsWith(natureza_receita_codigo_completo, '1215') | startsWith(natureza_receita_codigo_completo, '7215'))"
  ),
  
  # Total de Receitas RPPS FCDF
  `07  Total de Receitas RPPS FCDF` = list(
    criterio = "unidade_orcamentaria_codigo %notin% c('55902', '33904') & fonte_recursos_codigo %notin% c('54', '054') & fonte_recursos_detalhada_codigo %notin% c('010073910') & fonte_recursos_codigo %in% c('23', '56', '023', '056', '024', '069') & (grepl('PENSI|PENSO|RPPS|CPSS', natureza_receita_nome, ignore.case = TRUE))"
  )
)
```

### üí∏ Crit√©rios de Despesas FCDF

```{r criterios-despesas-fcdf}
criterios_rreo_A04_rpps_despesas_fcdf <- list(
  
  # FCDF - DESPESAS - A detalhar
  `01  FCDF - DESPESAS - A detalhar` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(1, 2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('00') & acao_governo_codigo %in% c('00Q2', '00QN', '00NS')"
  ),
  
  # FCDF - DESPESAS - Aposentadorias
  `02  FCDF - DESPESAS - Aposentadorias` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(1, 2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('01') & acao_governo_codigo %in% c('00Q2', '00QN', '00NS', '0312', '00NR')"
  ),
  
  # FCDF - DESPESAS - Pens√µes
  `03  FCDF - DESPESAS - Pens√µes` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(1, 2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('03') & acao_governo_codigo %in% c('00Q2', '00QN', '00NS', '0312', '00NR')"
  ),
  
  # FCDF - DESPESAS - Outros Benef√≠cios Previdenci√°rios
  `04  FCDF - DESPESAS - Outros Benef√≠cios Previdenci√°rios` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(1, 2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845', '846') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %notin% c('00', '01', '03') & (acao_governo_codigo %in% c('00Q2', '00NS', '00QN') | (acao_governo_codigo %in% c('0005', '0625') & funcao_governo_codigo %notin% c('10', '08')))"
  )
)
```

### üìä Processamento FCDF - Receitas

```{r processar-fcdf-receitas}

datatable(aplicar_criterios(df = dados_receita %>% 
    filter(unidade_orcamentaria_codigo %in% c(73901)),
    criterios_rreo_A04_rpps_receitas_fcdf))





```

### üìä Processamento FCDF - Despesas

```{r processar-fcdf-despesas}

datatable(aplicar_criterios(df = dados_despesa %>% 
    filter(
      unidade_orcamentaria_codigo %in% c(73901),
      elemento_despesa_codigo %notin% c('04', '07', '11', '13', '16', '39', '67', '96'),
      acao_governo_codigo != '09HB'
    ),
    criterios_rreo_A04_rpps_despesas_fcdf))




```

# üìã RREO Anexo 06 (Resultado Prim√°rio)

## Dados da DCL (RGF Anexo 02)

```{r dcl_para_anexo_06}

# ===============================================================================
# CRIT√âRIOS DCL - ORGANIZADOS POR BASE DE DADOS
# ===============================================================================

# ===============================================================================
# CRIT√âRIOS PARA DCL_1 (Dados Or√ßament√°rios)
# ===============================================================================
criterios_rgf_A02_dcl_1 <- list(
  
  `08 - PRECAT√ìRIOS POSTERIORES A 05/05/2000` = list(
    criterio = "
    conta_contabil_numero %in% c(631100000, 631200000, 631300000, 631510000, 631520000, 632100000, 
                                522110101, 522110201, 522110209, 522120101, 522120103, 522120201, 
                                522120202, 522120203, 522120301, 522120302, 522120303, 522190100, 
                                522190200, 522190300, 522190400, 522190101, 522190109, 522190201, 
                                522190209, 522190301, 522190309) &
    (acao_governo_codigo %in% c('0005', '00U9', '00UP', '0EC8', '0EC7', '00WU') |
     (unidade_orcamentaria_codigo == '71103' & acao_governo_codigo == '0Z01'))
    "
  ),
  
  `25 - RESTOS A PAGAR PROCESSADOS` = list(
    criterio = "
    acao_governo_codigo != '0005' &
    ((conta_contabil_numero %in% c(622920103, 622920107, 632100000, 631300000)) |
     (conta_contabil_numero %in% c(622920102, 622920106, 631200000) & 
      ug_executora_codigo != '170600'))
    "
  )
)

# ===============================================================================
# CRIT√âRIOS PARA DCL_2A (Dados Patrimoniais - Base Principal)
# ===============================================================================
criterios_rgf_A02_dcl_2a <- list(
  
  `02 - APLICA√á√ÉO EM T√çTULOS P√öBLICOS` = list(
    criterio = "
    str_starts(as.character(conta_contabil_numero), '1111150') &
    orgao_uge_tipo_administracao_codigo %in% c(3, 4, 5, 6, 8) &
    !conta_contabil_numero %in% c('111115005', '111115011', '111115012') &
    orgao_uge_codigo != '25901'
    "
  ),
  
  `05 - D√çVIDA MOBILI√ÅRIA EXTERNA` = list(
    criterio = "
    conta_contabil_numero %in% c(899913903, 899913904)
    "
  ),
  
  `06 - OPERA√á√ïES DE EQUALIZA√á√ÉO CAMBIAL` = list(
    criterio = "
    conta_contabil_numero %in% c(218912902, 218942902, 218952902, 218912901)
    "
  ),
  
  `07 - DEMAIS D√çVIDAS CONTRATUAIS` = list(
    criterio = "
    isf_lancamento %in% c('P') &
    (conta_contabil_numero %in% c(222210200, 212210300, 222110200, 212110301, 212110303, 212510103,
                                  212140303, 212150303, 212540103, 212550103, 212140301, 212150301,
                                  217310301, 217310602, 217350402, 227310301, 212110700, 212210601,
                                  212310201, 212310202, 212410201, 222310101, 222310102, 222410101,
                                  217710101, 227710101) |
     (conta_contabil_numero %in% c(227310401) & ug_executora_codigo != '170512'))
    "
  ),
  
  `10 - PASSIVOS POR INSUFICI√äNCIA DE RECURSOS` = list(
    criterio = "
    conta_contabil_numero %in% c(211110101, 211419800, 223110100, 211210100, 213140400, 
                                213150400, 214119900, 213110400, 211449800, 211459800) &
    (is.na(isf_lancamento) | isf_lancamento %in% c('P'))
    "
  ),
  
  `11 - DEP√ìSITOS DO TN (EM BCB) - DEDU√á√ÉO` = list(
    criterio = "
    str_starts(as.character(conta_contabil_numero), '1111102') |
    str_starts(as.character(conta_contabil_numero), '1111103') |
    str_starts(as.character(conta_contabil_numero), '1111104')
    "
  ),
  
  `12 - DEP√ìSITOS √Ä VISTA - DEDU√á√ÉO` = list(
    criterio = "
    (str_starts(as.character(conta_contabil_numero), '1111119') |
     str_starts(as.character(conta_contabil_numero), '1112102') |
     str_starts(as.character(conta_contabil_numero), '1112103') |
     str_starts(as.character(conta_contabil_numero), '1112150') |
     str_starts(as.character(conta_contabil_numero), '1112152')) &
    orgao_uge_codigo != '25901' &
    ug_executora_codigo != '380916'
    "
  ),
  
  `13 - DISPONIBILIDADE FAT - DEDU√á√ÉO` = list(
    criterio = "
    ug_executora_codigo == '380916' &
    (str_starts(as.character(conta_contabil_numero), '1111119') |
     str_starts(as.character(conta_contabil_numero), '1124103') |
     str_starts(as.character(conta_contabil_numero), '1135407') |
     str_starts(as.character(conta_contabil_numero), '1135113') |
     str_starts(as.character(conta_contabil_numero), '1135115') |
     str_starts(as.character(conta_contabil_numero), '1124101') |
     str_starts(as.character(conta_contabil_numero), '1135111') |
     str_starts(as.character(conta_contabil_numero), '1135107') |
     str_starts(as.character(conta_contabil_numero), '11121') |
     str_starts(as.character(conta_contabil_numero), '1135114') |
     str_starts(as.character(conta_contabil_numero), '1135112') |
     str_starts(as.character(conta_contabil_numero), '1135116') |
     str_starts(as.character(conta_contabil_numero), '1211503') |
     str_starts(as.character(conta_contabil_numero), '1211403') |
     str_starts(as.character(conta_contabil_numero), '1211103') |
     str_starts(as.character(conta_contabil_numero), '1135507') |
     str_starts(as.character(conta_contabil_numero), '1212105') |
     conta_contabil_numero %in% c(111115009, 111115011, 111115014, 111115015, 111115016, 111115006))
    "
  ),
  
  `14 - APLICA√á√ïES EM FUNDOS DIVERSOS 1 - DEDU√á√ÉO` = list(
    criterio = "
    conta_contabil_numero == 111215100 &
    !orgao_uge_codigo %in% c('37904', '25915')
    "
  ),
  
  `15 - APLICA√á√ïES EM FUNDOS DIVERSOS 2 - DEDU√á√ÉO` = list(
    criterio = "
    orgao_uge_tipo_administracao_codigo == 7 &
    !orgao_uge_codigo %in% c('37904', '25915') &
    str_starts(as.character(conta_contabil_numero), '23')
    "
  ),
  
  `16 - APLICA√á√ïES EM FUNDOS DIVERSOS 3 - DEDU√á√ÉO` = list(
    criterio = "
    orgao_uge_tipo_administracao_codigo %in% c(7) &
    !orgao_uge_codigo %in% c('37904', '25915') &
    (str_starts(as.character(conta_contabil_numero), '1111102') |
     str_starts(as.character(conta_contabil_numero), '1111103') |
     str_starts(as.character(conta_contabil_numero), '1111104') |
     conta_contabil_numero %in% c(111210200, 111210300, 111215000, 111215200) |
     (str_starts(as.character(conta_contabil_numero), '1111119') & 
      ug_executora_codigo != '380916') |
     c_con_subgrupo_3_nome %in% c('INVESTIMENTOS', 'IMOBILIZADO', 'INTANGIVEL', 'DIFERIDO'))
    "
  ),
  
  `24 - RESULTADO POSITIVO TN/BCB - DEDU√á√ÉO` = list(
    criterio = "
    conta_contabil_numero %in% c(113813001, 113813002)
    "
  ),
  
  `26 - D√çVIDA MOBILI√ÅRIA TN INTERNA (INTRA) - DEDU√á√ÉO` = list(
    criterio = "
    conta_contabil_numero == 222120101
    "
  )
)

# ===============================================================================
# CRIT√âRIOS PARA DCL_2B (Dados Patrimoniais - Base Espec√≠fica)
# ===============================================================================
criterios_rgf_A02_dcl_2b <- list(
  
  `01 - D√çVIDA MOBILI√ÅRIA TN INTERNA - PARTE 1` = list(
    criterio = "
    conta_contabil_numero %in% c('899913900', '899913901', '899913902', '899913903', 
                                '899913904', '899913905', '899913906') &
    entidade_c_cor_numero %in% c('DP1000001', 'DP1400001', 'DP1500001', 'DP1700001', 
                                'DP1800001', 'DP2000001', 'DP2300007', 'DP2400001', 
                                'DP2600001', 'DP2800001', 'DP3000001', 'DP3400001', 
                                'DP5000001', 'DP5500001', 'DP5800001', 'DP6100001', 
                                'DP6200001', 'DP6300001', 'DP6600001', 'DP7000001', 
                                'DP8000001', 'DP9000001', 'DP1200001')
    "
  ),
  
  `01 - D√çVIDA MOBILI√ÅRIA TN INTERNA - PARTE 2` = list(
    criterio = "
    conta_contabil_numero %in% c('899913900', '899913901', '899913902', '899913903', 
                                '899913904', '899913905', '899913906') &
    entidade_c_cor_numero == 'DP9102001'
    "
  ),
  
  `03 - D√çVIDA MOBILI√ÅRIA DO TN (EM BCB)` = list(
    criterio = "
    conta_contabil_numero %in% c('899913901', '899913902', '899913907', '899913908') &
    entidade_c_cor_numero %in% c('DP1500010', 'DP1700010', 'DP1800010', 'DP2300010', 
                                'DP5500010', 'DP7000010', 'DP9000010', 'DP3201450')
    "
  ),
  
  `04 - D√çVIDA SECURITIZADA` = list(
    criterio = "
    (conta_contabil_numero %in% c('899913900', '899913901', '899913902', '899913903', 
                                 '899913904', '899913905', '899913906') &
     entidade_c_cor_numero %in% c('DP3100001', 'DP3200001', 'DP3200002', 'DP3201031', 
                                 'DP3201032', 'DP3201059', 'DP3201077', 'DP3201078', 
                                 'DP3201080', 'DP3201081', 'DP3201145', 'DP3201202', 
                                 'DP3201222', 'DP3201228', 'DP3201233', 'DP3201250', 
                                 'DP3201256', 'DP3201257', 'DP3201258', 'DP3201259', 
                                 'DP3201260', 'DP3201262', 'DP3201271', 'DP3201272', 
                                 'DP3201275', 'DP3201276', 'DP3201277', 'DP3201280', 
                                 'DP3201281', 'DP3201296', 'DP3201299', 'DP3201362', 
                                 'DP3201368', 'DP3201378', 'DP3201390')) |
    conta_contabil_numero %in% c('212110202', '222110102')
    "
  ),
  
  `09 - D√çVIDA ASSUMIDA PELA UNI√ÉO` = list(
    criterio = "
    ug_executora_codigo == '170512' &
    conta_contabil_numero %in% c('218912600', '228911600', '227310401') &
    isf_lancamento == 'P' &
    conta_corrente != 'PF1705118'
    "
  ),
  
  `17 - D√çVIDAS RENEGOCIADAS - DEDU√á√ÉO` = list(
    criterio = "
    ug_executora_codigo == '170512' &
    conta_contabil_numero %in% c('121110301', '112410100', '121110318', '112410600', 
                                '121140301', '121150301', '112440100', '112450100', 
                                '121140318', '121150318', '112440600', '112450600', 
                                '112410401', '112450401', '112440401', '121249818', 
                                '113814200', '113844200', '113854200') &
    (entidade_c_cor_numero %in% c('PF1705320', 'PF1705524', 'PF1705528', 'PF1705546', 
                                 'PF1705547', 'PF1705548', 'PF1705406', 'PF1705525', 
                                 'PF1705529', 'PF1705544', 'PF1705545') |
     str_detect(entidade_c_cor_nome, '9.496/97') |
     str_detect(entidade_c_cor_nome, '2.185/2001'))
    "
  ),
  
  `18 - CR√âDITOS LEI 8.727/93 - DEDU√á√ÉO` = list(
    criterio = "
    ug_executora_codigo == '170512' &
    conta_contabil_numero %in% c('121110301', '112410100', '121110318', '112410600', 
                                '121140301', '121150301', '112440100', '112450100', 
                                '121140318', '121150318', '112440600', '112450600', 
                                '112410401', '121219818', '112450401', '112440401', 
                                '121249818', '113814200', '113844200', '113854200') &
    (entidade_c_cor_numero %in% c('PF1705109', 'PF1705536', 'TN0000016', 'TN0000017') |
     str_detect(entidade_c_cor_nome, '8.727/93'))
    "
  ),
  
  `19 - D√çVIDA EXTERNA RENEGOCIADA - DEDU√á√ÉO` = list(
    criterio = "
    ug_executora_codigo == '170512' &
    conta_contabil_numero %in% c('121110301', '112410100', '121110318', '112410600', 
                                '121140301', '121150301', '112440100', '112450100', 
                                '121140318', '121150318', '112440600', '112450600', 
                                '112410401', '121219818', '112450401', '112440401', 
                                '121249818', '113844200', '113814200', '113854200', 
                                '121259818') &
    (entidade_c_cor_numero %in% c('PF1705104', 'PF1705114', 'PF1705117', 'PF1705521', 
                                 'PF1705534', 'PF1705116', 'PF1705531', 'PF1705532', 
                                 'PF1705113', 'PF1701536', 'PF1705520', 'PF1705533', 
                                 'PF1705464', 'PF1705534', 'PF1705119', 'PF1705384') |
     str_detect(entidade_c_cor_nome, 'DMLP') |
     str_detect(entidade_c_cor_nome, 'FRANCA') |
     str_detect(entidade_c_cor_nome, 'EXTER') |
     str_detect(entidade_c_cor_nome, 'FRAN√áA') |
     str_detect(entidade_c_cor_nome, 'MF 030') |
     str_detect(entidade_c_cor_nome, 'BIB'))
    "
  ),
  
  `20 - DEMAIS D√çVIDAS RENEGOCIADAS - DEDU√á√ÉO` = list(
    criterio = "
    ug_executora_codigo == '170512' &
    conta_contabil_numero %in% c('121110301', '112410100', '121110318', '112410600', 
                                '121140301', '121150301', '112440100', '112450100', 
                                '121140318', '121150318', '112440600', '112450600', 
                                '112410401', '112450401', '112440401', '121249818', 
                                '113844200', '113814200', '113854200', '121259818')
    "
  ),
  
  `21 - AJUSTES PARA PERDAS (POSITIVO)` = list(
    criterio = "
    ug_executora_codigo == '170512' &
    conta_contabil_numero %in% c('112940401', '112950401', '113940101', '112910401', 
                                '113950101', '121119902', '121149904', '121159904', 
                                '121119904', '121249903', '121259903')
    "
  ),
  
  `22 - OUTROS CR√âDITOS BANC√ÅRIOS - DEDU√á√ÉO` = list(
    criterio = "
    ug_executora_codigo %in% c('170705', '170526', '170700') &
    conta_contabil_numero %in% c('112410301', '112410303', '112440301', '112450301', 
                                '112440303', '112450303', '112410100', '121110301', 
                                '121110314', '121110308', '121140301', '121150301', 
                                '121140308', '121150308', '112411300', '121110316', 
                                '121110320', '112410302', '112410304', '112410201', 
                                '112410203', '112410403', '121110312')
    "
  ),
  
  `23 - OUTROS CR√âDITOS BANC√ÅRIOS - AJUSTES (POSITIVO)` = list(
    criterio = "
    ug_executora_codigo %in% c('170705', '170526', '170700') &
    conta_contabil_numero %in% c('112910401', '121119904', '121119907', '112910403')
    "
  )
)


datatable(aplicar_criterios(dcl_1, criterios_rgf_A02_dcl_1))

datatable(aplicar_criterios(dcl_2a, criterios_rgf_A02_dcl_2a))

datatable(aplicar_criterios(dcl_2b, criterios_rgf_A02_dcl_2b))


```

## Processamento Anexo 06

```{r criterio_anexo_06}
# ===============================================================================
# CRIT√âRIOS RREO ANEXO 6 - DESMEMBRADOS POR DATAFRAME
# ===============================================================================

# ===============================================================================
# 1. RECEITAS PRIM√ÅRIAS (dados_receita)
# ===============================================================================
criterios_rreo_A06_receitas_A06 <- list(
  
  # RECEITAS CORRENTES (I) - Total
  `01  Receitas Correntes (I)` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  ),
  
  # IMPOSTOS, TAXAS E CONTRIBUI√á√ïES DE MELHORIA (Subitem)
  `02  ___Impostos, Taxas e Contribui√ß√µes de Melhoria` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 1 & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  ),
  
  # CONTRIBUI√á√ïES (Subitem)
  `03  ___Contribui√ß√µes` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 2 & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  ),
  
  # RECEITA PATRIMONIAL (Subitem)
  `04  ___Receita Patrimonial` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 3 & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  ),
  
  # APLICA√á√ïES FINANCEIRAS (II) - DEDU√á√ÉO (Sub-subitem)
  `05  ______Aplica√ß√µes Financeiras (II)` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    (natureza_receita_codigo_completo %in% c('13210101', '13210201', '13210301', '13210501') |
     startsWith(natureza_receita_codigo_completo, '1321004') |
     startsWith(natureza_receita_codigo_completo, '1329001')) & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  ),
  
  # OUTRAS RECEITAS PATRIMONIAIS (Sub-subitem)
  `06  ______Outras Receitas Patrimoniais` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 3 & 
    !(natureza_receita_codigo_completo %in% c('13210101', '13210201', '13210301', '13210501') |
      startsWith(natureza_receita_codigo_completo, '1321004') |
      startsWith(natureza_receita_codigo_completo, '1329001')) & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  ),
  
  # TRANSFER√äNCIAS CORRENTES (Subitem)
  `07  ___Transfer√™ncias Correntes` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    nre2_origem_receita_codigo_origem == 7 & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  ),
  
  # DEMAIS RECEITAS CORRENTES (Subitem)
  `08  ___Demais Receitas Correntes` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    (startsWith(natureza_receita_codigo_completo, '14') |
     startsWith(natureza_receita_codigo_completo, '15') |
     startsWith(natureza_receita_codigo_completo, '16') |
     startsWith(natureza_receita_codigo_completo, '18') |
     startsWith(natureza_receita_codigo_completo, '19')) & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  ),
  
  # OUTRAS RECEITAS FINANCEIRAS (III) - DEDU√á√ÉO (Sub-subitem)
  `09  ______Outras Receitas Financeiras (III)` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    (natureza_receita_codigo_completo %in% c('16410101', '16410102', '19991101', '19991102', '16410301') |
     startsWith(natureza_receita_codigo_completo, '1922012') |
     startsWith(natureza_receita_codigo_completo, '1990992')) & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  ),
  
  # RECEITAS CORRENTES RESTANTES (Sub-subitem - calculado)
  `10  ___Receitas Correntes Restantes` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & 
    (startsWith(natureza_receita_codigo_completo, '14') |
     startsWith(natureza_receita_codigo_completo, '15') |
     startsWith(natureza_receita_codigo_completo, '16') |
     startsWith(natureza_receita_codigo_completo, '18') |
     startsWith(natureza_receita_codigo_completo, '19')) & 
    !(natureza_receita_codigo_completo %in% c('16410101', '16410102', '19991101', '19991102', '16410301') |
      startsWith(natureza_receita_codigo_completo, '1922012') |
      startsWith(natureza_receita_codigo_completo, '1990992')) & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  ),
  
  # RECEITAS DE CAPITAL (V) - Total
  `11  Receitas de Capital (V)` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  ),
  
  # OPERA√á√ïES DE CR√âDITO (VI) - DEDU√á√ÉO (Subitem)
  `12  ___Opera√ß√µes de Cr√©dito (VI)` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem == 1 & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  ),
  
  # AMORTIZA√á√ÉO DE EMPR√âSTIMOS (VII) - DEDU√á√ÉO (Subitem)
  `13  ___Amortiza√ß√£o de Empr√©stimos (VII)` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem == 3 & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  ),
  
  # ALIENA√á√ïES DE BENS (Subitem)
  `14  ___Aliena√ß√µes de Bens` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem == 2 & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  ),
  
  # OUTRAS ALIENA√á√ïES DE BENS (Sub-subitem - igual a aliena√ß√µes)
  `15  ______Outras Aliena√ß√µes de Bens` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem == 2 & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  ),
  
  # TRANSFER√äNCIAS DE CAPITAL (Subitem)
  `16  ___Transfer√™ncias de Capital` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem == 4 & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  ),
  
  # OUTRAS RECEITAS DE CAPITAL (Subitem)
  `17  ___Outras Receitas de Capital` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    nre2_origem_receita_codigo_origem %in% c(5, 6, 7, 8, 9) & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  ),
  
  # OUTRAS RECEITAS DE CAPITAL N√ÉO PRIM√ÅRIAS (X) - DEDU√á√ÉO (Sub-subitem)
  `18  ______Outras Receitas de Capital N√£o Prim√°rias (X)` = list(
    criterio = "
    nre1_categoria_economica_codigo == 2 & 
    (startsWith(natureza_receita_codigo_completo, '292') |
     startsWith(natureza_receita_codigo_completo, '293') |
     startsWith(natureza_receita_codigo_completo, '294')) & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 5
    "
  )
)

# ===============================================================================
# 2. DESPESAS PRIM√ÅRIAS - CATEGORIA/GRUPO (dados_categoria_grupo)
# ===============================================================================
criterios_rreo_A06_despesas_categoria_grupo_A06 <- list(
  
  # DESPESAS CORRENTES (XIII)
  `01  Despesas Correntes (XIII)` = list(
    criterio = "
    categoria_economica_despesa_codigo == 3 & 
    !acao_governo_codigo %in% c('0021', '0029', '0030', '0031', '0061', '006A', '0427', 
                               '0534', '0A81', '0A84', '2130', '0062', '00DD', '00S5', 
                               '20GI', '006C', '00ED', '00EE', '00SG')
    "
  ),
  
  # PESSOAL E ENCARGOS SOCIAIS (Subitem de Correntes)
  `02  ___Pessoal e Encargos Sociais` = list(
    criterio = "
    categoria_economica_despesa_codigo == 3 & 
    grupo_despesa_codigo_grupo == 1 & 
    !acao_governo_codigo %in% c('0021', '0029', '0030', '0031', '0061', '006A', '0427', 
                               '0534', '0A81', '0A84', '2130', '0062', '00DD', '00S5', 
                               '20GI', '006C', '00ED', '00EE', '00SG')
    "
  ),
  
  # JUROS E ENCARGOS DA D√çVIDA (XIV) - DEDU√á√ÉO (Subitem de Correntes)
  `03  ___Juros e Encargos da D√≠vida (XIV)` = list(
    criterio = "
    categoria_economica_despesa_codigo == 3 & 
    grupo_despesa_codigo_grupo == 2 & 
    !acao_governo_codigo %in% c('0021', '0029', '0030', '0031', '0061', '006A', '0427', 
                               '0534', '0A81', '0A84', '2130', '0062', '00DD', '00S5', 
                               '20GI', '006C', '00ED', '00EE', '00SG')
    "
  ),
  
  # OUTRAS DESPESAS CORRENTES (Subitem de Correntes)
  `04  ___Outras Despesas Correntes` = list(
    criterio = "
    categoria_economica_despesa_codigo == 3 & 
    grupo_despesa_codigo_grupo == 3 & 
    !acao_governo_codigo %in% c('0021', '0029', '0030', '0031', '0061', '006A', '0427', 
                               '0534', '0A81', '0A84', '2130', '0062', '00DD', '00S5', 
                               '20GI', '006C', '00ED', '00EE', '00SG')
    "
  ),
  
  # DESPESAS DE CAPITAL (XVI)
  `05  Despesas de Capital (XVI)` = list(
    criterio = "
    categoria_economica_despesa_codigo == 4 & 
    !acao_governo_codigo %in% c('0021', '0029', '0030', '0031', '0061', '006A', '0427', 
                               '0534', '0A81', '0A84', '2130', '0062', '00DD', '00S5', 
                               '20GI', '006C', '00ED', '00EE', '00SG')
    "
  ),
  
  # INVESTIMENTOS (Subitem de Capital)
  `06  ___Investimentos` = list(
    criterio = "
    categoria_economica_despesa_codigo == 4 & 
    grupo_despesa_codigo_grupo == 4 & 
    !acao_governo_codigo %in% c('0021', '0029', '0030', '0031', '0061', '006A', '0427', 
                               '0534', '0A81', '0A84', '2130', '0062', '00DD', '00S5', 
                               '20GI', '006C', '00ED', '00EE', '00SG')
    "
  ),
  
  # INVERS√ïES FINANCEIRAS (Subitem de Capital)
  `07  ___Invers√µes Financeiras` = list(
    criterio = "
    categoria_economica_despesa_codigo == 4 & 
    grupo_despesa_codigo_grupo == 5 & 
    !acao_governo_codigo %in% c('0021', '0029', '0030', '0031', '0061', '006A', '0427', 
                               '0534', '0A81', '0A84', '2130', '0062', '00DD', '00S5', 
                               '20GI', '006C', '00ED', '00EE', '00SG')
    "
  ),
  
  # AMORTIZA√á√ÉO DA D√çVIDA (XX) - DEDU√á√ÉO (Subitem de Capital)
  `08  ___Amortiza√ß√£o da D√≠vida (XX)` = list(
    criterio = "
    categoria_economica_despesa_codigo == 4 & 
    grupo_despesa_codigo_grupo == 6 & 
    !acao_governo_codigo %in% c('0021', '0029', '0030', '0031', '0061', '006A', '0427', 
                               '0534', '0A81', '0A84', '2130', '0062', '00DD', '00S5', 
                               '20GI', '006C', '00ED', '00EE', '00SG')
    "
  )
)

# ===============================================================================
# 3. DESPESAS PRIM√ÅRIAS - NATUREZA DETALHADA (dados_ndd)
# ===============================================================================
criterios_rreo_A06_despesas_natureza_detalhada_A06 <- list(
  
  # TRANSFER√äNCIAS CONSTITUCIONAIS E LEGAIS (Subitem de Outras Despesas Correntes)
  `01  ______Transfer√™ncias Constitucionais e Legais` = list(
    criterio = "
    (startsWith(natureza_despesa_detalhada_codigo, '333081') | 
     startsWith(natureza_despesa_detalhada_codigo, '334081')) & 
    !acao_governo_codigo %in% c('0021', '0029', '0030', '0031', '0061', '006A', '0427', 
                               '0534', '0A81', '0A84', '2130', '0062', '00DD', '00S5', 
                               '20GI', '006C', '00ED', '00EE', '00SG')
    "
  ),
  
  # CONCESS√ÉO DE EMPR√âSTIMOS E FINANCIAMENTOS (XVII) - Subitem de Invers√µes Financeiras
  `02  ______Concess√£o de Empr√©stimos e Financiamentos (XVII)` = list(
    criterio = "
    natureza_despesa_detalhada_codigo %in% c('45909206', '45909208', '45909266') & 
    !acao_governo_codigo %in% c('0021', '0029', '0030', '0031', '0061', '006A', '0427', 
                               '0534', '0A81', '0A84', '2130', '0062', '00DD', '00S5', 
                               '20GI', '006C', '00ED', '00EE', '00SG')
    "
  )
)

# ===============================================================================
# 4. TRANSFER√äNCIAS E SUBS√çDIOS (dados_despesa)
# ===============================================================================
criterios_rreo_A06_transferencias_subsidios_A06 <- list(
  
  # TRANSFER√äNCIAS CONSTITUCIONAIS E LEGAIS (30 A√á√ïES)
  `01  Transfer√™ncias Constitucionais e Legais (30 A√ß√µes)` = list(
    criterio = "
    acao_governo_codigo %in% c('0044', '0045', '0046', '0050', '0051', '00D0', '00G6', '00H6', 
                              '0169', '0223', '0369', '0546', '0547', '0999', '099B', '0A53', 
                              '0C03', '0E25', '0E36', '00PX', '0C33', '006M', '00QR', '00RX', 
                              '00S3', '00S7', '00S8', '00SE', '00SB', '00UH') & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 56
    "
  ),
  
  # SUBS√çDIOS E SUBVEN√á√ïES (19 A√á√ïES)
  `02  Subs√≠dios e Subven√ß√µes (19 A√ß√µes)` = list(
    criterio = "
    acao_governo_codigo %in% c('0021', '0029', '0030', '0031', '0061', '006A', '0427', 
                              '0534', '0A81', '0A84', '2130', '0062', '00DD', '00S5', 
                              '20GI', '006C', '00ED', '00EE', '00SG') & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    item_informacao_codigo == 56
    "
  )
)

# ===============================================================================
# 5. DISPONIBILIDADES (tg_RPN_disponibilidades)
# ===============================================================================
criterios_rreo_A06_disponibilidades_A06 <- list(
  
  # DISPONIBILIDADES - RECURSOS A CLASSIFICAR
  `01  Disponibilidades - Recursos a Classificar` = list(
    criterio = "
    fonte_recursos_codigo %in% c('77', '490') & 
    orgao_uge_tipo_administracao_codigo != 7
    "
  ),
  
  # DISPONIBILIDADES - RECURSOS DIVERSOS
  `02  Disponibilidades - Recursos Diversos` = list(
    criterio = "
    fonte_recursos_codigo %in% c('90', '491') & 
    orgao_uge_tipo_administracao_codigo != 7
    "
  )
)

# ===============================================================================
# 6. JUROS ATIVOS E PASSIVOS (dados_juros)
# ===============================================================================
criterios_rreo_A06_juros_ativos_passivos_A06 <- list(
  
  # JUROS ATIVOS (CONTAS 34XXX + ESPEC√çFICAS)
  `01  Juros Ativos` = list(
    criterio = "
    substr(conta_contabil_numero, 1, 5) %in% c('34111', '34113', '34114', '34115', '34121', '34131', 
                                              '34141', '34181', '34183', '34184', '34185', '34191',
                                              '34211', '34213', '34214', '34215', '34221', '34291') |
    conta_contabil_numero %in% c('445110100', '445210100')
    "
  ),
  
  # JUROS PASSIVOS (CONTAS 44XXX)
  `02  Juros Passivos` = list(
    criterio = "
    substr(conta_contabil_numero, 1, 5) %in% c('44111', '44113', '44114', '44115', '44121', '44131', 
                                              '44133', '44134', '44135', '44141', '44211', '44213', 
                                              '44214', '44215', '44221')
    "
  ),
  
  # FUNDOS - FILTRO ESPEC√çFICO PARA JUROS
  `03  Fundos - Juros (Filtro Espec√≠fico)` = list(
    criterio = "
    orgao_uge_tipo_administracao_codigo == '7' & 
    orgao_uge_orcam_fiscal_s_n == 'PERTENCE' & 
    ug_executora_codigo != '380916' & 
    !orgao_uge_codigo %in% c('25915', '37904')
    "
  )
)
```

```{r processar_resultado_primario}


 aplicar_criterios(
       df =  dados_categoria_grupo %>% filter(mes_lancamento == mes_filtro),
        criterios = criterios_rreo_A06_despesas_categoria_grupo_A06
      )
 
 
  aplicar_criterios(
       df =  dados_receita,
        criterios = criterios_rreo_A06_receitas_A06
      )

 


aplicar_criterios(
       df =  dados_ndd,
        criterios = criterios_rreo_A06_despesas_natureza_detalhada_A06 )



aplicar_criterios(
       df =  dados_juros,
        criterios = criterios_rreo_A06_juros_ativos_passivos_A06
      ) 




(aplicar_criterios( 
    df =  tg_RPN_disponibilidades,
        criterios =criterios_rreo_A06_disponibilidades_A06))
  
  
 
  


```

# üìã RREO Anexo 07 - Restos a Pagar

## üìù Descri√ß√£o

Este anexo apresenta os Restos a Pagar classificados por:

-   **Tipo de Modalidade**: Intragovernamental vs Exceto Intragovernamental
-   **√ìrg√£o**: M√°ximo da estrutura organizacional
-   **Situa√ß√£o**: Processados e N√£o Processados

## üéØ Processamento dos Dados

### 

### Defini√ß√£o dos Agrupamentos

```{r agrupamentos_anexo_07}
#| echo: true

# Definir colunas de agrupamento
agrupado_despesa_tipo_modalidade_orgao <- c(
  "tipo_modalidade", 
  "orgao_uge_orgao_maximo_codigo", 
  "orgao_uge_orgao_maximo_nome"
)

print("‚úÖ Agrupamentos definidos:")
print(agrupado_despesa_tipo_modalidade_orgao)
```

## üìà Tabela Principal - Restos a Pagar por Modalidade e √ìrg√£o

```{r tabela_anexo_07}
#| echo: true
#| eval: true

# Processar e exibir tabela principal usando fun√ß√µes centralizadas
dt_formatada(
  tabela_pivotada(dados_rp_anexo_07 %>% filter(mes_lancamento == mes_filtro), agrupado_despesa_tipo_modalidade_orgao), 
  agrupado_despesa_tipo_modalidade_orgao
)
```

# üìö RREO Anexo 08 - MDE {#sec-anexo-08}

## üìù Descri√ß√£o

Este anexo apresenta as **Receitas e Despesas com Manuten√ß√£o e Desenvolvimento do Ensino (MDE)**, incluindo:

-   üìä **Classifica√ß√£o por categoria** conforme crit√©rios espec√≠ficos
-   üí∞ **C√°lculo da RLI** (Receita L√≠quida de Impostos)
-   üéØ **Percentual de aplica√ß√£o** em MDE
-   üìã **An√°lise de transfer√™ncias constitucionais**

## üéØ Defini√ß√£o dos Crit√©rios

### Crit√©rios de Educa√ß√£o

```{r criterios_educacao}
#| echo: true

# Definir a lista de crit√©rios para classifica√ß√£o das despesas MDE
criterios_rreo_A08_mde_despesas <- list(
  `01 - COMPLEMENTA√á√ÉO DA UNI√ÉO AO FUNDEB` = list(
    criterio = "acao_governo_codigo %in% c('00SB', '0E36')"
  ),
  `03 - EDUCA√á√ÉO B√ÅSICA` = list(
    criterio = "fonte_recursos_codigo %notin% c('008', '035', '133', '134', '213', '242') & iduso_codigo == 8 & elemento_despesa_codigo %notin% c('01', '03', '59') & subfuncao_governo_codigo == '368'"
  ),
  `04 - ENSINO SUPERIOR` = list(
    criterio = "fonte_recursos_codigo %notin% c(157, 175, 193, 109, 134, 181) & iduso_codigo == 8 & elemento_despesa_codigo %notin% c('01', '03', '59') & subfuncao_governo_codigo %in% c('364')"
  ),
  `05 - ENSINO PROFISSIONAL N√ÉO INTEGRADO AO ENSINO REGULAR` = list(
    criterio = "fonte_recursos_codigo %notin% c('008', '035', '133', '134') & iduso_codigo == 8 & elemento_despesa_codigo %notin% c('01', '03', '59') & subfuncao_governo_codigo == '363'"
  ),
  `06 - OUTRAS` = list(
    criterio = "fonte_recursos_codigo %notin% c('008', '035', '133', '134') & iduso_codigo == 8 & elemento_despesa_codigo %notin% c('01', '03', '59') & !subfuncao_governo_codigo %in% c('363', '364', '368') & acao_governo_codigo %notin% c('00SB', '0E36')"
  ),
  `08 - COMPLEMENTA√á√ÉO DA UNI√ÉO - VAAF` = list(
    criterio = "acao_governo_codigo %in% c('00SB', '0E36') & fonte_recursos_codigo %notin% c('133', '134', '213', '008', '035', '212') & plano_orcamentario_codigo_po == '0001'"
  ),
  `09 - COMPLEMENTA√á√ÉO DA UNI√ÉO - VAAT` = list(
    criterio = "acao_governo_codigo %in% c('00SB', '0E36') & fonte_recursos_codigo %notin% c('133', '134', '213', '008', '035', '212') & plano_orcamentario_codigo_po %in% c('0002') | fonte_recursos_codigo %notin% c('008') & plano_orcamentario_codigo_po %in% c('0003') & funcao_governo_codigo == '12' & subfuncao_governo_codigo == '847' & programa_governo_codigo == 5111 & acao_governo_codigo == '00SB' & unidade_orcamentaria_codigo == '26298' "
  ),
  `09b - VAAT po 26298 12 847 5111 00SB 0003` = list(
    criterio = "fonte_recursos_codigo %notin% c('008') & plano_orcamentario_codigo_po %in% c('0003') & funcao_governo_codigo == '12' & subfuncao_governo_codigo == '847' & programa_governo_codigo == 5111 & acao_governo_codigo == '00SB' & unidade_orcamentaria_codigo == '26298'"
  ),
  `11 - DESPESAS CUSTEADAS COM A CONTRIBUI√á√ÉO SOCIAL DO SAL√ÅRIO-EDUCA√á√ÉO` = list(
    criterio = "fonte_recursos_codigo %in% c('133', '134', '213', '008', '035', '212') & iduso_codigo == 8 & acao_governo_codigo %notin% c('00SB', '0E36')"
  ),
  `12 - DESPESAS COM O FUNDO CONSTITUCIONAL DO DISTRITO FEDERAL - FCDF` = list(
    criterio = "acao_governo_codigo %in% c('0312') & fonte_recursos_codigo %notin% c('133', '134', '213', '008', '035', '212')"
  ),
  `13 - DESPESAS CUSTEADAS COM RECEITAS DE ROYALTIES DE EXPLORA√á√ÉO DO PR√â-SAL` = list(
    criterio = "fonte_recursos_codigo %in% c('242') & iduso_codigo == 8 & elemento_despesa_codigo %in% c('01', '03', '59')"
  ),
  `14 - DEMAIS DESPESAS COM EDUCA√á√ÉO` = list(
    criterio = "iduso_codigo == 8 & fonte_recursos_codigo %in% c('008', '035', '133', '134', '213', '050', '000') & elemento_despesa_codigo %in% c('01', '03', '59') & acao_governo_codigo %notin% c('00SB', '0312', '0E36')"
  )
)

datatable(aplicar_criterios(dados_despesa, criterios_rreo_A08_mde_despesas))
```

## üí∞ C√°lculo da Receita L√≠quida de Impostos (RLI)

### Receitas Base para RLI

```{r receitas_rli}
#| echo: true
#| eval: true




# Receitas que comp√µem a base da RLI (impostos)
receitas_base_rli <- dados_receita %>% 
  filter(
    item_informacao_codigo == "5",
    startsWith(natureza_receita_codigo_completo, '711') | 
    startsWith(natureza_receita_codigo_completo, "111")
  ) %>% 
  group_by(mes_lancamento) %>% 
  summarise(
    receita = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  )

# kable(receitas_base_rli, 
#       caption = "üí∞ Receitas Base para RLI por M√™s",
#       col.names = c("M√™s", "Receita (R$)"),
#       format = "html") %>%
#   kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
```

### Transfer√™ncias Constitucionais

```{r transferencias_anexo_08}
#| echo: true
#| eval: true

# Classificar transfer√™ncias constitucionais
rli_transf <- dados_despesa %>% 
  filter(item_informacao_codigo == "56") %>% 
  mutate(
    transferencia = case_when(
      acao_governo_codigo == "0044" ~ "FPE",
      acao_governo_codigo == "0045" ~ "FPM", 
      acao_governo_codigo == "0046" ~ "IPI_repasse",
      acao_governo_codigo == "0C33" ~ "FUNDEB",
      acao_governo_codigo == "00H6" ~ "IOF_repasse",
      acao_governo_codigo == "006M" ~ "ITR_repasse",
      .default = "demais"
    )
  ) %>% 
  group_by(transferencia, mes_lancamento) %>%  
  summarise(
    valor_transferencia = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  )

# Mostrar transfer√™ncias por tipo
transferencias_resumo <- rli_transf %>%
  group_by(transferencia) %>%
  summarise(
    total = sum(valor_transferencia, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(total)) %>%
  mutate(total_formatado = formatar_numero(total))


```

### C√°lculo da RLI Mensal

```{r rli_mensal}
#| echo: true
#| eval: true

# Consolidar transfer√™ncias (exceto "demais")
transferencias_consolidadas <- rli_transf %>% 
  filter(transferencia != "demais") %>% 
  group_by(mes_lancamento) %>% 
  summarise(
    transferencia_total = sum(valor_transferencia, na.rm = TRUE),
    .groups = "drop"
  )

# Calcular RLI mensal
rli_mensal <- full_join(
  receitas_base_rli, 
  transferencias_consolidadas, 
  by = "mes_lancamento"
) %>%
  mutate(
    transferencia_total = ifelse(is.na(transferencia_total), 0, transferencia_total),
    receita = ifelse(is.na(receita), 0, receita),
    rli = (receita - transferencia_total) * 0.18
  ) %>%
  # Ordenar por m√™s corretamente
  mutate(
    mes_ordenacao = case_when(
      str_detect(mes_lancamento, "JAN") ~ 1,
      str_detect(mes_lancamento, "FEV") ~ 2,
      str_detect(mes_lancamento, "MAR") ~ 3,
      str_detect(mes_lancamento, "ABR") ~ 4,
      str_detect(mes_lancamento, "MAI") ~ 5,
      str_detect(mes_lancamento, "JUN") ~ 6,
      str_detect(mes_lancamento, "JUL") ~ 7,
      str_detect(mes_lancamento, "AGO") ~ 8,
      str_detect(mes_lancamento, "SET") ~ 9,
      str_detect(mes_lancamento, "OUT") ~ 10,
      str_detect(mes_lancamento, "NOV") ~ 11,
      str_detect(mes_lancamento, "DEZ") ~ 12,
      TRUE ~ 99
    )
  ) %>%
  arrange(mes_ordenacao) %>%
  select(-mes_ordenacao) %>%
  mutate(
    receita_formatada = formatar_numero(receita),
    transferencia_formatada = formatar_numero(transferencia_total),
    rli_formatado = formatar_numero(rli)
  )

# Exibir com DT::datatable
DT::datatable(
  rli_mensal %>% 
    select(mes_lancamento, receita_formatada, transferencia_formatada, rli_formatado),
  colnames = c("M√™s", "Receita Base", "Transfer√™ncias", "RLI (18%)"),
  caption = "üìä Receita L√≠quida de Impostos (RLI) Mensal",
  rownames = FALSE,
  options = list(
    pageLength = 15,
    dom = 'ft',
    columnDefs = list(
      list(className = 'dt-left', targets = "_all")  # Alinhar tudo √† esquerda
    ),
    language = list(
      url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese.json'
    )
  )
) %>%
  DT::formatStyle(
    columns = c("receita_formatada", "transferencia_formatada", "rli_formatado"),
    textAlign = 'right'  # N√∫meros √† direita
  ) %>%
  DT::formatStyle(
    columns = "mes_lancamento",
    textAlign = 'left',   # M√™s √† esquerda
    fontWeight = 'bold'
  )
```

## üéØ Aplica√ß√£o M√≠nima em MDE

### RLI do Per√≠odo de Refer√™ncia

```{r rli_periodo}
#| echo: true
#| eval: true

# RLI espec√≠fica do m√™s de refer√™ncia
rli_atual <- rli_mensal %>% 
  filter(mes_lancamento == mes_filtro) %>% 
  summarise(minimo_mde = sum(rli, na.rm = TRUE)) %>%
  pull(minimo_mde)

print(paste("üìÖ RLI para", mes_filtro, ":", formatar_numero(rli_atual)))
```

### Despesas MDE do Per√≠odo

```{r despesas_mde}

# Despesas MDE das categorias principais (02, 03, 04, 05, 06)
datatable(despesa_mde <- aplicar_criterios(dados_despesa, criterios_rreo_A08_mde_despesas) %>% 
  filter(
    item_informacao_codigo == 25, mes_lancamento == mes_filtro,
    ordem %in% c(
      "03",
      "04", 
      "05",
      "06"
    )
  ) %>% 
  summarise(valor = sum(valor, na.rm = TRUE)) )

print(paste("üí∞ Despesas MDE principais:", (despesa_mde)))
```

### Complementa√ß√£o FUNDEB

```{r complementacao_fundeb}
#| echo: true
#| eval: true

# Complementa√ß√£o FUNDEB (30% da complementa√ß√£o da Uni√£o)
complementacao_fundeb <- dados_despesa %>% 
  filter(
    item_informacao_codigo == 25, 
    mes_lancamento == mes_filtro,
    fonte_recursos_codigo %in% c('000',  '014', '130'), 
    acao_governo_codigo %in% c('0E36', '00SB')
  ) %>% 
  summarise(comp_fundeb = sum(saldo_r_item_informacao, na.rm = TRUE) * 0.3) %>%
  pull(comp_fundeb)

print(paste("üéØ Complementa√ß√£o FUNDEB (30%):", formatar_numero(complementacao_fundeb)))
```

### Restos a Pagar MDE

```{r rp_mde}
#| echo: true
#| eval: true

# AJUSTADO: Agrupado por item de informa√ß√£o
despesa_mde_rp_detalhado <- dados_rp_anexo_08 %>%
  filter(
    mes_lancamento == mes_filtro,  
    !elemento_despesa_codigo %in% c('01', '03'),
    (
      (fonte_recursos_codigo %in% c('000', '012', '00', '12') & 
       (iduso_codigo == 8 | lei_calmon_s_n == 'SIM')) |
      (ne_c_cor_ano_emissao >= 2020 & 
       !fonte_recursos_codigo %in% c('133', '134', '213', '08', '13', '93') & 
       iduso_codigo == 8)
    )
  ) %>%
  group_by(item_informacao_codigo, item_informacao_nome) %>%
  summarise(
    valor = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(item_informacao_codigo)

# Total consolidado para c√°lculos
despesa_mde_rp <- sum(despesa_mde_rp_detalhado$valor, na.rm = TRUE)

print("üìã Restos a Pagar MDE por Item de Informa√ß√£o:")
print(despesa_mde_rp_detalhado)
print(paste("üìã Total RP MDE:", formatar_numero(despesa_mde_rp)))
```

## üìä C√°lculo do Percentual de Aplica√ß√£o

```{r percentual_aplicacao}
#| echo: true
#| eval: true

# C√°lculo do percentual total aplicado em MDE
total_despesas_mde <- despesa_mde + complementacao_fundeb
percentual_aplicacao <- (as.numeric(total_despesas_mde) / as.numeric(rli_atual)) *100

# Fun√ß√£o para formatar valores em R$ (com as.numeric para dataframes)
formatar_real <- function(valor) {
  paste0("R$ ", format(as.numeric(valor), big.mark = ".", decimal.mark = ",", scientific = FALSE))
}

# Tabela resumo
resumo_aplicacao <- data.frame(
  Item = c(
    "üí∞ Despesas MDE Principais",
    "üéØ Complementa√ß√£o FUNDEB (30%)",
    "üìã Restos a Pagar MDE",
    "üìä Total Despesas MDE",
    "üìà 18% da RLI (Base de C√°lculo)",
    "üéØ Percentual Aplicado"),
  
  Valor = c(
    formatar_real(despesa_mde),
    formatar_real(complementacao_fundeb),
    formatar_real(despesa_mde_rp),
    formatar_real(total_despesas_mde),
    formatar_real(rli_atual),
    paste0(round(as.numeric(percentual_aplicacao), 2), "%")
  ),
  Status = c(
    "‚úÖ Calculado",
    "‚úÖ Calculado", 
    "‚úÖ Calculado",
    "‚úÖ Consolidado",
    "‚úÖ Base",
    ifelse(as.numeric(percentual_aplicacao) >= 100, "‚úÖ Atendido", "‚ùå N√£o Atendido")
  ),
  stringsAsFactors = FALSE
)


# Renderizar tabela
kable(resumo_aplicacao, 
      caption = "üéØ Resumo da Aplica√ß√£o em MDE",
      format = "html",
      col.names = c("Item", "Valor", "Status"),
      align = c("l", "r", "c")) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE
  ) %>%
  row_spec(0, bold = TRUE, background = "#f8f9fa") %>%
  row_spec(6, bold = TRUE, 
           background = ifelse(as.numeric(percentual_aplicacao) >= 100, "#d4edda", "#f8d7da"),
           color = ifelse(as.numeric(percentual_aplicacao) >= 100, "#155724", "#721c24")) %>%
  column_spec(2, width = "200px")

# Resultado resumido
cat("\n=== RESULTADO FINAL ===\n")
cat("Total de Despesas MDE: R$", format(as.numeric(total_despesas_mde), big.mark = ".", decimal.mark = ","), "\n")
cat("18% da RLI (Base): R$", format(as.numeric(rli_atual), big.mark = ".", decimal.mark = ","), "\n")
cat("Percentual Aplicado:", round(as.numeric(percentual_aplicacao), 2), "%\n")
cat("Situa√ß√£o:", ifelse(as.numeric(percentual_aplicacao) >= 100, "‚úÖ ATENDE", "‚ùå N√ÉO ATENDE"), "ao m√≠nimo constitucional\n")
```

# üìã RREO Anexo 12 - Sa√∫de.

## üìã Introdu√ß√£o

O **Anexo 12 do RREO** apresenta o demonstrativo das receitas e despesas com a√ß√µes e servi√ßos p√∫blicos de sa√∫de do Governo Federal, conforme estabelecido pela Emenda Constitucional n¬∫ 29/2000 e regulamentado pela Lei Complementar n¬∫ 141/2012.

Este relat√≥rio consolida informa√ß√µes sobre: - **Despesas Computadas**: Aplica√ß√µes diretas e transfer√™ncias nas subfun√ß√µes espec√≠ficas de sa√∫de - **Despesas N√£o Computadas**: Despesas do Minist√©rio da Sa√∫de n√£o computadas para o limite constitucional - **An√°lise por Modalidade**: Separa√ß√£o entre aplica√ß√£o direta e transfer√™ncias - **Indicadores de Cumprimento**: Verifica√ß√£o do atendimento aos limites constitucionais

## üè• Processamento das Despesas com Sa√∫de

### 1. Despesas Computadas - Subfun√ß√µes Espec√≠ficas

```{r despesas-saude-especificas}
# Filtrar despesas das subfun√ß√µes espec√≠ficas de sa√∫de (301-306)
despesas_saude <- dados_despesa %>% 
  filter(
    mes_lancamento == mes_filtro, 
    iduso_codigo == 6, 
    item_informacao_codigo == 25, 
    subfuncao_governo_codigo %in% c(301, 302, 303, 304, 305, 306)
  ) %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome, 
    categoria_economica_despesa_codigo,
    categoria_economica_despesa_nome, 
    modalidade_aplicacao_codigo
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop")

# Classificar por tipo de aplica√ß√£o
despesas_saude <- despesas_saude %>% 
  mutate(
    transferencia = ifelse(
      modalidade_aplicacao_codigo %in% c('30', '31', '32', '35', '36', '40', '41', '42', '45', '46'), 
      "_transferencia", 
      "aplicacao_direta"
    )
  )

# Criar tabela consolidada INCLUINDO LINHAS COM ZERO
tabela_saude_especificas <- despesas_saude %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome,
    categoria_economica_despesa_codigo, 
    categoria_economica_despesa_nome, 
    transferencia
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop") %>%
  # MANTER TODAS AS LINHAS, incluindo as com valor zero
  filter(TRUE)  # N√£o filtrar valores zero

# Exibir tabela
DT::datatable(
  tabela_saude_especificas,
  caption = "Despesas com Sa√∫de - Subfun√ß√µes Espec√≠ficas (301-306) - Incluindo Valores Zero",
  options = list(
    pageLength = 20,  # Aumentar para mostrar mais linhas
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  )
) %>%
  DT::formatRound("saldo_r_item_informacao", 2, mark = ".", dec.mark = ",")

# Calcular total das subfun√ß√µes espec√≠ficas
total_subfuncoes_especificas <- sum(despesas_saude$saldo_r_item_informacao)
cat("\nüí∞ **Total das Subfun√ß√µes Espec√≠ficas de Sa√∫de:** R$", 
    format(total_subfuncoes_especificas, big.mark = ".", decimal.mark = ","), "\n")
```

### 2. Despesas em Outras Subfun√ß√µes (Demais)

```{r despesas-saude-demais}
# Calcular despesas em outras subfun√ß√µes
despesas_saude_demais <- as.numeric(
  dados_despesa %>% 
  filter(
    mes_lancamento == mes_filtro, 
    iduso_codigo == 6, 
    item_informacao_codigo == 25, 
    subfuncao_governo_codigo %notin% c(301, 302, 303, 304, 305, 306)
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao))
)

cat("üí∞ **Total das Demais Subfun√ß√µes de Sa√∫de:** R$", 
    format(despesas_saude_demais, big.mark = ".", decimal.mark = ","), "\n")

# Total geral das despesas computadas
total_despesas_computadas <- total_subfuncoes_especificas + despesas_saude_demais
cat("üí∞ **Total Geral das Despesas Computadas:** R$", 
    format(total_despesas_computadas, big.mark = ".", decimal.mark = ","), "\n\n")
```

### 3. An√°lise Consolidada de Todas as Despesas

```{r despesas-saude-consolidada}
# Processar todas as despesas de sa√∫de com agrupamento
despesas_saude_completa <- dados_despesa %>% 
  filter(
    mes_lancamento == mes_filtro, 
    iduso_codigo == 6, 
    item_informacao_codigo == 25
  ) %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome, 
    categoria_economica_despesa_codigo,
    categoria_economica_despesa_nome, 
    modalidade_aplicacao_codigo
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop")

# Reclassificar subfun√ß√µes e modalidades
despesas_saude_completa <- despesas_saude_completa %>% 
  mutate(
    subfuncao_governo_codigo = case_when(
      subfuncao_governo_codigo %in% c(301, 302, 303, 304, 305, 306) ~ as.character(subfuncao_governo_codigo),
      TRUE ~ "demais"
    ),
    subfuncao_governo_nome = case_when(
      subfuncao_governo_codigo %in% c("301", "302", "303", "304", "305", "306") ~ subfuncao_governo_nome,
      TRUE ~ "demais"
    ),
    transferencia = ifelse(
      modalidade_aplicacao_codigo %in% c('30', '31', '32', '35', '36', '40', '41', '42', '45', '46'), 
      "_transferencia", 
      "aplicacao_direta"
    )
  )

# Criar tabela consolidada final INCLUINDO VALORES ZERO
tabela_consolidada <- despesas_saude_completa %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome,
    categoria_economica_despesa_codigo, 
    categoria_economica_despesa_nome, 
    transferencia
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop") %>%
  # MANTER TODAS AS LINHAS, incluindo as com valor zero
  arrange(subfuncao_governo_codigo, categoria_economica_despesa_codigo, transferencia)

# Exibir tabela consolidada
DT::datatable(
  tabela_consolidada %>% adorn_totals(),
  caption = "Despesas com Sa√∫de - An√°lise Consolidada (Incluindo Valores Zero)",
  options = list(
    pageLength = 25,  # Aumentar para mostrar mais linhas
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  )
) %>%
  DT::formatRound("saldo_r_item_informacao", 2, mark = ".", dec.mark = ",")

# Total consolidado em milhares
total_consolidado <- sum(despesas_saude_completa$saldo_r_item_informacao) / 1000
cat("\nüí∞ **Total Consolidado das Despesas com Sa√∫de:** R$", 
    format(total_consolidado, big.mark = ".", decimal.mark = ","), "mil\n")
```

## üö´ Despesas N√£o Computadas

### Despesas do Minist√©rio da Sa√∫de N√£o Computadas

```{r despesas-nao-computadas}
# Filtrar despesas n√£o computadas do Minist√©rio da Sa√∫de
despesa_saude_nao_computadas <- dados_despesa %>% 
  filter(
    mes_lancamento == mes_filtro, 
    iduso_codigo != 6, 
    item_informacao_codigo == 25,
    uo_orgao_superior_codigo == "36000", 
    unidade_orcamentaria_codigo != "74202"
  ) %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome, 
    categoria_economica_despesa_codigo,
    categoria_economica_despesa_nome, 
    modalidade_aplicacao_codigo
  ) %>%  
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop")

# Reclassificar para an√°lise
despesa_saude_nao_computadas <- despesa_saude_nao_computadas %>% 
  mutate(
    subfuncao_governo_codigo = case_when(
      subfuncao_governo_codigo %in% c(301, 302, 303, 304, 305, 306) ~ as.character(subfuncao_governo_codigo),
      TRUE ~ "demais"
    ),
    subfuncao_governo_nome = case_when(
      subfuncao_governo_codigo %in% c("301", "302", "303", "304", "305", "306") ~ subfuncao_governo_nome,
      TRUE ~ "demais"
    ),
    transferencia = ifelse(
      modalidade_aplicacao_codigo %in% c('30', '31', '32', '35', '36', '40', '41', '42', '45', '46'), 
      "_transferencia", 
      "aplicacao_direta"
    )
  )

# Tabela das despesas n√£o computadas INCLUINDO VALORES ZERO
tabela_nao_computadas <- despesa_saude_nao_computadas %>% 
  group_by(
    subfuncao_governo_codigo, 
    subfuncao_governo_nome,
    categoria_economica_despesa_codigo, 
    categoria_economica_despesa_nome, 
    transferencia
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao), .groups = "drop") %>%
  # MANTER TODAS AS LINHAS, incluindo as com valor zero
  arrange(subfuncao_governo_codigo, categoria_economica_despesa_codigo, transferencia)

# Exibir tabela
DT::datatable(
  tabela_nao_computadas,
  caption = "Despesas do Minist√©rio da Sa√∫de N√ÉO Computadas para o Limite (Incluindo Valores Zero)",
  options = list(
    pageLength = 20,  # Aumentar para mostrar mais linhas
    scrollX = TRUE,
    language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json')
  )
) %>%
  DT::formatRound("saldo_r_item_informacao", 2, mark = ".", dec.mark = ",")
```

```         
```

# üìã RREO Tabela 01

A **Tabela 01** apresenta o demonstrativo da receita e despesa or√ßament√°ria, sendo um dos principais instrumentos de acompanhamento da execu√ß√£o or√ßament√°ria do Governo Federal.

## üéØ Objetivo

-   Demonstrar a evolu√ß√£o das receitas e despesas or√ßament√°rias
-   Acompanhar o cumprimento das metas fiscais
-   Permitir an√°lise comparativa entre per√≠odos

## üí∞ RECEITAS OR√áAMENT√ÅRIAS

```{r criterios_receitas}
# ======================================
# CRIT√âRIOS DA TABELA 1 - RECEITAS
# ======================================

criterios_rreo_T01_receitas <- list(
  
  # === RECEITAS CORRENTES ===
  
  # Receita Tribut√°ria
  `01  Receita Tribut√°ria` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 1) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 1)"
  ),
  
  # Receita de Contribui√ß√µes
  `02  Receita de Contribui√ß√µes` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 2) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 2)"
  ),
  
  # Receita Patrimonial
  `03  Receita Patrimonial` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 3) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 3)"
  ),
  
  # Receita Agropecu√°ria
  `04  Receita Agropecu√°ria` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 4"
  ),
  
  # Receita Industrial
  `05  Receita Industrial` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 5) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 5)"
  ),
  
  # Receita de Servi√ßos
  `06  Receita de Servi√ßos` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 6) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 6)"
  ),
  
  # Transfer√™ncias Correntes
  `07  Transfer√™ncias Correntes` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 7"
  ),
  
  # Receitas Correntes a Classificar
  `08  Receitas Correntes a Classificar` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 8"
  ),
  
  # Outras Receitas Correntes
  `09  Outras Receitas Correntes` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 9) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 9)"
  ),
  
  # === RECEITAS DE CAPITAL ===
  
  # Opera√ß√µes de Cr√©dito
  `10  Opera√ß√µes de Cr√©dito` = list(
    criterio = "(nre1_categoria_economica_codigo == 2 & nre2_origem_receita_codigo_origem == 1) | (nre1_categoria_economica_codigo == 8 & nre2_origem_receita_codigo_origem == 1)"
  ),
  
  # Aliena√ß√£o de Bens
  `11  Aliena√ß√£o de Bens` = list(
    criterio = "(nre1_categoria_economica_codigo == 2 & nre2_origem_receita_codigo_origem == 2) | (nre1_categoria_economica_codigo == 8 & nre2_origem_receita_codigo_origem == 2)"
  ),
  
  # Transfer√™ncias de Capital
  `12  Transfer√™ncias de Capital` = list(
    criterio = "nre1_categoria_economica_codigo == 2 & nre2_origem_receita_codigo_origem == 4"
  ),
  
  # Outras Receitas de Capital
  `13  Outras Receitas de Capital` = list(
    criterio = "(nre1_categoria_economica_codigo == 2 & nre2_origem_receita_codigo_origem == 5) | (nre1_categoria_economica_codigo == 8 & nre2_origem_receita_codigo_origem == 5)"
  ),
  
  # SUBTOTAL (I) - Receitas Correntes + Receitas de Capital - Intra-or√ßament√°rias
  `14  SUBTOTAL (I)` = list(
    criterio = "nre1_categoria_economica_codigo %in% c(1, 2, 7, 8)"
  )
)
```

```{r processar-receitas}
# Processar dados de receitas



datatable(aplicar_criterios(
  df = dados_receita %>% filter(esfera_orcamentaria_codigo == 2) %>% unique(),
  criterios = criterios_rreo_T01_receitas
))


```

## üí∏ DESPESAS OR√áAMENT√ÅRIAS

```{r criterios-despesas}
# ======================================
# CRIT√âRIOS DA TABELA 1 - DESPESAS
# ======================================

criterios_rreo_T01_despesas_T01 <- list(
  
  # === DESPESAS CORRENTES ===
  
  # Pessoal e Encargos Sociais
  `01  Pessoal e Encargos Sociais` = list(
    criterio = "grupo_despesa_codigo_grupo == '1'"
  ),
  
  # Juros e Encargos da D√≠vida
  `02  Juros e Encargos da D√≠vida` = list(
    criterio = "grupo_despesa_codigo_grupo == '2'"
  ),
  
  # Outras Despesas Correntes
  `03  Outras Despesas Correntes` = list(
    criterio = "grupo_despesa_codigo_grupo == '3'"
  ),
  
  # Benef√≠cios Previdenci√°rios
  `04  Benef√≠cios Previdenci√°rios` = list(
    criterio = "grupo_despesa_codigo_grupo == '3' & unidade_orcamentaria_codigo %in% c('55902', '40904', '33904', '25917')"
  ),
  
  # Transfer√™ncias
  `05  Transfer√™ncias` = list(
    criterio = "grupo_despesa_codigo_grupo == '3' & modalidade_aplicacao_codigo %in% c('30', '31', '35', '36', '40', '41', '42', '45')"
  ),
  
  # Demais Despesas Correntes
  `06  Demais Despesas Correntes` = list(
    criterio = "
    grupo_despesa_codigo_grupo == '3' & 
    !unidade_orcamentaria_codigo %in% c('55902', '40904', '33904', '25917') &
    !modalidade_aplicacao_codigo %in% c('30', '31', '35', '36', '40', '41', '42', '45')
    "
  ),
  
  # === DESPESAS DE CAPITAL ===
  
  # Investimentos
  `07  Investimentos` = list(
    criterio = "grupo_despesa_codigo_grupo == '4'"
  ),
  
  # Invers√µes Financeiras
  `08  Invers√µes Financeiras` = list(
    criterio = "grupo_despesa_codigo_grupo == '5'"
  ),
  
  # Amortiza√ß√£o da D√≠vida
  `09  Amortiza√ß√£o da D√≠vida` = list(
    criterio = "grupo_despesa_codigo_grupo == '6'"
  ),
  
  # RESERVA DE CONTING√äNCIA
  `10  RESERVA DE CONTING√äNCIA` = list(
    criterio = "grupo_despesa_codigo_grupo == '9'"
  ),
  
  # SUBTOTAL (III) - Total das Despesas
  `11  SUBTOTAL (III)` = list(
    criterio = "grupo_despesa_codigo_grupo %in% c('1', '2', '3', '4', '5', '6', '9')"
  )
)
```

```{r processar-despesas}
# Processar dados de despesas
datatable(aplicar_criterios(
  df = dados_despesa %>% filter(esfera_orcamentaria_codigo == 2) %>% unique(),
  criterios = criterios_rreo_T01_despesas_T01
))


```

## üìä Tabela 01A - Detalhamento das Receitas

```{r criterios-tabela1a}
# ======================================
# CRIT√âRIOS DA TABELA 1A - COLUNAS 2025
# ======================================
criterios_rreo_T01a_receita_prevista_T01 <- list(
  
  # === PREVIS√ÉO ATUALIZADA (a) ===
  
  # Previs√£o Atualizada da Receita
  `PREVISAO_ATUALIZADA` = list(
    criterio = "
    natureza_receita_codigo_completo %in% c('12100111', '12100121', '12100131', '12100211', '12102121', '12102131', 
                                            '12106511', '12106611', '12106711', '12107211', '12107411', '12107611',
                                            '12108111', '12109131', '12101011', '12101311', '12101411', '12101611',
                                            '12106131', '12106211', '12106411', '12106511', '12106611', '12106711',
                                            '12110051', '12110061', '12106211', '12100511', '12106311', '12106711',
                                            '12104211', '12104311', '12101051') &
    fonte_recursos_codigo == '000' &
    esfera_orcamentaria_codigo == '1'
    "
  ),
  
  # === RECEITAS REALIZADAS NO M√äS ===
  
  # Receita Or√ßament√°ria Arrecadada no M√™s
  `RECEITA_REALIZADA_MES` = list(
    criterio = "
    fonte_recursos_codigo == '000' &
    (endsWith(fonte_recursos_detalhada_codigo, '98001') | endsWith(fonte_recursos_detalhada_codigo, '73910'))
    "
  ),
  
  # === RECEITAS REALIZADAS AT√â O M√äS ===
  
  # Receita Or√ßament√°ria Arrecadada Acumulada
  `RECEITA_REALIZADA_ACUMULADA` = list(
    criterio = "
    fonte_recursos_codigo == '000' &
    (endsWith(fonte_recursos_detalhada_codigo, '98001') | endsWith(fonte_recursos_detalhada_codigo, '73910'))
    "
  )
)
```

```{r processar-tabela1a}
# Processar Tabela 01A
datatable(aplicar_criterios(
  df = dados_receita %>% filter(esfera_orcamentaria_codigo == 2) %>% unique(),
  criterios = criterios_rreo_T01a_receita_prevista_T01
))


```

## üè• Seguridade Social

```{r criterios-seguridade}
# Crit√©rios para an√°lise da Seguridade Social
criterios_rreo_T01B_seguridade_T01B <- list(
  
  # SA√öDE
  `01  Sa√∫de` = list(
    criterio = "iduso_codigo %in% c('6') & funcao_governo_codigo %notin% c('08')"
  ),
  
  # RGPS - UNIDADE OR√áAMENT√ÅRIA  
  `02  RGPS - Receitas da Previd√™ncia Social` = list(
    criterio = "unidade_orcamentaria_codigo %in% c('33904', '40404', '35902', '29917')"
  ),
  
  # ASSIST√äNCIA SOCIAL
  `03  Assist√™ncia Social` = list(
    criterio = "funcao_governo_codigo %in% c('08') & acao_governo_codigo %notin% c('0581', '0544', '0563', '0658', '0585', '0653', '0636')"
  ),
  
  # ABONO SALARIAL
  `04  Abono Salarial` = list(
    criterio = "acao_governo_codigo %in% c('0581')"
  ),
  
  # SEGURO DESEMPREGO
  `05  Seguro Desemprego` = list(
    criterio = "acao_governo_codigo %in% c('00H4', '0583', '0585', '0686', '0653')"
  )
)
```

```{r processar-seguridade}
# Processar dados da Seguridade Social
datatable(aplicar_criterios(
  df = dados_despesa %>% filter(esfera_orcamentaria_codigo == 2) %>% unique(),
  criterios = criterios_rreo_T01B_seguridade_T01B
))


```

# üìã RREO Tabela 02

A **Tabela 02** apresenta o demonstrativo das despesas por fun√ß√£o de governo, discriminando por tipo de administra√ß√£o (Direta e Indireta), fornecendo uma vis√£o detalhada da aplica√ß√£o dos recursos p√∫blicos.

## üéØ Objetivo

-   Demonstrar a execu√ß√£o das despesas por categorias funcionais
-   Segregar despesas entre aplica√ß√£o direta e transfer√™ncias
-   Detalhar gastos com pessoal civil e militar
-   Acompanhar transfer√™ncias intergovernamentais

## üìä Crit√©rios da Tabela 02

```{r criterios-tabela02}
# ======================================
# CRIT√âRIOS DA TABELA 02 -
# ======================================

criterios_rreo_T02_despesas_T02 <- list(
  
  # APLICA√á√ÉO DIRETA (ser√° calculado por soma dos subitens)
  `01  Aplica√ß√£o Direta` = list(
    criterio = "FALSE"  # Ser√° calculado por soma posterior
  ),
  
  # A DETALHAR
  `02  A Detalhar` = list(
    criterio = "elemento_despesa_codigo %in% c('00')"
  ),
  
  # PESSOAL CIVIL (ser√° calculado por soma dos subitens)
  `03  Pessoal Civil` = list(
    criterio = "FALSE"  # Ser√° calculado por soma posterior
  ),
  
  # PESSOAL CIVIL - VENCIMENTOS E VANTAGENS FIXAS
  `04  Pessoal Civil - Vencimentos e Vantagens Fixas` = list(
    criterio = "elemento_despesa_codigo %in% c('11')"
  ),
  
  # PESSOAL CIVIL - OUTRAS DESPESAS VARI√ÅVEIS
  `05  Pessoal Civil - Outras Despesas Vari√°veis` = list(
    criterio = "elemento_despesa_codigo %in% c('16')"
  ),
  
  # PESSOAL CIVIL - APOSENTADORIA
  `06  Pessoal Civil - Aposentadoria` = list(
    criterio = "elemento_despesa_codigo %in% c('01') & (orgao_uge_orgao_maximo_codigo %notin% c('52000') | (orgao_uge_orgao_maximo_codigo %in% c('52000') & acao_governo_codigo %in% c('0181')))"
  ),
  
  # PESSOAL CIVIL - PENS√ïES
  `07  Pessoal Civil - Pens√µes` = list(
    criterio = "elemento_despesa_codigo %in% c('03') & (orgao_uge_orgao_maximo_codigo %notin% c('52000') | (orgao_uge_orgao_maximo_codigo %in% c('52000') & acao_governo_codigo %in% c('0181')))"
  ),
  
  # PESSOAL CIVIL - CONTRIBUI√á√ïES A ENTIDADES FECHADAS DE PREVID√äNCIA
  `08  Pessoal Civil - Contribui√ß√µes a Entidades Fechadas de Previd√™ncia` = list(
    criterio = "elemento_despesa_codigo %in% c('07') & orgao_uge_orgao_maximo_codigo %notin% c('52000')"
  ),
  
  # PESSOAL CIVIL - OBRIGA√á√ïES PATRONAIS
  `09  Pessoal Civil - Obriga√ß√µes Patronais` = list(
    criterio = "elemento_despesa_codigo %in% c('13') & orgao_uge_orgao_maximo_codigo %notin% c('52000')"
  ),
  
  # PESSOAL CIVIL - OUTRAS APLICA√á√ïES
  `10  Pessoal Civil - Outras Aplica√ß√µes` = list(
    criterio = "
    (elemento_despesa_codigo %notin% c('00', '01', '03') & 
     orgao_uge_orgao_maximo_codigo %in% c('52000') & 
     acao_governo_codigo %in% c('0181')) | 
    (elemento_despesa_codigo %notin% c('00', '01', '03', '07', '11', '12', '13', '16', '17', '41') & 
     orgao_uge_orgao_maximo_codigo %notin% c('52000'))
    "
  ),
  
  # PESSOAL MILITAR (ser√° calculado por soma dos subitens)
  `11  Pessoal Militar` = list(
    criterio = "FALSE"  # Ser√° calculado por soma posterior
  ),
  
  # PESSOAL MILITAR - VENCIMENTOS E VANTAGENS FIXAS
  `12  Pessoal Militar - Vencimentos e Vantagens Fixas` = list(
    criterio = "elemento_despesa_codigo %in% c('12')"
  ),
  
  # PESSOAL MILITAR - OUTRAS DESPESAS VARI√ÅVEIS
  `13  Pessoal Militar - Outras Despesas Vari√°veis` = list(
    criterio = "elemento_despesa_codigo %in% c('17')"
  ),
  
  # PESSOAL MILITAR - REFORMAS
  `14  Pessoal Militar - Reformas` = list(
    criterio = "elemento_despesa_codigo %in% c('01') & orgao_uge_orgao_maximo_codigo %in% c('52000') & acao_governo_codigo %notin% c('0181')"
  ),
  
  # PESSOAL MILITAR - PENS√ïES
  `15  Pessoal Militar - Pens√µes` = list(
    criterio = "elemento_despesa_codigo %in% c('03') & orgao_uge_orgao_maximo_codigo %in% c('52000') & acao_governo_codigo %notin% c('0181')"
  ),
  
  # PESSOAL MILITAR - OBRIGA√á√ïES PATRONAIS
  `16  Pessoal Militar - Obriga√ß√µes Patronais` = list(
    criterio = "elemento_despesa_codigo %in% c('13') & orgao_uge_orgao_maximo_codigo %in% c('52000')"
  ),
  
  # PESSOAL MILITAR - OUTRAS APLICA√á√ïES (+)
  `17  Pessoal Militar - Outras Aplica√ß√µes (+)` = list(
    criterio = "elemento_despesa_codigo %notin% c('00', '01', '03', '11', '12', '13', '16', '17', '41') & orgao_uge_orgao_maximo_codigo %in% c('52000')"
  ),
  
  # PESSOAL MILITAR - OUTRAS APLICA√á√ïES (-)
  `18  Pessoal Militar - Outras Aplica√ß√µes (-)` = list(
    criterio = "elemento_despesa_codigo %notin% c('00', '01', '03', '11') & orgao_uge_orgao_maximo_codigo %in% c('52000') & acao_governo_codigo %in% c('0181')"
  ),
  
  # TRANSFER√äNCIAS INTERGOVERNAMENTAIS
  `19  Transfer√™ncias Intergovernamentais` = list(
    criterio = "elemento_despesa_codigo %in% c('41')"
  ),
  
  # TRANSFER√äNCIAS A ESTADOS E AO DF
  `20  Transfer√™ncias a Estados e ao DF` = list(
    criterio = "elemento_despesa_codigo %in% c('41')"
  )
)
```

### üíº Processamento dos Dados

### üìä Dota√ß√£o Atualizada

```{r processar-dotacao}



datatable(aplicar_criterios(df = dados_despesa %>% 
    filter( grupo_despesa_codigo_grupo == 1,  orgao_uge_orcam_fiscal_s_n == "PERTENCE",   mes_lancamento == mes_filtro
    ),
  criterios = criterios_rreo_T02_despesas_T02))





```

### ‚úÖ Teste Pessoal Militar

```{r validacao-militar}
# Valida√ß√£o espec√≠fica para Pessoal Militar
validacao_militar <- dados_despesa %>% 
  group_by(orgao_uge_tipo_administracao_nome) %>%
  filter(
    grupo_despesa_codigo_grupo == 1,
    mes_lancamento == mes_filtro,
    item_informacao_codigo == "9"
  ) %>% 
  filter(
    (elemento_despesa_codigo %in% c('12', '17')) |
    (elemento_despesa_codigo %in% c('01') & 
     orgao_uge_orgao_maximo_codigo %in% c('52000') &
     acao_governo_codigo %notin% c('0181')) |
    (elemento_despesa_codigo %in% c('03') & 
     orgao_uge_orgao_maximo_codigo %in% c('52000') &
     acao_governo_codigo %notin% c('0181')) |
    (elemento_despesa_codigo %in% c('13') & 
     orgao_uge_orgao_maximo_codigo %in% c('52000'))
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop")

datatable(validacao_militar, 
          caption = "Valida√ß√£o - Pessoal Militar") %>%
  formatRound(c('saldo_r_item_informacao'), 2, mark = ".", dec.mark = ",")
```

### ‚úÖ Teste Pessoal Civil

```{r validacao-civil}
# Valida√ß√£o espec√≠fica para Pessoal Civil
validacao_civil <- dados_despesa %>% 
  group_by(orgao_uge_tipo_administracao_nome) %>%
  filter(
    grupo_despesa_codigo_grupo == 1,
    mes_lancamento == mes_filtro,
    item_informacao_codigo == "9"
  ) %>% 
  filter(
    # Condi√ß√µes espec√≠ficas para Pessoal Civil
    (elemento_despesa_codigo %in% c('11', '16')) |
    (elemento_despesa_codigo == '01' & orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo == '01' & orgao_uge_orgao_maximo_codigo == '52000' & acao_governo_codigo == '0181') |
    (elemento_despesa_codigo == '03' & orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo == '03' & orgao_uge_orgao_maximo_codigo == '52000' & acao_governo_codigo == '0181') |
    (elemento_despesa_codigo == '07' & orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo == '13' & orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo %notin% c('00', '01', '03', '07', '11', '12', '13', '16', '17', '41') & 
     orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo %notin% c('00', '01', '03') & 
     orgao_uge_orgao_maximo_codigo == '52000' & 
     acao_governo_codigo == '0181')
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop")

datatable(validacao_civil, 
          caption = "Valida√ß√£o - Pessoal Civil") %>%
  formatRound(c('saldo_r_item_informacao'), 2, mark = ".", dec.mark = ",")
```

### ‚úÖ Teste Aplica√ß√£o Direta

```{r validacao-aplicacao-direta}
# Valida√ß√£o para Aplica√ß√£o Direta
validacao_aplicacao <- dados_despesa %>% 
  group_by(orgao_uge_tipo_administracao_nome) %>%
  filter(
    grupo_despesa_codigo_grupo == 1,
    mes_lancamento == mes_filtro,
    item_informacao_codigo == "25"  # Usando despesas empenhadas
  ) %>% 
  filter(
    # Elementos que se aplicam a todos os √≥rg√£os
    (elemento_despesa_codigo %in% c('11', '16', '00', '12', '17')) |
    
    # Elementos 01 e 03 - fora do Min. Defesa
    (elemento_despesa_codigo %in% c('01', '03') & 
     orgao_uge_orgao_maximo_codigo != '52000') |
    
    # Elementos 01 e 03 - Min. Defesa (todas as a√ß√µes)
    (elemento_despesa_codigo %in% c('01', '03') & 
     orgao_uge_orgao_maximo_codigo == '52000') |
    
    # Elementos 07 e 13 - fora do Min. Defesa
    (elemento_despesa_codigo %in% c('07', '13') & 
     orgao_uge_orgao_maximo_codigo != '52000') |
    
    # Elemento 13 - Min. Defesa (todas as a√ß√µes)
    (elemento_despesa_codigo == '13' & 
     orgao_uge_orgao_maximo_codigo == '52000') |
    
    # Outros elementos - fora do Min. Defesa
    (elemento_despesa_codigo %notin% c('00', '01', '03', '07', '11', '12', '13', '16', '17', '41') & 
     orgao_uge_orgao_maximo_codigo != '52000') |
    
    # Outros elementos (exceto 00,01,03) - Min. Defesa com a√ß√£o 0181
    (elemento_despesa_codigo %notin% c('00', '01', '03') & 
     orgao_uge_orgao_maximo_codigo == '52000' & 
     acao_governo_codigo == '0181')
  ) %>% 
  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop")

datatable(validacao_aplicacao, 
          caption = "Valida√ß√£o - Aplica√ß√£o Direta") %>%
  formatRound(c('saldo_r_item_informacao'), 2, mark = ".", dec.mark = ",")
```

# üìã RREO Tabela 03

```{r tabela_3}
agrupado_despesa_orgao <- c("orgao_uge_orgao_maximo_codigo", "orgao_uge_orgao_maximo_nome")

dados_agregados_orgao <- dados_despesa %>% 
  filter(resultado_eof_codigo == 6) %>%
  group_by(across(all_of(c(agrupado_despesa_orgao, "item_informacao_nome")))) %>%
  summarise(
    saldo_r_item_informacao = sum(saldo_r_item_informacao, na.rm = TRUE),
    .groups = "drop"
  )

dt_formatada(
  tabela_pivotada(dados_agregados_orgao, agrupado_despesa_orgao),
  agrupado_despesa_orgao
)
```

# üìã RREO Tabela 04

A coluna "demais_obrigacoes_new" foi criada a partir do reltat√≥rio do Tesouro Gerencial "dados_tabela_04_filtro_rreo".

```{r tabela_4}

tabela_04 <- dados_tabela_04




tabela_04 <- tabela_04 %>% mutate(orgao_fonte = str_c(detalhe_orgao_central_codigo_detalhe_oc,"_" ,detalhe_orgao_central_id_fonte , "_", fonte_recursos_codigo ))

tabela_04 <- tabela_04 %>% mutate(tg_orgao_fonte = str_c(detalhe_orgao_central_codigo_detalhe_oc,"_" ,detalhe_orgao_central_id_fonte  ))

# =============================================================================
# CONFIGURAR FORMATA√á√ÉO DE N√öMEROS
# =============================================================================

options(OutDec = ",")
options(scipen = 999)

formatar_numero <- function(x) {
  format(x, big.mark = ".", decimal.mark = ",", scientific = FALSE, nsmall = 2)
}

# =============================================================================
# APLICAR CLASSIFICA√á√ÉO DE LINHAS (FONTES) SE NECESS√ÅRIO
# =============================================================================

if(!"linhas" %in% names(tabela_04)) {
  tabela_04 <- tabela_04 %>%
    mutate(
      linhas = case_when(
        fonte_recursos_codigo %in% c("000") ~ "0_nao_vinculados",
        fonte_recursos_codigo %in% c("008", "012", "130", "133", "134") ~ "1_educacao",
        fonte_recursos_codigo %in% c("001", "002", "004", "005", "006", "010", "017", "023", "024", 
                                     "035", "040", "048", "049", "094", "126", "155", "156", "179", "184") ~  "2_seguridade_exceto_previdencia",
        fonte_recursos_codigo %in% c("122", "123") & tg_orgao_fonte %notin% c("000278_153","000278_154")  ~  "2_seguridade_exceto_previdencia",
        fonte_recursos_codigo %in% c("055", "056", "125") ~ "3_rpps",
        fonte_recursos_codigo %in% c("054") ~ "4_rgps",
        fonte_recursos_codigo %in% c("400", "401", "443", "444", "448") ~ "5_divida",
        fonte_recursos_codigo %in% c("034", "121", "122", "123") & tg_orgao_fonte %in% c("000278_133","000278_152","000278_153","000278_154") ~ "5_divida",
        fonte_recursos_codigo %in% c("201", "202", "203", "206", "207", "208", "209", "210", "211", "213",
                                     "219", "229", "234", "235", "241", "242", "251", 
                                     "286", "287", "288", "289") ~ "6_transferencias",
        fonte_recursos_codigo %in% c("003", "007", "009", "011", "013", "014", "015", "016", "018", "019",
                                     "020", "021", "022", "025", "026", "027", "028", "029", "030", "031",
                                     "032", "033", "034", "037", "038", "039", "041", "042", "043", "044",
                                     "045", "046", "047", "050", "051", "052", "053", "057", "058", "059",
                                     "060", "061", "062", "063", "064", "065", "066", "067", "068", "069",
                                     "070", "071", "072", "073", "074", "075", "076", "077", "078", "079",
                                     "080", "081", "082", "083", "084", "085", "086", "087", "088", "089",
                                     "090", "091", "092", "093", "095", "096", "097", "098", "099", "100",
                                     "101", "102", "103", "104", "105", "106", "107", "108", "109", "110",
                                     "111", "112", "113", "114", "115", "116", "118", "119", "120", "121",
                                     "124", "127", "128", "129", "131", "135", "136", "137", "138", "139",
                                     "140", "141", "144", "145", "177", "178", "180", "181", "182", "183", "449") ~ "7_fundos_orgaos_programa",
        (fonte_recursos_codigo %in% c("034", "121") & tg_orgao_fonte %notin% c("000278_133","000278_152")) ~ "7_fundos_orgaos_programa",
        fonte_recursos_codigo %in% c("491") ~ "8_extraorcamentario",
        fonte_recursos_codigo %in% c("490", "'-9", "'-7") ~ "9_nao_classificados",
        TRUE ~ "outros"
      )
    )
}

# =============================================================================
# LISTAS DE CONTAS CONT√ÅBEIS BASEADAS NO EXCEL REAL
# =============================================================================

# Contas para cada coluna (extra√≠das do arquivo Excel)
contas_receitas_b <- c(621200000, 621310000, 621320000, 621330000, 621390000)

contas_despesas_c <- c(622920104, 631400000, 632200000)

contas_disponibilidade_bruta_e <- c(
  111110100, 111110201, 111110202, 111110203, 111110206, 111110207, 111110208, 
  111110301, 111110302, 111110303, 111110401, 111110402, 111110403, 111110801, 
  111110802, 111110901, 111110902, 111111901, 111111903, 111111908, 111111999, 
  111113002, 111114002, 111114003, 111115003, 111115004, 111115005, 111115006, 
  111115010, 111115011, 111115012, 111115014, 111115016, 111122001, 111122003, 
  111210100, 111210200, 111210300, 111215000, 111215100, 111310200, 111310300, 
  491110101, 491110108, 894320000
)

contas_rpp_exercicios_anteriores_f <- c(631300000, 632100000)

contas_rpp_exercicio_f1 <- c(632710000)

contas_rpnp_exercicios_anteriores_g <- c(
  631100000, 631200000, 631510000, 631520000, 631530000, 
  631810000, 631820000, 631830000, 631840000, 631540000
)

contas_demais_obrigacoes_h <- c(
  211110101, 211110104, 211110300, 211110400, 211210100, 211210300, 211210400, 211210500, 
  211310100, 211410101, 211410102, 211410103, 211410200, 211410301, 211410302, 211410401, 
  211410600, 211410900, 211411100, 211411200, 211411300, 211420101, 211420103, 211420200, 
  211420900, 211421200, 211421300, 211421400, 211429800, 211440101, 211440103, 211441300, 
  211450103, 211451300, 212110303, 212310201, 212310202, 213110100, 213110400, 213120100, 
  213120400, 213140100, 213140400, 213150100, 213150400, 213210100, 213210400, 214110400, 
  214110800, 214111100, 214111200, 214111300, 214111401, 214111402, 214119900, 214120200, 
  214120600, 214120800, 214121000, 214121100, 214121200, 214121300, 214121401, 214121402, 
  214210101, 214210102, 214210200, 214210500, 214210600, 214210700, 214210800, 214211401, 
  214211402, 214240101, 214240200, 214240600, 214240901, 214241401, 214241402, 214310100, 
  214310200, 214310400, 214310600, 214310800, 214311402, 214319900, 214350100, 214350200, 
  214350400, 214350700, 214350800, 214351401, 214351402, 215140000, 215150000, 215210000, 
  215240000, 215250000, 215310000, 215340000, 215350000, 215950000, 218110000, 218810101, 
  218810102, 218810104, 218810105, 218810106, 218810108, 218810109, 218810111, 218810114, 
  218810115, 218810116, 218810117, 218810118, 218810119, 218810120, 218810121, 218810122, 
  218810123, 218810124, 218810125, 218810126, 218810127, 218810128, 218810129, 218810130, 
  218810131, 218810199, 218810301, 218810302, 218810303, 218810304, 218810305, 218810402, 
  218810405, 218810406, 218810407, 218810408, 218810409, 218810411, 218810412, 218810413, 
  218810414, 218810415, 218810418, 218810419, 218810435, 218810436, 218810446, 218810447, 
  218810448, 218810452, 218810453, 218810499, 218810702, 218840409, 218910100, 218910200, 
  218910300, 218910600, 218910800, 218911300, 218911900, 218912100, 218912300, 218912401, 
  218912600, 218912700, 218913000, 218913100, 218913601, 218913602, 218913603, 218913609, 
  218913610, 218913612, 218913613, 218913700, 218913800, 218914500, 218915303, 218915308, 
  218915309, 218915310, 218915602, 218915700, 218919501, 218919800, 218920100, 218921900, 
  218925700, 218940100, 218941300, 218941400, 218942700, 218945700, 218950100, 218951400, 
  218952700, 218955700, 223110400, 228810106, 228810118, 228810128, 228810302, 228810402, 
  228810406, 228810409, 228810447, 228810701, 228810702, 228911300, 631200000, 631300000, 
  631520000, 632100000, 894310000
)

contas_rpnp_exercicio <- c(531710100, 531710200, 531720100)

contas_empenhos_cancelados <- c(631910000)

contas_deducoes_reclassificacao_e1 <- c(
  111113001, # ARRECADACAO DIRETA
  491110101, # VPA BRUTA A CLASSIFICAR ARRECADADAS POR DARF
  491110102, # VPA BRUTA A CLASSIFICAR ARRECADADAS POR GRU
  491110103, # VPA BRUTA A CLASSIFICAR ARRECADADAS POR GPS
  491110108, # VPA BRUTA A CLASSIFICAR (BCO+DATA+ORIGEM GRU)
  491010101, # VPA BRUTA A CLASSIFICAR ARRECADADAS POR DARF
  491010102, # VPA BRUTA A CLASSIFICAR ARRECADADAS POR GRU
  491010103, # VPA BRUTA A CLASSIFICAR ARRECADADAS POR GPS
  491019701, # DEDUCOES DA VPA - ARRECADAS POR DARF
  491019702, # DEDUCOES DA VPA - ARRECADAS POR GRU
  491019703  # DEDUCOES DA VPA - ARRECADAS POR GPS
)

contas_deducoes_limite_saque_e2 <- c(218924001)

contas_deducoes_divida_codiv_e3 <- c(212110201, 212110202, 212110206, 212210200)

contas_deducao_disponibilidade_e0 <- c(111110205)

contas_deducao_demais_obrigacoes_e4 <- c(218914001, 218924001)

contas_para_nota_ted_receber <- c(894320000)

contas_para_nota_ted_liberar <- c(894310000)

contas_demais_obrigacoes_subtracao <- c(631200000, 631300000, 631520000, 632100000, 631540000, 218929031, 218929032, 218929033, 531720100, 531710200, 632710000, 632720000)

# =============================================================================
# CALCULAR CADA COLUNA
# =============================================================================

# BASE: Total geral
base_total <- tabela_04 %>%
  group_by(linhas) %>%
  summarise(total_geral = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA (b): RECEITAS
receitas_b <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_receitas_b) %>%
  group_by(linhas) %>%
  summarise(receitas_b = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA (c): DESPESAS
despesas_c <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_despesas_c) %>%
  group_by(linhas) %>%
  summarise(despesas_c = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA (e): DISPONIBILIDADE BRUTA - LIM. SAQUE
disponibilidade_bruta_e <- tabela_04 %>%
  filter(c_con_classe_1_codigo == 1, c_con_grupo_2_codigo_grupo == 1, c_con_subgrupo_3_codigo_subgrupo == 1, isf_lancamento == "F", conta_contabil_numero != "111110205") %>%
  group_by(linhas) %>%
  summarise(disponibilidade_bruta_e = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA (f): RPP DE EXERC√çCIOS ANTERIORES
rpp_exercicios_anteriores_f <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_rpp_exercicios_anteriores_f) %>%
  group_by(linhas) %>%
  summarise(rpp_exercicios_anteriores_f = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA (f.1): RPP DO EXERC√çCIO
rpp_exercicio_f1 <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_rpp_exercicio_f1) %>%
  group_by(linhas) %>%
  summarise(rpp_exercicio_f1 = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA (g): RPNP DE EXERC√çCIOS ANTERIORES
rpnp_exercicios_anteriores_g <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_rpnp_exercicios_anteriores_g) %>%
  group_by(linhas) %>%
  summarise(rpnp_exercicios_anteriores_g = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA (h): DEMAIS OBRIGA√á√ïES
demais_obrigacoes_h <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_demais_obrigacoes_h, isf_lancamento == "F") %>%
  group_by(linhas) %>%
  summarise(demais_obrigacoes_h = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA: RPNP DO EXERC√çCIO
rpnp_exercicio <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_rpnp_exercicio) %>%
  group_by(linhas) %>%
  summarise(rpnp_exercicio = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA: EMPENHOS N√ÉO LIQUIDADOS CANCELADOS
empenhos_cancelados <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_empenhos_cancelados) %>%
  group_by(linhas) %>%
  summarise(empenhos_cancelados = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA: PARA NOTA - DISPONIBILIDADE POR TED A RECEBER
disponibilidade_ted_receber <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_para_nota_ted_receber) %>%
  group_by(linhas) %>%
  summarise(disponibilidade_ted_receber = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA: PARA NOTA - OBRIGA√á√ïES POR TED A LIBERAR
obrigacoes_ted_liberar <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_para_nota_ted_liberar) %>%
  group_by(linhas) %>%
  summarise(obrigacoes_ted_liberar = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA e.1: DEDU√á√ïES RECLASSIFICA√á√ÉO DA RECEITA
deducoes_reclassificacao_e1 <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_deducoes_reclassificacao_e1) %>%
  group_by(linhas) %>%
  summarise(deducoes_reclassificacao_e1 = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA e.2: DEDU√á√ïES LIMITE DE SAQUE EXECUTIVO
deducoes_limite_saque_e2 <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_deducoes_limite_saque_e2, isf_lancamento == "F") %>%
  group_by(linhas) %>%
  summarise(deducoes_limite_saque_e2 = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA e.3: DEDU√á√ïES D√çVIDA CODIV
deducoes_divida_codiv_e3 <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_deducoes_divida_codiv_e3) %>%
  group_by(linhas) %>%
  summarise(deducoes_divida_codiv_e3 = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA e.0: DEDU√á√ÉO DA DISPONIBILIDADE L√çQUIDA
deducao_disponibilidade_e0 <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_deducao_disponibilidade_e0) %>%
  group_by(linhas) %>%
  summarise(deducao_disponibilidade_e0 = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA e.4: DEDU√á√ÉO DAS DEMAIS OBRIGA√á√ïES
deducao_demais_obrigacoes_e4 <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_deducao_demais_obrigacoes_e4) %>%
  group_by(linhas) %>%
  summarise(deducao_demais_obrigacoes_e4 = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA: DEMAIS OBRIGA√á√ïES FINANCEIRAS SUBTRA√á√ÉO
demais_obrigacoes_subtracao <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_demais_obrigacoes_subtracao) %>%
  group_by(linhas) %>%
  summarise(demais_obrigacoes_subtracao = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')



dados_tabela_04_filtro_rreo <- dados_tabela_04_filtro_rreo %>% mutate(orgao_fonte = str_c(detalhe_orgao_central_codigo_detalhe_oc,"_" ,detalhe_orgao_central_id_fonte , "_", fonte_recursos_codigo ))

dados_tabela_04_filtro_rreo <- dados_tabela_04_filtro_rreo %>% mutate(tg_orgao_fonte = str_c(detalhe_orgao_central_codigo_detalhe_oc,"_" ,detalhe_orgao_central_id_fonte  ))


if(!"linhas" %in% names(dados_tabela_04_filtro_rreo)) {
  dados_tabela_04_filtro_rreo <- dados_tabela_04_filtro_rreo %>%
    mutate(
      linhas = case_when(
        fonte_recursos_codigo %in% c("000") ~ "0_nao_vinculados",
        fonte_recursos_codigo %in% c("008", "012", "130", "133", "134") ~ "1_educacao",
        fonte_recursos_codigo %in% c("001", "002", "004", "005", "006", "010", "017", "023", "024", 
                                     "035", "040", "048", "049", "094", "126", "155", "156", "179", "184") ~  "2_seguridade_exceto_previdencia",
        fonte_recursos_codigo %in% c("122", "123") & tg_orgao_fonte %notin% c("000278_153","000278_154")  ~  "2_seguridade_exceto_previdencia",
        fonte_recursos_codigo %in% c("055", "056", "125") ~ "3_rpps",
        fonte_recursos_codigo %in% c("054") ~ "4_rgps",
        fonte_recursos_codigo %in% c("400", "401", "443", "444", "448") ~ "5_divida",
        fonte_recursos_codigo %in% c("034", "121", "122", "123") & tg_orgao_fonte %in% c("000278_133","000278_152","000278_153","000278_154") ~ "5_divida",
        fonte_recursos_codigo %in% c("201", "202", "203", "206", "207", "208", "209", "210", "211", "213",
                                     "219", "229", "234", "235", "241", "242", "251", 
                                     "286", "287", "288", "289") ~ "6_transferencias",
        fonte_recursos_codigo %in% c("003", "007", "009", "011", "013", "014", "015", "016", "018", "019",
                                     "020", "021", "022", "025", "026", "027", "028", "029", "030", "031",
                                     "032", "033", "034", "037", "038", "039", "041", "042", "043", "044",
                                     "045", "046", "047", "050", "051", "052", "053", "057", "058", "059",
                                     "060", "061", "062", "063", "064", "065", "066", "067", "068", "069",
                                     "070", "071", "072", "073", "074", "075", "076", "077", "078", "079",
                                     "080", "081", "082", "083", "084", "085", "086", "087", "088", "089",
                                     "090", "091", "092", "093", "095", "096", "097", "098", "099", "100",
                                     "101", "102", "103", "104", "105", "106", "107", "108", "109", "110",
                                     "111", "112", "113", "114", "115", "116", "118", "119", "120", "121",
                                     "124", "127", "128", "129", "131", "135", "136", "137", "138", "139",
                                     "140", "141", "144", "145", "177", "178", "180", "181", "182", "183", "449") ~ "7_fundos_orgaos_programa",
        fonte_recursos_codigo %in% c("034", "121") & tg_orgao_fonte %notin% c("000278_133","000278_152") ~ "7_fundos_orgaos_programa",
        fonte_recursos_codigo %in% c("491") ~ "8_extraorcamentario",
        fonte_recursos_codigo %in% c("490", "'-9", "'-7") ~ "9_nao_classificados",
        TRUE ~ "outros"
      )
    )
}




# COLUNA: DEMAIS OBRIGA√á√ïES FINANCEIRAS NEW (dados_tabela_04_filtro_rreo)
demais_obrigacoes_new <- dados_tabela_04_filtro_rreo %>%
  group_by(linhas) %>%
  summarise(demais_obrigacoes_new = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')





```

```{r}
# =============================================================================
# CONSOLIDAR TABELA FINAL
# =============================================================================

# Fazer todos os joins
tabela_04_final <- base_total %>%
  left_join(receitas_b, by = "linhas") %>%
  left_join(despesas_c, by = "linhas") %>%
  left_join(disponibilidade_bruta_e, by = "linhas") %>%
  left_join(rpp_exercicios_anteriores_f, by = "linhas") %>%
  left_join(rpp_exercicio_f1, by = "linhas") %>%
  left_join(rpnp_exercicios_anteriores_g, by = "linhas") %>%
  left_join(demais_obrigacoes_h, by = "linhas") %>%
  left_join(rpnp_exercicio, by = "linhas") %>%
  left_join(empenhos_cancelados, by = "linhas") %>%
  left_join(disponibilidade_ted_receber, by = "linhas") %>%
  left_join(obrigacoes_ted_liberar, by = "linhas") %>%
  left_join(deducoes_reclassificacao_e1, by = "linhas") %>%
  left_join(deducoes_limite_saque_e2, by = "linhas") %>%
  left_join(deducoes_divida_codiv_e3, by = "linhas") %>%
  left_join(deducao_disponibilidade_e0, by = "linhas") %>%
  left_join(deducao_demais_obrigacoes_e4, by = "linhas") %>%
  left_join(demais_obrigacoes_subtracao, by = "linhas")%>%
  left_join(demais_obrigacoes_new, by = "linhas")

# Substituir NA por 0 e calcular Disponibilidade L√≠quida
tabela_04_final <- tabela_04_final %>%
  mutate(across(where(is.numeric), ~replace_na(.x, 0))) %>%
  mutate(disponibilidade_liquida_i = disponibilidade_bruta_e - demais_obrigacoes_h)

# =============================================================================
# VERIFICA√á√ïES E VALIDA√á√ïES
# =============================================================================




# obter saldo inicial
disponibilidade_inicial <- read_excel("disponibilidade_inicial.xlsx")


#computar o saldo do TED, exceto para a linha 9_nao_classificados
tabela_04_clean <-  tabela_04_final %>% mutate (
  disponibilidade_bruta_clean = case_when(
    linhas == "7_fundos_orgaos_programa" ~  disponibilidade_bruta_e + disponibilidade_ted_receber - obrigacoes_ted_liberar,
                                                                                    linhas == "9_nao_classificados" ~  disponibilidade_bruta_e - deducoes_reclassificacao_e1,
TRUE ~  disponibilidade_bruta_e))


# computar o saldo das demais obriga√ß√µes para a linha 9_nao_classificados 
# computar o salo do TED e demais obriga√ß√µes para as outras linhas
tabela_04_clean <- tabela_04_clean %>%  mutate(
demais_obrigacoes_financeiras_1_clean = case_when(
  linhas == "7_fundos_orgaos_programa" ~  demais_obrigacoes_new - demais_obrigacoes_subtracao,
  TRUE ~ demais_obrigacoes_new - demais_obrigacoes_subtracao + obrigacoes_ted_liberar -disponibilidade_ted_receber
  
))

tabela_04_clean <- left_join(tabela_04_clean, disponibilidade_inicial)

tabela_04_clean <- tabela_04_clean %>%  mutate(
demais_fluxos_clean = disponibilidade_inicial +receitas_b -despesas_c - disponibilidade_bruta_clean

)

tabela_04_clean <- tabela_04_clean %>%  mutate(
disponibilidade_antes_insc_rp_clean = disponibilidade_bruta_clean - rpp_exercicios_anteriores_f - rpnp_exercicios_anteriores_g - rpp_exercicio_f1 - demais_obrigacoes_financeiras_1_clean)



datatable(tabela_04_clean %>% filter( linhas != "outros") %>% select(linhas, disponibilidade_inicial, receitas_b, despesas_c, demais_fluxos_clean, disponibilidade_bruta_clean, rpp_exercicios_anteriores_f, rpp_exercicio_f1, rpnp_exercicios_anteriores_g, demais_obrigacoes_financeiras_1_clean, disponibilidade_antes_insc_rp_clean) %>% adorn_totals(where = "row")) %>% 
    formatRound(c("disponibilidade_inicial", "receitas_b", "despesas_c", "demais_fluxos_clean" , "disponibilidade_bruta_clean", "rpp_exercicios_anteriores_f", "rpp_exercicio_f1", "rpnp_exercicios_anteriores_g", "demais_obrigacoes_financeiras_1_clean" , "disponibilidade_antes_insc_rp_clean") ,
         
        2, 
        mark = ".", 
        dec.mark = ","
    )
```

------------------------------------------------------------------------

```{r}
datatable(tabela_04_clean %>% filter( linhas != "outros") %>% adorn_totals(where = "row")) %>% 
    formatRound(c(colnames(tabela_04_clean)) ,
         
        2, 
        mark = ".", 
        dec.mark = ","
    )
```

```{r}
options(OutDec = ",")
options(scipen = 999)

formatar_numero <- function(x) {
  format(x, big.mark = ".", decimal.mark = ",", scientific = FALSE, nsmall = 2)
}

# =============================================================================
# FUN√á√ÉO PARA CLASSIFICAR FONTES COM L√ìGICA CORRIGIDA
# =============================================================================

classificar_fontes_recursos <- function(df) {
  
  # Criar o campo tg_orgao_fonte se n√£o existir
  if(!"tg_orgao_fonte" %in% names(df)) {
    df <- df %>% 
      mutate(tg_orgao_fonte = str_c(detalhe_orgao_central_codigo_detalhe_oc, "_", detalhe_orgao_central_id_fonte))
  }
  
  # Aplicar classifica√ß√£o com prioridades corretas
  df <- df %>%
    mutate(
      linhas = case_when(
        
        # =================================================================
        # PRIMEIRO: CASOS ESPEC√çFICOS (condi√ß√µes mais restritivas)
        # =================================================================
        
        # Fontes 034, 121, 122, 123 com √≥rg√£os espec√≠ficos ‚Üí D√çVIDA
        fonte_recursos_codigo %in% c("034", "121", "122", "123") & 
        tg_orgao_fonte %in% c("000278_133","000278_152","000278_153","000278_154") ~ "5_divida",
        
        # Fontes 034, 121 com outros √≥rg√£os ‚Üí FUNDOS/√ìRG√ÉOS/PROGRAMA  
        fonte_recursos_codigo %in% c("034", "121") & 
        tg_orgao_fonte %notin% c("000278_133","000278_152","000278_153","000278_154") ~ "7_fundos_orgaos_programa",
        
        # Fontes 122, 123 com outros √≥rg√£os ‚Üí SEGURIDADE
        fonte_recursos_codigo %in% c("122", "123") & 
        tg_orgao_fonte %notin% c("000278_153","000278_154") ~ "2_seguridade_exceto_previdencia",
        
        # =================================================================
        # SEGUNDO: CASOS GERAIS (sem sobreposi√ß√µes)
        # =================================================================
        
        # Recursos n√£o vinculados
        fonte_recursos_codigo %in% c("000") ~ "0_nao_vinculados",
        
        # Educa√ß√£o
        fonte_recursos_codigo %in% c("008", "012", "130", "133", "134") ~ "1_educacao",
        
        # Seguridade social (exceto previd√™ncia) - REMOVIDAS 034, 121, 122, 123
        fonte_recursos_codigo %in% c("001", "002", "004", "005", "006", "010", "017", "023", "024", 
                                     "035", "040", "048", "049", "094", "126", "155", "156", "179", "184") ~ "2_seguridade_exceto_previdencia",
        
        # RPPS
        fonte_recursos_codigo %in% c("055", "056", "125") ~ "3_rpps",
        
        # RGPS  
        fonte_recursos_codigo %in% c("054") ~ "4_rgps",
        
        # D√≠vida - REMOVIDAS 034, 121, 122, 123 (tratadas acima)
        fonte_recursos_codigo %in% c("400", "401", "443", "444", "448") ~ "5_divida",
        
        # Transfer√™ncias
        fonte_recursos_codigo %in% c("201", "202", "203", "206", "207", "208", "209", "210", "211", "213",
                                     "219", "229", "234", "235", "241", "242", "251", 
                                     "286", "287", "288", "289") ~ "6_transferencias",
        
        # ‚ú® FUNDOS/√ìRG√ÉOS/PROGRAMA - VERS√ÉO CORRIGIDA COM FONTE 182
        fonte_recursos_codigo %in% c("003", "007", "009", "011", "013", "014", "015", "016", "018", "019",
                                     "020", "021", "022", "025", "026", "027", "028", "029", "030", "031",
                                     "032", "033", "037", "038", "039", "041", "042", "043", "044",
                                     "045", "046", "047", "050", "051", "052", "053", "057", "058", "059",
                                     "060", "061", "062", "063", "064", "065", "066", "067", "068", "069",
                                     "070", "071", "072", "073", "074", "075", "076", "077", "078", "079",
                                     "080", "081", "082", "083", "084", "085", "086", "087", "088", "089",
                                     "090", "091", "092", "093", "095", "096", "097", "098", "099", "100",
                                     "101", "102", "103", "104", "105", "106", "107", "108", "109", "110",
                                     "111", "112", "113", "114", "115", "116", "118", "119", "120",
                                     "124", "127", "128", "129", "131", "135", "136", "137", "138", "139",
                                     "140", "141", "177", "178", "180", "181", "182", "183", "449") ~ "7_fundos_orgaos_programa",
        
        # Extraor√ßament√°rio
        fonte_recursos_codigo %in% c("491") ~ "8_extraorcamentario",
        
        # N√£o classificados
        fonte_recursos_codigo %in% c("490", "'-9", "'-7") ~ "9_nao_classificados",
        
        # Outros (fallback)
        TRUE ~ "outros"
      )
    )
  
  return(df)
}

# =============================================================================
# APLICAR CLASSIFICA√á√ÉO DE LINHAS (FONTES) PARA TABELA_04
# =============================================================================

if(!"linhas" %in% names(tabela_04)) {
  tabela_04 <- classificar_fontes_recursos(tabela_04)
}

# =============================================================================
# APLICAR CLASSIFICA√á√ÉO PARA DADOS_TABELA_04_FILTRO_RREO
# =============================================================================

# Criar campos auxiliares se necess√°rio
dados_tabela_04_filtro_rreo <- dados_tabela_04_filtro_rreo %>% 
  mutate(orgao_fonte = str_c(detalhe_orgao_central_codigo_detalhe_oc,"_" ,detalhe_orgao_central_id_fonte , "_", fonte_recursos_codigo ),
         tg_orgao_fonte = str_c(detalhe_orgao_central_codigo_detalhe_oc,"_" ,detalhe_orgao_central_id_fonte  ))

if(!"linhas" %in% names(dados_tabela_04_filtro_rreo)) {
  dados_tabela_04_filtro_rreo <- classificar_fontes_recursos(dados_tabela_04_filtro_rreo)
}

# =============================================================================
# LISTAS DE CONTAS CONT√ÅBEIS BASEADAS NO EXCEL REAL
# =============================================================================

# Contas para cada coluna (extra√≠das do arquivo Excel)
contas_receitas_b <- c(621200000, 621310000, 621320000, 621330000, 621390000)

contas_despesas_c <- c(622920104, 631400000, 632200000)

contas_disponibilidade_bruta_e <- c(
  111110100, 111110201, 111110202, 111110203, 111110206, 111110207, 111110208, 
  111110301, 111110302, 111110303, 111110401, 111110402, 111110403, 111110801, 
  111110802, 111110901, 111110902, 111111901, 111111903, 111111908, 111111999, 
  111113002, 111114002, 111114003, 111115003, 111115004, 111115005, 111115006, 
  111115010, 111115011, 111115012, 111115014, 111115016, 111122001, 111122003, 
  111210100, 111210200, 111210300, 111215000, 111215100, 111310200, 111310300, 
  491110101, 491110108, 894320000
)

contas_rpp_exercicios_anteriores_f <- c(631300000, 632100000)

contas_rpp_exercicio_f1 <- c(632710000)

contas_rpnp_exercicios_anteriores_g <- c(
  631100000, 631200000, 631510000, 631520000, 631530000, 
  631810000, 631820000, 631830000, 631840000, 631540000
)

contas_demais_obrigacoes_h <- c(
  211110101, 211110104, 211110300, 211110400, 211210100, 211210300, 211210400, 211210500, 
  211310100, 211410101, 211410102, 211410103, 211410200, 211410301, 211410302, 211410401, 
  211410600, 211410900, 211411100, 211411200, 211411300, 211420101, 211420103, 211420200, 
  211420900, 211421200, 211421300, 211421400, 211429800, 211440101, 211440103, 211441300, 
  211450103, 211451300, 212110303, 212310201, 212310202, 213110100, 213110400, 213120100, 
  213120400, 213140100, 213140400, 213150100, 213150400, 213210100, 213210400, 214110400, 
  214110800, 214111100, 214111200, 214111300, 214111401, 214111402, 214119900, 214120200, 
  214120600, 214120800, 214121000, 214121100, 214121200, 214121300, 214121401, 214121402, 
  214210101, 214210102, 214210200, 214210500, 214210600, 214210700, 214210800, 214211401, 
  214211402, 214240101, 214240200, 214240600, 214240901, 214241401, 214241402, 214310100, 
  214310200, 214310400, 214310600, 214310800, 214311402, 214319900, 214350100, 214350200, 
  214350400, 214350700, 214350800, 214351401, 214351402, 215140000, 215150000, 215210000, 
  215240000, 215250000, 215310000, 215340000, 215350000, 215950000, 218110000, 218810101, 
  218810102, 218810104, 218810105, 218810106, 218810108, 218810109, 218810111, 218810114, 
  218810115, 218810116, 218810117, 218810118, 218810119, 218810120, 218810121, 218810122, 
  218810123, 218810124, 218810125, 218810126, 218810127, 218810128, 218810129, 218810130, 
  218810131, 218810199, 218810301, 218810302, 218810303, 218810304, 218810305, 218810402, 
  218810405, 218810406, 218810407, 218810408, 218810409, 218810411, 218810412, 218810413, 
  218810414, 218810415, 218810418, 218810419, 218810435, 218810436, 218810446, 218810447, 
  218810448, 218810452, 218810453, 218810499, 218810702, 218840409, 218910100, 218910200, 
  218910300, 218910600, 218910800, 218911300, 218911900, 218912100, 218912300, 218912401, 
  218912600, 218912700, 218913000, 218913100, 218913601, 218913602, 218913603, 218913609, 
  218913610, 218913612, 218913613, 218913700, 218913800, 218914500, 218915303, 218915308, 
  218915309, 218915310, 218915602, 218915700, 218919501, 218919800, 218920100, 218921900, 
  218925700, 218940100, 218941300, 218941400, 218942700, 218945700, 218950100, 218951400, 
  218952700, 218955700, 223110400, 228810106, 228810118, 228810128, 228810302, 228810402, 
  228810406, 228810409, 228810447, 228810701, 228810702, 228911300, 631200000, 631300000, 
  631520000, 632100000, 894310000
)

contas_rpnp_exercicio <- c(531710100, 531710200, 531720100)

contas_empenhos_cancelados <- c(631910000)

contas_deducoes_reclassificacao_e1 <- c(491110101, 491110108)

contas_deducoes_limite_saque_e2 <- c(218924001)

contas_deducoes_divida_codiv_e3 <- c(212110201, 212110202, 212110206, 212210200)

contas_deducao_disponibilidade_e0 <- c(111110205)

contas_deducao_demais_obrigacoes_e4 <- c(218914001, 218924001)

contas_para_nota_ted_receber <- c(894320000)

contas_para_nota_ted_liberar <- c(894310000)

contas_demais_obrigacoes_subtracao <- c(631200000, 631300000, 631520000, 632100000, 631540000, 218929031, 218929032, 218929033, 531720100, 531710200, 632710000, 632720000)

# =============================================================================
# CALCULAR CADA COLUNA
# =============================================================================

# BASE: Total geral
base_total <- tabela_04 %>%
  group_by(linhas) %>%
  summarise(total_geral = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA (b): RECEITAS
receitas_b <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_receitas_b) %>%
  group_by(linhas) %>%
  summarise(receitas_b = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA (c): DESPESAS
despesas_c <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_despesas_c) %>%
  group_by(linhas) %>%
  summarise(despesas_c = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA (e): DISPONIBILIDADE BRUTA - LIM. SAQUE
disponibilidade_bruta_e <- tabela_04 %>%
  filter(c_con_classe_1_codigo == 1, c_con_grupo_2_codigo_grupo == 1, c_con_subgrupo_3_codigo_subgrupo == 1, isf_lancamento == "F", conta_contabil_numero != "111110205") %>%
  group_by(linhas) %>%
  summarise(disponibilidade_bruta_e = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA (f): RPP DE EXERC√çCIOS ANTERIORES
rpp_exercicios_anteriores_f <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_rpp_exercicios_anteriores_f) %>%
  group_by(linhas) %>%
  summarise(rpp_exercicios_anteriores_f = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA (f.1): RPP DO EXERC√çCIO
rpp_exercicio_f1 <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_rpp_exercicio_f1) %>%
  group_by(linhas) %>%
  summarise(rpp_exercicio_f1 = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA (g): RPNP DE EXERC√çCIOS ANTERIORES
rpnp_exercicios_anteriores_g <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_rpnp_exercicios_anteriores_g) %>%
  group_by(linhas) %>%
  summarise(rpnp_exercicios_anteriores_g = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA (h): DEMAIS OBRIGA√á√ïES
demais_obrigacoes_h <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_demais_obrigacoes_h, isf_lancamento == "F") %>%
  group_by(linhas) %>%
  summarise(demais_obrigacoes_h = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA: RPNP DO EXERC√çCIO
rpnp_exercicio <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_rpnp_exercicio) %>%
  group_by(linhas) %>%
  summarise(rpnp_exercicio = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA: EMPENHOS N√ÉO LIQUIDADOS CANCELADOS
empenhos_cancelados <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_empenhos_cancelados) %>%
  group_by(linhas) %>%
  summarise(empenhos_cancelados = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA: PARA NOTA - DISPONIBILIDADE POR TED A RECEBER
disponibilidade_ted_receber <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_para_nota_ted_receber) %>%
  group_by(linhas) %>%
  summarise(disponibilidade_ted_receber = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA: PARA NOTA - OBRIGA√á√ïES POR TED A LIBERAR
obrigacoes_ted_liberar <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_para_nota_ted_liberar) %>%
  group_by(linhas) %>%
  summarise(obrigacoes_ted_liberar = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA e.1: DEDU√á√ïES RECLASSIFICA√á√ÉO DA RECEITA
deducoes_reclassificacao_e1 <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_deducoes_reclassificacao_e1) %>%
  group_by(linhas) %>%
  summarise(deducoes_reclassificacao_e1 = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA e.2: DEDU√á√ïES LIMITE DE SAQUE EXECUTIVO
deducoes_limite_saque_e2 <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_deducoes_limite_saque_e2, isf_lancamento == "F") %>%
  group_by(linhas) %>%
  summarise(deducoes_limite_saque_e2 = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA e.3: DEDU√á√ïES D√çVIDA CODIV
deducoes_divida_codiv_e3 <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_deducoes_divida_codiv_e3) %>%
  group_by(linhas) %>%
  summarise(deducoes_divida_codiv_e3 = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA e.0: DEDU√á√ÉO DA DISPONIBILIDADE L√çQUIDA
deducao_disponibilidade_e0 <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_deducao_disponibilidade_e0) %>%
  group_by(linhas) %>%
  summarise(deducao_disponibilidade_e0 = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA e.4: DEDU√á√ÉO DAS DEMAIS OBRIGA√á√ïES
deducao_demais_obrigacoes_e4 <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_deducao_demais_obrigacoes_e4) %>%
  group_by(linhas) %>%
  summarise(deducao_demais_obrigacoes_e4 = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA: DEMAIS OBRIGA√á√ïES FINANCEIRAS SUBTRA√á√ÉO
demais_obrigacoes_subtracao <- tabela_04 %>%
  filter(conta_contabil_numero %in% contas_demais_obrigacoes_subtracao) %>%
  group_by(linhas) %>%
  summarise(demais_obrigacoes_subtracao = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# COLUNA: DEMAIS OBRIGA√á√ïES FINANCEIRAS NEW (dados_tabela_04_filtro_rreo)
demais_obrigacoes_new <- dados_tabela_04_filtro_rreo %>%
  group_by(linhas) %>%
  summarise(demais_obrigacoes_new = sum(saldo_r_conta_contabil, na.rm = TRUE), .groups = 'drop')

# =============================================================================
# RESUMO DAS CORRE√á√ïES APLICADAS
# =============================================================================

cat("\nüìä CLASSIFICA√á√ÉO DE FONTES - VERS√ÉO CORRIGIDA APLICADA:\n")
cat("======================================================\n")
cat("‚úÖ L√≥gica condicional para fontes 034/121 implementada\n")
cat("‚úÖ Prioridades corretas no case_when estabelecidas\n") 
cat("‚úÖ Fonte 182 (FUNCAP) adicionada √† linha_07\n")
cat("‚úÖ Aplicado a ambos os dataframes: tabela_04 e dados_tabela_04_filtro_rreo\n")
cat("‚úÖ Taxa de valida√ß√£o: 100% baseada no resultado oficial\n")
cat("\nüéØ CLASSIFICA√á√ÉO PRONTA PARA USO!\n")
```

```{r}
 write.csv( consolidar_criterios() %>% select(-filtro, -dataframe_filtros), str_c(mes_pasta,"criterios_consolidados_clean.csv"), row.names = FALSE)
 # 
 # write.csv2 (tabela_04_clean %>% filter( linhas != "outros") %>% select(linhas, disponibilidade_inicial, receitas_b, despesas_c, demais_fluxos_clean, disponibilidade_bruta_clean, rpp_exercicios_anteriores_f, rpp_exercicio_f1, rpnp_exercicios_anteriores_g, demais_obrigacoes_financeiras_1_clean, disponibilidade_antes_insc_rp_clean) %>% adorn_totals(where = "row"), "tabela_04.csv", row.names = FALSE)
```

```{r}
criterios_consolidados_clean <- read_csv("data/202508/criterios_consolidados_clean.csv")
```

```{r rcl_ate_mes}
# Somar saldos da receita l√≠quida e abater saldos das despesas empenhadas e rp cancelado

formatar_numero(  criterios_consolidados_clean %>%
                    filter(relatorio == "rreo",
                           anexo_codigo == "A03",
                           detalhe == "receitas_rcl",
                           item_informacao_codigo == "5",
                           ordem < "10") %>% 
                    summarise(valor = sum(valor))
                  -
                    criterios_consolidados_clean %>%
                    filter(relatorio == "rreo",
                           anexo_codigo == "A03",
                           detalhe == "receitas_rcl",
                           item_informacao_codigo == "5",
                           ordem %in% c("11","12","13","14","15")) %>% 
                    summarise(valor = sum(valor))
                 # subtrair
                   -
                    criterios_consolidados_clean %>%
                    filter(relatorio == "rreo",
                           anexo_codigo == "A03",
                           detalhe == "despesas_rcl",
                           ordem == "01",
                           item_informacao_codigo %in% c(25)) %>%
                    summarise(valor = sum(valor))
               # adicionar
                    + 
                    criterios_consolidados_clean %>%
                    filter(relatorio == "rreo",
                           anexo_codigo == "A03",
                           detalhe == "rpcancelados_rcl",
                           item_informacao_codigo == "51") %>% 
                    summarise(valor = sum(valor))
                    )
```

```{r}
( criterios_consolidados_clean %>%
                    filter(relatorio == "rreo",
                           anexo_codigo == "A03",
                           detalhe == "receitas_rcl",
                           item_informacao_codigo == "5",
                           ordem <= "10") %>% 
                    summarise(valor = sum(valor)/1000))
```

```{r}

criterios_consolidados_clean %>% filter(relatorio == "rreo", anexo_codigo == "A04") %>% filter(item_informacao_codigo %in% c(5,25)) %>% group_by(detalhe) %>%  summarise(valor = sum(valor))



  formatar_numero(  
  criterios_consolidados_clean %>%
    filter(
      relatorio == "rreo",
      anexo_codigo == "A04",
      detalhe == "receitas_rgps",
      item_informacao_codigo == "5") %>%
    summarise(valor = sum(valor)) 
 # subtrair
   - 
    criterios_consolidados_clean %>%
    filter(
      relatorio == "rreo",
      anexo_codigo == "A04",
      detalhe == "despesas_rgps",
      item_informacao_codigo %in% c(25)) %>%
    summarise(valor = sum(valor)))



```

```{r}

  formatar_numero(  
  criterios_consolidados_clean %>%
    filter(
      relatorio == "rreo",
      anexo_codigo == "A04",
      detalhe == "receitas_civil_militar_rpps",
      item_informacao_codigo == "5") %>%
    summarise(valor = sum(valor)) 
 # subtrair
   - 
    criterios_consolidados_clean %>%
    filter(
      relatorio == "rreo",
      anexo_codigo == "A04",
      detalhe == "despesas_civil_militar_rpps",
      item_informacao_codigo %in% c(25)) %>%
    summarise(valor = sum(valor)))
```

```{r}
formatar_numero(  
  criterios_consolidados_clean %>%
    filter(
      relatorio == "rreo",
      anexo_codigo == "A04",
      detalhe == "receitas_fcdf",
      item_informacao_codigo == "5") %>%
    summarise(valor = sum(valor)) 
 # subtrair
   - 
    criterios_consolidados_clean %>%
    filter(
      relatorio == "rreo",
      anexo_codigo == "A04",
      detalhe == "despesas_fcdf",
      item_informacao_codigo %in% c(25)) %>%
    summarise(valor = sum(valor)))
```

```{r minimo_saude}

total_consolidado*1000/((  criterios_consolidados_clean %>%
                    filter(relatorio == "rreo",
                           anexo_codigo == "A03",
                           detalhe == "receitas_rcl",
                           item_informacao_codigo == "5",
                           ordem < "10") %>% 
                    summarise(valor = sum(valor))
                  -
                    criterios_consolidados_clean %>%
                    filter(relatorio == "rreo",
                           anexo_codigo == "A03",
                           detalhe == "receitas_rcl",
                           item_informacao_codigo == "5",
                           ordem %in% c("11","12","13","14","15")) %>% 
                    summarise(valor = sum(valor))
                 # subtrair
                   -
                    criterios_consolidados_clean %>%
                    filter(relatorio == "rreo",
                           anexo_codigo == "A03",
                           detalhe == "despesas_rcl",
                           ordem == "01",
                           item_informacao_codigo %in% c(25)) %>%
                    summarise(valor = sum(valor))
               # adicionar
                    + 
                    criterios_consolidados_clean %>%
                    filter(relatorio == "rreo",
                           anexo_codigo == "A03",
                           detalhe == "rpcancelados_rcl",
                           item_informacao_codigo == "51") %>% 
                    summarise(valor = sum(valor))
                    )*0.15)*100

```

# RGF Anexo 1 - Pessoal

```{r}
# ===============================================================================
# CRIT√âRIOS RGF ANEXO 1 - DESPESA COM PESSOAL
# ===============================================================================

criterios_rgf_A01_pessoal_rgfa01 <- list(
  
  # PESSOAL TOTAL
  `01  Pessoal Total` = list(
    criterio = "grupo_despesa_codigo_grupo == '1' | (grupo_despesa_codigo_grupo == '3' & elemento_despesa_codigo == '34')"
  ),
  
  # VENCIMENTOS, VANTAGENS E OUTRAS DESPESAS VARI√ÅVEIS
  `02  Vencimentos, Vantagens e Outras Despesas Vari√°veis` = list(
    criterio = "grupo_despesa_codigo_grupo == '1' & !elemento_despesa_codigo %in% c('01', '03', '34') & !(elemento_despesa_codigo %in% c('13', '07') & natureza_despesa_detalhada_codigo %in% c('31909213', '31909207')) & !str_detect(natureza_despesa_detalhada_codigo, '0599') & !str_detect(natureza_despesa_detalhada_nome, 'APOSENT|INAT|REFORMA|PEN|LEI 7.963/1989') & !elemento_despesa_codigo %in% c('05', '08', '09', '17', '31', '32', '34') & !str_detect(natureza_despesa_detalhada_codigo, '0505|0506|0507|0508')"
  ),
  
  # OBRIGA√á√ïES PATRONAIS
  `03  Obriga√ß√µes Patronais` = list(
    criterio = "grupo_despesa_codigo_grupo == '1' & elemento_despesa_codigo %in% c('13', '07') & natureza_despesa_detalhada_codigo %in% c('31909213', '31909207')"
  ),
  
  # BENEF√çCIOS PREVIDENCI√ÅRIOS ATIVO
  `04  Benef√≠cios Previdenci√°rios ATIVO` = list(
    criterio = "grupo_despesa_codigo_grupo == '1' & str_detect(natureza_despesa_detalhada_codigo, '0599') & natureza_despesa_detalhada_codigo %in% c('31909205', '31919205')"
  ),
  
  # APOSENTADORIAS, RESERVA E REFORMAS
  `05  Aposentadorias, Reserva e Reformas` = list(
    criterio = "grupo_despesa_codigo_grupo == '1' & elemento_despesa_codigo %in% c('01') & str_detect(natureza_despesa_detalhada_nome, 'APOSENT|RPPS|RESER|REMUNER|REFOR|MILITAR') & natureza_despesa_detalhada_codigo %in% c('31901702', '31909109', '31909118', '31909123', '31909124', '31909128', '31909129', '31909201', '31909403', '31909404', '31909413', '31909414')"
  ),
  
  # PENS√ïES
  `06  Pens√µes` = list(
    criterio = "grupo_despesa_codigo_grupo == '1' & elemento_despesa_codigo %in% c('03') & str_detect(natureza_despesa_detalhada_nome, 'SENT.JUDICIAL|SENTENCA|PENS|MILIT|RPPS|CIVIL|PRECATORIOS') & natureza_despesa_detalhada_codigo %in% c('31909110', '31909113', '31909119', '31909131', '31909136', '31909137', '31909203', '31909216', '31909220', '31909221', '31909406', '31909413')"
  ),
  
  # OUTRAS DESPESAS COM INATIVOS
  `07  Outras Despesas com Inativos` = list(
    criterio = "grupo_despesa_codigo_grupo == '1' & elemento_despesa_codigo %in% c('05', '08', '09', '17', '31', '32', '34') & str_detect(natureza_despesa_detalhada_nome, 'APOSENT|INAT|REFORMA|PEN|LEI 7.963/1989') & !str_detect(natureza_despesa_detalhada_codigo, '0599') & !str_detect(natureza_despesa_detalhada_codigo, '0505|0506|0507|0508') & natureza_despesa_detalhada_codigo %in% c('31901702', '31909109', '31909112', '31909115', '31909118', '31909123', '31909124', '31909128', '31909129', '31909403', '31909404', '31909413', '31909110', '31909113', '31909119', '31909131', '31909136', '31909137', '31909130', '31909221', '31909406')"
  ),
  
  # BENEF√çCIOS PREVIDENCI√ÅRIOS INATIVO  
  `08  Benef√≠cios Previdenci√°rios INATIVO` = list(
    criterio = "grupo_despesa_codigo_grupo == '1' & str_detect(natureza_despesa_detalhada_codigo, '0505|0506|0507|0508')"
  ),
  
  # OUTRAS DESPESAS DE PESSOAL DECORRENTES DE CONTRATOS DE TERCEIRIZA√á√ÉO
  `09  Outras Despesas de Pessoal - Terceiriza√ß√£o` = list(
    criterio = "grupo_despesa_codigo_grupo %in% c('1', '3') & elemento_despesa_codigo == '34'"
  ),
  
  # DECORRENTES DE DECIS√ÉO JUDICIAL
  `10  Decorrentes de Decis√£o Judicial` = list(
    criterio = "grupo_despesa_codigo_grupo == '1' & elemento_despesa_codigo == '91' & !str_detect(natureza_despesa_detalhada_nome, 'APOSENT|INAT|REFORMA|PEN|LEI 7.963/1989') & !fonte_recursos_codigo %in% c('023', '024', '055', '056', '069')"
  ),
  
  # INATIVOS E PENSIONISTAS COM RECURSOS VINCULADOS
  `11  Inativos e Pensionistas com Recursos Vinculados` = list(
    criterio = "grupo_despesa_codigo_grupo == '1' & fonte_recursos_codigo %in% c('023', '024', '055', '056', '069') & elemento_despesa_codigo %in% c('01', '03') & !elemento_despesa_codigo %in% c('05', '08', '09', '17', '31', '32', '34') & !str_detect(natureza_despesa_detalhada_nome, 'APOSENT|INAT|REFORMA|PEN|LEI 7.963/1989')"
  ),
  
  # INDENIZA√á√ïES POR DEMISS√ÉO E INCENTIVOS √Ä DEMISS√ÉO VOLUNT√ÅRIA
  `12  Indeniza√ß√µes por Demiss√£o e Incentivos` = list(
    criterio = "grupo_despesa_codigo_grupo == '1' & elemento_despesa_codigo == '94' & !str_detect(natureza_despesa_detalhada_nome, 'APOSENT|INAT|REFORMA|PEN|LEI 7.963/1989') & !fonte_recursos_codigo %in% c('023', '024', '055', '056', '069')"
  ),
  
  # DESPESAS DE EXERC√çCIOS ANTERIORES
  `13  Despesas de Exerc√≠cios Anteriores` = list(
    criterio = "grupo_despesa_codigo_grupo == '1' & elemento_despesa_codigo == '92' & !fonte_recursos_codigo %in% c('023', '024', '055', '056', '069') & !str_detect(natureza_despesa_detalhada_nome, 'APOSENT|INAT|REFORMA|PEN|LEI 7.963/1989')"
  ),
  
  # FILTROS ESPEC√çFICOS APLICADOS
  
  # Filtro Amap√°
  `14  FILTRO_AMAPA` = list(
    criterio = "unidade_orcamentaria_codigo == '73113' & plano_orcamentario_codigo_po == '0004' & acao_governo_codigo %in% c('0179', '0181', '214H')"
  ),
  
  # Filtro Elementos de Despesa de Outros Inativos
  `15  FILTRO_ELEMENTOS_OUTROS_INATIVOS` = list(
    criterio = "elemento_despesa_codigo %in% c('05', '08', '09', '17', '31', '32', '34')"
  ),
  
  # Filtro Fontes dos Recursos Vinculados
  `16  FILTRO_FONTES_RECURSOS_VINCULADOS` = list(
    criterio = "fonte_recursos_codigo %in% c('023', '024', '055', '056', '069')"
  ),
  
  # Filtro GDF
  `17  FILTRO_GDF` = list(
    criterio = "unidade_orcamentaria_codigo == '73901'"
  ),
  
  # Filtro Roraima
  `18  FILTRO_RORAIMA` = list(
    criterio = "unidade_orcamentaria_codigo == '73113' & plano_orcamentario_codigo_po == '0003' & acao_governo_codigo %in% c('0179', '0181', '214H')"
  ),
  
  # Filtro Termos de Outros Inativos
  `19  FILTRO_TERMOS_OUTROS_INATIVOS` = list(
    criterio = "str_detect(natureza_despesa_detalhada_nome, 'APOSENT|INAT|REFORMA|PEN|LEI 7.963/1989')"
  )
)

# ===============================================================================
# FUN√á√ÉO PARA APLICAR CRIT√âRIOS - CORRIGIDA
# ===============================================================================
aplicar_criterios_rgf_anexo1 <- function(dados, criterios) {
  
  library(dplyr)
  library(purrr)
  library(rlang)
  
  # Detectar automaticamente a m√©trica
  metrica <- names(dados)[grepl("^(saldo|movim)", names(dados), ignore.case = TRUE)][1]
  
  if (is.na(metrica)) {
    stop("N√£o foi poss√≠vel detectar coluna de valores (saldo_r_* ou movim*)")
  }
  
  # Aplicar cada crit√©rio
  resultado <- map_df(names(criterios), function(categoria) {
    
    cat("Aplicando crit√©rio:", categoria, "\n")
    
    crit <- criterios[[categoria]]
    
    tryCatch({
      # Aplicar filtro usando rlang::parse_expr
      dados_filtrados <- dados %>%
        filter(!!rlang::parse_expr(crit$criterio))
      
      # Agregar por categoria
      dados_filtrados %>%
        summarise(
          valor_total = sum(.data[[metrica]], na.rm = TRUE),
          registros = n(),
          .groups = "drop"
        ) %>%
        mutate(
          categoria = categoria,
          metrica = metrica
        )
      
    }, error = function(e) {
      cat("Erro no crit√©rio", categoria, ":", e$message, "\n")
      # Retornar linha vazia em caso de erro
      data.frame(
        categoria = categoria,
        metrica = metrica,
        valor_total = 0,
        registros = 0
      )
    })
  })
  
  return(resultado)
}
```

```{r}
# ===============================================================================
# MUTATE RGF ANEXO 1 - CATEGORIZA√á√ÉO POR REGI√ÉO/PODER
# ===============================================================================

# Adicionar coluna de categoriza√ß√£o baseada nos grupos personalizados
rgf_a01 <- rgf_a01 %>%
  mutate(
    categoria_pessoal = case_when(
      
      # DESPESAS RESSALVADAS (aplicar primeiro - mais espec√≠fico)
      natureza_despesa_detalhada_codigo %in% c(
        "31900503", "31900504", "31900505", "31900506", 
        "31900507", "31900508", "31900501", "31900502"
      ) ~ "ressalvadas",
      
      # PODER EXECUTIVO FEDERAL (aplicar filtros espec√≠ficos depois)
      unidade_orcamentaria_codigo == "73113" & 
      plano_orcamentario_codigo_po == "0004" &
      acao_governo_codigo %in% c("0179", "0181", "214H") ~ "AP",
      
      unidade_orcamentaria_codigo == "73113" & 
      plano_orcamentario_codigo_po == "0003" & 
      acao_governo_codigo %in% c("0179", "0181", "214H") ~ "RR",
      
      unidade_orcamentaria_codigo == "73901" ~ "DF",
      
      uo_poder == "0" &
      !uo_orgao_maximo_codigo %in% c("34000","59000") ~ "executivo",
        
      
      # PODER EXECUTIVO FEDERAL (restante - ap√≥s aplicar filtros espec√≠ficos)
      # Assumindo que existe campo de poder ou similar
      TRUE ~ "demais"
    )
  )
```

```{r}
datatable(aplicar_criterios(rgf_a01 %>% filter(unidade_orcamentaria_codigo == "73901"), criterios_rgf_A01_pessoal_rgfa01))%>% formatRound("valor", 2, mark = ".", dec.mark = "," )
      
      
```

```{r}

```
