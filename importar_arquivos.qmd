---
title: "Importar Planilhas"
editor: visual
lang: "pt"
format:
  # docx: default
  html:
    code-fold: true
    code-summary: "mostrar o código"
    code-overflow: wrap
execute:
  warning: false
  message: false
---

```{r funcoes}
#| warning: false
#| message: false
#| error: true
#| include: false


library(readxl)
library(tidyverse)
library(janitor)
library(lubridate)
library(tidyverse)
library(purrr)
library(plotly)
library(knitr)
library(kableExtra)
library(DescTools)
library(zoo)
library(stringr)
library(DT)
library(stringr)
library(scales)

# https://stackoverflow.com/questions/56997814/how-to-use-vector-of-column-names-as-input-into-dplyrgroup-by

# funcao para pivotar a tabela a partir dos itens de informacao

tabela_pivotada <- function(df, grupo){
  itens <- df$item_informacao_nome %>% unique() %>% na.omit()
  
  df <- df  %>% group_by(!!!syms(grupo))  %>% pivot_wider(names_from = item_informacao_nome, values_from = saldo_r_item_informacao) %>% summarise_at(itens, sum, na.rm = TRUE)
  
  return(df)
  
}


# funcao para formatar a tabela

dt_formatada <- function(df, grupo){
  datatable(df%>% adorn_totals("row"), rownames = FALSE,
            extensions = 'Buttons',
            options = list(
            lengthMenu = c(5, 10, 25, 50, 100),
            dom = 'Bfrtip',
            buttons = list(
              'excel'
            )
          ))%>% formatRound(setdiff( df %>% colnames(), grupo), 2, mark = ".", dec.mark = "," )%>% 
    DT::formatStyle(columns = colnames(.$x$data), fontSize = '75%')
} 




# Função para desmembrar o código
desmembrar_codigo <- function(codigo) {
  # Validar o formato do código: MMM/AAAXXX[A|T]##[A-Za-z0-9]{0,10}
  if (!str_detect(codigo, "^[A-Z]{3}/\\d{4}[A-Za-z0-9]{3}[AT]\\d{2}[A-Za-z0-9]{0,10}$")) {
    stop("Código inválido. Deve seguir o formato: MMM/AAAXXX[A|T]##[A-Za-z0-9]{0,10} (mes_lancamento: 3 letras/mês e 4 dígitos/ano, demonstrativo: exatamente 3 caracteres alfanuméricos, anexo: A ou T + 2 dígitos, parte: até 10 caracteres alfanuméricos)")
  }
  
  # Extrair os componentes
  mes_lancamento <- str_sub(codigo, 1, 8)  # Ex.: "MAI/2025"
  demonstrativo <- str_sub(codigo, 9, 11)  # Ex.: "RGF" ou "REO"
  anexo <- str_sub(codigo, 12, 14)         # Ex.: "A08"
  parte <- str_sub(codigo, 15, -1)         # Ex.: "despesa" ou "" se não houver
  
  # Validar mes_lancamento (formato MMM/AAAA)
  if (!str_detect(mes_lancamento, "^[A-Z]{3}/\\d{4}$")) {
    stop("Formato de mes_lancamento inválido. Deve ser MMM/AAAA (ex.: MAI/2025)")
  }
  
  # Mapear meses para validação
  meses_validos <- c("JAN", "FEV", "MAR", "MAI", "MAI", "JUN", "JUL", "AGO", "SET", "OUT", "NOV", "DEZ")
  mes_letras <- str_sub(mes_lancamento, 1, 3)
  if (!(mes_letras %in% meses_validos)) {
    stop("Mês inválido em mes_lancamento: ", mes_letras)
  }
  
  # Validar demonstrativo (exatamente 3 caracteres alfanuméricos)
  if (!str_detect(demonstrativo, "^[A-Za-z0-9]{3}$")) {
    stop("Formato de demonstrativo inválido. Deve ter exatamente 3 caracteres alfanuméricos (ex.: RGF, REO)")
  }
  
  # Validar anexo (deve começar com A ou T e ter 2 dígitos)
  if (!str_detect(anexo, "^[AT]\\d{2}$")) {
    stop("Formato de anexo inválido. Deve ser A ou T seguido por 2 dígitos (ex.: A08)")
  }
  
  # Definir parte como NA se vazio
  parte <- ifelse(parte == "", NA_character_, parte)
  
  # Retornar os parâmetros
  list(
    mes_lancamento = mes_lancamento,
    demonstrativo = demonstrativo,
    anexo = anexo,
    parte = parte
  )
}



# Função para agrupar, combinar e adicionar colunas com base no código
agrupar_e_combinar_dados <- function(df, criterios, codigo) {
  # Definir o operador notin
  `%notin%` <- Negate(`%in%`)
  
  # Desmembrar o código
  params <- desmembrar_codigo(codigo)
  
  # Filtrar o data frame de entrada com base em mes_lancamento, se a coluna existir
  if ("mes_lancamento" %in% colnames(df)) {
    df <- df %>% filter(mes_lancamento == params$mes_lancamento)
  } else {
    warning("Coluna 'mes_lancamento' não encontrada no data frame. Ignorando filtro por mes.")
  }
  
  # Função para processar cada categoria
  processar_categoria <- function(categoria, crit) {
    # Avaliar a string da condição usando eval(parse())
    condicao_expr <- eval(parse(text = crit$criterio), envir = df)
    
    df %>%
      filter(condicao_expr) %>%
      group_by(mes_lancamento, item_informacao_nome, item_informacao_codigo) %>%
      summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
      mutate(
        categoria = categoria,
        mes_lancamento = params$mes_lancamento,
        demonstrativo = params$demonstrativo,
        anexo = params$anexo,
        parte = params$parte
      ) %>%
      # Reordenar item_informacao_nome com base em item_informacao_codigo
      mutate(item_informacao_nome = fct_reorder(item_informacao_nome, item_informacao_codigo))
  }
  
  # Aplicar os critérios e combinar os resultados
  resultado <- map_df(names(criterios), ~ processar_categoria(.x, criterios[[.x]]))
  
  # Nomear o data frame com o código
  assign(codigo, resultado, envir = .GlobalEnv)
  
  return(resultado)
}

# opcoes globais

`%notin%` <- Negate(`%in%`)

myNumFmt <- as.fmt(digits=2, big.mark=".")

options(scipen = 999)

options(DT.options = 
          list(
            pageLength = 20,
            lengthMenu = c(5, 10, 25, 50, 100),
            language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese.json')
            )
        )
# https://rstudio.github.io/DT/004-i18n.html
# https://rstudio.github.io/DT/options.html



```

```{r dados_despesa }
#| include: false
# selecionar e ler todos os arquivos com dados da despesa

arq_despesa <- list.files( pattern='fechado_despesa_parte')


dados_despesa <- map_df(arq_despesa,read_excel) %>% clean_names()

dados_despesa <- dados_despesa%>% filter(orgao_uge_orcam_fiscal_s_n == "PERTENCE")

# criar as variaveis tipo de modalidade, refinanciamento e poder
dados_despesa <- dados_despesa %>%  
    mutate (
      tipo_modalidade =
        ifelse(modalidade_aplicacao_codigo == 91, "intra", "exceto intra"),
      refinanciamento =
        case_when(
        grupo_despesa_codigo_grupo == 6 &
          elemento_despesa_codigo %in% c(76,77) &
          subfuncao_governo_codigo %in% c(841, 842, 843, 844, 846) &
          fonte_recursos_codigo == "443"  ~ "sim",
        !(grupo_despesa_codigo_grupo == 6 &
          elemento_despesa_codigo %in% c(76,77) &
          subfuncao_governo_codigo %in% c(841, 842, 843, 844, 846) &
          fonte_recursos_codigo == "443" )  ~ "nao",
        TRUE ~ "escape"),
      poder = case_when(
        orgao_uge_orgao_maximo_codigo %in% c(59000)  ~ "MINISTÉRIO PÚBLICO DA UNIÃO",
        orgao_uge_orgao_maximo_codigo %in% c(29000) ~ "DEFENSORIA PÚBLICA",
        TRUE ~ orgao_uge_poder_nome
      )
        
      )





```

\

```{r  demais_dados}
# importar dados da receita

# arq_receita<- list.files( pattern='dados_2025_receita')
# 
# 
# dados_receita <- map_df(arq_receita,read_excel) %>% clean_names()

#dados_receita <- read_excel("dados_2024_receita.xlsx") %>% clean_names()


# criar as variaveis tipo de modalidade e refinanciamento

dados_receita <- read_excel("receita.xlsx") %>% clean_names() %>% filter(orgao_uge_orcam_fiscal_s_n == "PERTENCE")




dados_receita <- dados_receita %>% 
  mutate(tipo_modalidade =
           ifelse(nre1_categoria_economica_codigo %in% c(7,8), "intra", "exceto intra"),
         refinanciamento = 
           ifelse(natureza_receita_codigo_completo %in% c(81110201,21110201,21210201), "sim", "nao")
    
  )




dados_rp_anexo_07 <- read_excel("dados_2024_rp_anexo_07.xlsx") %>% clean_names()


dados_rp_anexo_07 <- dados_rp_anexo_07 %>%  
    mutate (
      tipo_modalidade =
        ifelse(modalidade_aplicacao_codigo == 91, "intra", "exceto intra"),
      poder = case_when(
        orgao_uge_orgao_maximo_codigo %in% c(59000)  ~ "MINISTÉRIO PÚBLICO DA UNIÃO",
        orgao_uge_orgao_maximo_codigo %in% c(29000) ~ "DEFENSORIA PÚBLICA",
        TRUE ~ orgao_uge_poder_nome
      )
        
      )


# importar os dados de RP do anexo 12

dados_rp_anexo_12 <- read_excel("rp_anexo_12.xlsx") %>% clean_names()

# importar as contas contabeis para a tabela 04

dados_tabela_04 <- read_excel("dados_2024_conta_contabil_tabela_04.xlsx") %>% clean_names()

# importar as tabelas referentes a metodologia

filtros_metodologia  <- read_excel("filtros.xlsx", sheet = "metodologia") 

atributos_metodologia <- read_excel("filtros.xlsx", sheet = "metodologia")

dados_rp_anexo_08 <- read_excel("dados_2025_rp_anexo_08.xlsx") %>% clean_names()


```

```{r despesas_mde}
#| warning: false
#| message: false
#| error: true
#| include: false
library(dplyr)
library(purrr)
library(forcats)
library(stringr)



# Definir a lista de critérios
criterios_educacao <- list(
  `08 - COMPLEMENTAÇÃO DA UNIÃO - VAAT` = list(
    criterio = "acao_governo_codigo %in% c('00SB', '0E36') & fonte_recursos_codigo %notin% c('133', '134', '213', '008', '035', '212') & plano_orcamentario_codigo_po == '0001'"
  ),
  `09 - COMPLEMENTAÇÃO DA UNIÃO - VAAT` = list(
    criterio = "acao_governo_codigo %in% c('00SB', '0E36') & fonte_recursos_codigo %notin% c('133', '134', '213', '008', '035', '212') & plano_orcamentario_codigo_po %in% c('0002')"
  ),
  `01 - COMPLEMENTAÇÃO DA UNIÃO AO FUNDEB` = list(
    criterio = "acao_governo_codigo %in% c('00SB', '0E36')"
  ),
  `03 - EDUCAÇÃO BÁSICA` = list(
    criterio = "fonte_recursos_codigo %notin% c('008', '035', '133', '134', '213', '242') & iduso_codigo == 8 & elemento_despesa_codigo %notin% c('01', '03', '59') & subfuncao_governo_codigo == '368'"
  ),
  `04 - ENSINO SUPERIOR` = list(
    criterio = "fonte_recursos_codigo %notin% c(157, 175, 193, 109, 134, 181) & iduso_codigo == 8 & elemento_despesa_codigo %notin% c('01', '03', '59') & subfuncao_governo_codigo %in% c('364')"
  ),
  `05 - ENSINO PROFISSIONAL NÃO INTEGRADO AO ENSINO REGULAR` = list(
    criterio = "fonte_recursos_codigo %notin% c('008', '035', '133', '134') & iduso_codigo == 8 & elemento_despesa_codigo %notin% c('01', '03', '59') & subfuncao_governo_codigo == '363'"
  ),
  `06 - OUTRAS` = list(
    criterio = "fonte_recursos_codigo %notin% c('008', '035', '133', '134') & iduso_codigo == 8 & elemento_despesa_codigo %notin% c('01', '03', '59') & !subfuncao_governo_codigo %in% c('363', '364',  '368') & acao_governo_codigo %notin% c ('00SB', '0E36')"
  ),
  `11 - DESPESAS CUSTEADAS COM A CONTRIBUIÇÃO SOCIAL DO SALÁRIO-EDUCAÇÃO` = list(
    criterio = "fonte_recursos_codigo %in% c('133', '134', '213', '008', '035', '212') & iduso_codigo == 8 & acao_governo_codigo %notin% c('00SB', '0E36')"
  ),
  `12 - DESPESAS COM O FUNDO CONSTITUCIONAL DO DISTRITO FEDERAL - FCDF` = list(
    criterio = "acao_governo_codigo %in% c('0312') & fonte_recursos_codigo %notin% c('133', '134', '213', '008', '035', '212')"
  ),
  `13 - DESPESAS CUSTEADAS COM RECEITAS DE ROYALTIES DE EXPLORAÇÃO DO PRÉ-SAL` = list(
    criterio = "fonte_recursos_codigo %in% c('242') & iduso_codigo == 8 & elemento_despesa_codigo %in% c('01', '03', '59')"
  ),
  `14 - DEMAIS DESPESAS COM EDUCAÇÃO` = list(
    criterio = "iduso_codigo == 8 & fonte_recursos_codigo %in% c( '008', '035', '133', '134', '213', '050', '000' ) & elemento_despesa_codigo %in% c('01', '03', '59') & acao_governo_codigo %notin% c ('00SB', '0312', '0E36') "
  ),
  `09b - VAAT po 26298 12 847 5111 00SB 0003` = list(
    criterio = "plano_orcamentario_codigo_po %in% c( '0003') & funcao_governo_codigo == '12'& subfuncao_governo_codigo == '847'& programa_governo_codigo == 5111 & acao_governo_codigo == '00SB' & unidade_orcamentaria_codigo ==  '26298' "
  )
)

# 26298 12 847 5111 00SB 0003

# plano_orcamentario_codigo_po %in% c( '0003'), funcao_governo_codigo == '12'& subfuncao_governo_codigo == '847', programa_governo_codigo == 5111&  acao_governo_codigo == '00SB'& unidade_orcamentaria_codigo ==  '26298' 
```

```{r dt_mde}


anexo_08 <- agrupar_e_combinar_dados(dados_despesa, criterios_educacao, "MAI/2025REOA08despesas")

anexo_08 <- anexo_08 %>%   separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

dados <- anexo_08 %>% 
  filter(mes_lancamento == "MAI/2025") %>%
  group_by(categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)

datatable(dados) %>%
  formatRound(which(sapply(dados, is.numeric)), 2, mark = ".", dec.mark = ",")


datatable (dados_rp_anexo_08%>%
  filter(mes_lancamento == 'MAI/2025',  !elemento_despesa_codigo %in% c('01', '03') &
         ((fonte_recursos_codigo %in% c('000', '012', '00' , '12') & 
           (iduso_codigo == 8 | lei_calmon_s_n == 'SIM')) |
          (ne_c_cor_ano_emissao >= 2020 & 
           !fonte_recursos_codigo %in% c('133', '134', '213', '08', '13', '93') & 
           iduso_codigo == 8)) )%>% group_by(item_informacao_nome) %>% summarise(saldo = sum(saldo_r_item_informacao, na.rm =  TRUE)))

despesa_mde_rp <- dados_rp_anexo_08%>%
  filter(mes_lancamento == 'MAI/2025',  !elemento_despesa_codigo %in% c('01', '03') &
         ((fonte_recursos_codigo %in% c('000', '012', '00' , '12') & 
           (iduso_codigo == 8 | lei_calmon_s_n == 'SIM')) |
          (ne_c_cor_ano_emissao >= 2020 & 
           !fonte_recursos_codigo %in% c('133', '134', '213', '08', '13', '93') & 
           iduso_codigo == 8)) )%>%  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao, na.rm =  TRUE))

```

```{r minimo_mde }
#| warning: false
#| message: false
#| error: true

dados_receita %>% filter(startsWith(natureza_receita_codigo_completo , '711')| startsWith(natureza_receita_codigo_completo , '111'), mes_lancamento == 'MAI/2025', item_informacao_codigo == 3) %>% summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao))

datatable( dados_receita %>% filter(item_informacao_codigo == "5",startsWith(natureza_receita_codigo_completo , '711')| startsWith( natureza_receita_codigo_completo,"111")|startsWith(natureza_receita_codigo_completo , '711')) %>% group_by(mes_lancamento) %>% summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao)))


rli_transf <- dados_despesa %>% filter( item_informacao_codigo == "56", mes_lancamento == "MAI/2025" ) %>% mutate(transferencia = case_when(
  acao_governo_codigo == "0044" ~ "FPE",
  acao_governo_codigo == "0045" ~ "FPM",
  acao_governo_codigo == "0046" ~ "IPI_repasse",
  acao_governo_codigo == "0C33" ~ "FUNDEB",
  acao_governo_codigo == "00H6" ~ "IOF_repasse",
  acao_governo_codigo == "006M" ~ "ITR_repasse",
  .default = "demais"
  
))%>% group_by(transferencia) %>%  summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao, na.rm = TRUE))


datatable(rli_transf) 


rli_transf <- dados_despesa %>% filter( item_informacao_codigo == "56" ) %>% mutate(transf = case_when(
  acao_governo_codigo == "0044" ~ "FPE",
  acao_governo_codigo == "0045" ~ "FPM",
  acao_governo_codigo == "0046" ~ "IPI_repasse",
  acao_governo_codigo == "0C33" ~ "FUNDEB",
  acao_governo_codigo == "00H6" ~ "IOF_repasse",
  acao_governo_codigo == "006M" ~ "ITR_repasse",
  .default = "demais"
  
))%>% group_by(transf, mes_lancamento) %>%  summarise(transferencia = sum(saldo_r_item_informacao, na.rm = TRUE))


datatable(rli_transf) %>% 
  formatRound(columns = c( "transferencia"), 2, mark = ".", dec.mark = "," )
rli_mensal <- full_join(dados_receita%>% filter(item_informacao_codigo == "5",startsWith(natureza_receita_codigo_completo , '711')| startsWith( natureza_receita_codigo_completo,"111")) %>% group_by(mes_lancamento) %>% summarise(receita = sum(saldo_r_item_informacao)) , rli_transf %>% filter(transf != "demais")%>% group_by(mes_lancamento) %>% summarise(transferencia = sum(transferencia)))

rli_mensal <- rli_mensal  %>% mutate(rli = (receita - transferencia)*.18)

rli_maio <- rli_mensal %>% filter(mes_lancamento == "MAI/2025")  %>% summarise(minimo = sum(rli))


despesa_mde <- anexo_08 %>% filter(item_informacao_codigo == 25, ordem %in% c("02", "03", "04", "05", "06")) %>% summarise(saldo_r_item_informacao= sum(saldo_r_item_informacao))



complementacao_fundeb <- dados_despesa %>% filter(item_informacao_codigo == 25, mes_lancamento == "MAI/2025", fonte_recursos_codigo %in% c('000', '008' ,'014', '130'), acao_governo_codigo %in% c ('0E36', '00SB' ) )  %>% summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao)*0.3)


((complementacao_fundeb$saldo_r_item_informacao + despesa_mde$saldo_r_item_informacao)/rli_maio$minimo*100)

```

```{r saude_iduso_6}


despesas_saude <- dados_despesa %>% filter(mes_lancamento == "MAI/2025", iduso_codigo == 6, item_informacao_codigo == 25, subfuncao_governo_codigo %in% c(301, 302, 303, 304, 305, 306 )) %>% group_by(subfuncao_governo_codigo, subfuncao_governo_nome, categoria_economica_despesa_codigo,categoria_economica_despesa_nome, modalidade_aplicacao_codigo)%>% summarise(saldo_r_item_informacao=sum(saldo_r_item_informacao)) 

despesas_saude <-  despesas_saude %>% mutate(transferencia = ifelse(modalidade_aplicacao_codigo %in% c ('30', '31', '32', '35', '36', '40', '41', '42', '45', '46'), "_transferencia", "aplicacao_direta"))




datatable(despesas_saude %>% group_by(subfuncao_governo_codigo, subfuncao_governo_nome,categoria_economica_despesa_codigo, categoria_economica_despesa_nome, transferencia) %>% summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao)))%>%
  formatRound(which(sapply(despesas_saude, is.numeric)), 2, mark = ".", dec.mark = ",")


sum(despesas_saude$saldo_r_item_informacao)



despesas_saude_demais <- as.numeric( dados_despesa %>% filter(mes_lancamento == "MAI/2025", iduso_codigo == 6, item_informacao_codigo == 25, subfuncao_governo_codigo %notin% c(301, 302, 303, 304, 305, 306 )) %>% summarise(saldo_r_item_informacao=sum(saldo_r_item_informacao)))


(sum(despesas_saude$saldo_r_item_informacao) + despesas_saude_demais)



despesas_saude <- dados_despesa %>% filter(mes_lancamento == "MAI/2025", iduso_codigo == 6, item_informacao_codigo == 25) %>% group_by(subfuncao_governo_codigo, subfuncao_governo_nome, categoria_economica_despesa_codigo,categoria_economica_despesa_nome, modalidade_aplicacao_codigo)%>% summarise(saldo_r_item_informacao=sum(saldo_r_item_informacao)) 


despesas_saude <- despesas_saude %>% mutate(
  subfuncao_governo_codigo = case_when(
    subfuncao_governo_codigo %in% c(301, 302, 303, 304, 305, 306 ) ~ subfuncao_governo_codigo,
    TRUE ~ "demais"
  ),
  subfuncao_governo_nome = case_when(
    subfuncao_governo_codigo %in% c(301, 302, 303, 304, 305, 306 ) ~ subfuncao_governo_nome,
    TRUE ~ "demais"),
  transferencia = ifelse(modalidade_aplicacao_codigo %in% c ('30', '31', '32', '35', '36', '40', '41', '42', '45', '46'), "_transferencia", "aplicacao_direta"))

datatable(despesas_saude %>% group_by(subfuncao_governo_codigo, subfuncao_governo_nome,categoria_economica_despesa_codigo, categoria_economica_despesa_nome, transferencia) %>% summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao)))%>%
  formatRound(which(sapply(despesas_saude, is.numeric)), 2, mark = ".", dec.mark = ",")

sum(despesas_saude$saldo_r_item_informacao)/1000


despesa_saude_nao_computadas <-  dados_despesa %>% filter(mes_lancamento == "MAI/2025", iduso_codigo != 6, item_informacao_codigo == 25,uo_orgao_superior_codigo == "36000", unidade_orcamentaria_codigo != "74202" )%>% group_by(subfuncao_governo_codigo, subfuncao_governo_nome, categoria_economica_despesa_codigo,categoria_economica_despesa_nome, modalidade_aplicacao_codigo) %>%  summarise(saldo_r_item_informacao=sum(saldo_r_item_informacao)) 


despesa_saude_nao_computadas <- despesa_saude_nao_computadas %>% mutate(
  subfuncao_governo_codigo = case_when(
    subfuncao_governo_codigo %in% c(301, 302, 303, 304, 305, 306 ) ~ subfuncao_governo_codigo,
    TRUE ~ "demais"
  ),
  subfuncao_governo_nome = case_when(
    subfuncao_governo_codigo %in% c(301, 302, 303, 304, 305, 306 ) ~ subfuncao_governo_nome,
    TRUE ~ "demais"),
  transferencia = ifelse(modalidade_aplicacao_codigo %in% c ('30', '31', '32', '35', '36', '40', '41', '42', '45', '46'), "_transferencia", "aplicacao_direta"))

datatable(despesa_saude_nao_computadas%>% group_by(subfuncao_governo_codigo, subfuncao_governo_nome,categoria_economica_despesa_codigo, categoria_economica_despesa_nome, transferencia) %>% summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao)))%>%
  formatRound(which(sapply(despesa_saude_nao_computadas, is.numeric)), 2, mark = ".", dec.mark = ",")


  
```

```{r tabela_01}
#| warning: false
#| message: false
#| error: true
#| include: false
#| include: false


# ===============================================================================
# OBSERVAÇÕES IMPORTANTES SOBRE TABELA 1A COLUNAS
# ===============================================================================

# ITEM INFORMAÇÃO:
# - "PREVISAO ATUALIZADA DA RECEITA": Para previsões orçamentárias
# - "RECEITA ORCAMENTARIA (LIQUIDA)": Para receitas realizadas

# FONTES DE RECURSOS:
# - 000: RECURSOS ORDINÁRIOS
# - 023: RECURSOS LIVRES DA UNIÃO

# FONTES DETALHAMENTO:
# - 980001: Fonte detalhada específica
# - 739010: Fonte detalhada específica

# ESFERA ORÇAMENTÁRIA:
# - 1: ORÇAMENTO FISCAL

# NATUREZAS DE RECEITA ESPECÍFICAS:
# As naturezas listadas incluem diferentes tipos de receitas:
# - 1210xxx: Receitas correntes específicas
# - 7210xxx: Receitas intra-orçamentárias

# PERÍODOS DE ANÁLISE:
# - "no mês": Apenas o mês atual de lançamento
# - "até o mês": Acumulado desde o início do exercício até o mês atual
# - Filtro temporal: mes_lancamento para controle do período

# MOVIMENTAÇÃO LÍQUIDA:
# - O critério considera apenas valores líquidos (após deduções)
# - Importante para análise de arrecadação efetiva

criterios_receitas_tabela1a <- list(
  
  # PREVISÃO ATUALIZADA (a)
  `01  PREVISÃO ATUALIZADA (a)` = list(
    criterio = "item_informacao_nome %in% c('PREVISAO ATUALIZADA DA RECEITA') & natureza_receita_codigo_completo %in% c('1210011', '1210112', '1210113', '1210211', '1210212', '1210213', '1210511', '1210661', '1210711', '1210721', '1210741', '1210761', '1210911', '1210912', '1210913', '1210161', '1210131', '1210141', '1210143', '1210161', '1210163', '1210181', '1210183', '1210421', '1210431', '1210511', '1210621', '1210751', '1210811', '1210171', '7210411', '7210911') & fonte_recursos_codigo %in% c('000', '023') & esfera_orcamentaria_codigo %in% c(1)"
  ),
  
  # RECEITAS REALIZADAS no mês
  `02  RECEITAS REALIZADAS no mês` = list(
    criterio = "item_informacao_nome %in% c('RECEITA ORCAMENTARIA (LIQUIDA)') & fonte_recursos_codigo %in% c('000', '023') & endsWith(fonte_recursos_detalhada_codigo,  c('980001', '739010')) & mes_lancamento == format(Sys.Date(), '%b/%Y')"
  ),
  
  # RECEITAS REALIZADAS até o mês
  `03  RECEITAS REALIZADAS até o mês` = list(
    criterio = "item_informacao_nome %in% c('RECEITA ORCAMENTARIA (LIQUIDA)') & endsWith(fonte_recursos_detalhada_codigo,  c('980001', '739010')) & fonte_recursos_codigo %in% c('000', '023') & mes_lancamento <= format(Sys.Date(), '%b/%Y')"
  )
)
```

```{r rpps_fcdf_receitas_despesas}
#| warning: false
#| message: false
#| error: true
#| include: false

criterios_receitas_fcdf <- list(
  
  # FCDF - RECEITA SEGURADOS - Ativo
  `01  FCDF - RECEITA SEGURADOS - Ativo` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12100431', '12104211', '12104221', '12104231', '12104411', '12104421', '12104431', '12104611', '12104621', '12104631', '12191111', '12191321', '12191411') | startsWith(natureza_receita_codigo_completo, '121503') | startsWith(natureza_receita_codigo_completo, '1215011') | startsWith(natureza_receita_codigo_completo, '1215014'))"
  ),
  
  # FCDF - RECEITA SEGURADOS - Inativos
  `02  FCDF - RECEITA SEGURADOS - Inativos` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12104311', '12104321', '12104331', '12104341', '12104711') | startsWith(natureza_receita_codigo_completo, '1215012') | startsWith(natureza_receita_codigo_completo, '1215015'))"
  ),
  
  # FCDF - RECEITAS SEGURADOS - Pensionistas
  `03  FCDF - RECEITAS SEGURADOS - Pensionistas` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12104811', '12104411', '12104421', '12104431', '12104441', '12105121', '12105131') | startsWith(natureza_receita_codigo_completo, '1215013') | startsWith(natureza_receita_codigo_completo, '1215016'))"
  ),
  
  # FCDF - RECEITA PATRONAL - Ativo
  `04  FCDF - RECEITA PATRONAL - Ativo` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12104111', '12104131', '12104121', '12104141', '72104111', '72104121', '72104131', '72104141', '72104511', '72104521', '72104531', '72104541') | startsWith(natureza_receita_codigo_completo, '121502') | startsWith(natureza_receita_codigo_completo, '721502'))"
  ),
  
  # FCDF - RECEITA PATRONAL - Inativos e Pensionistas - vinculada
  `05  FCDF - RECEITA PATRONAL - Inativos e Pensionistas - vinculada` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & natureza_receita_codigo_completo %in% c('72104411', '12150211')"
  ),
  
  # DRU - FCDF
  `06  DRU - FCDF` = list(
    criterio = "fonte_recursos_codigo %in% c('00', '000') & (natureza_receita_codigo_completo %in% c('12104811', '12104411', '12104421', '12104431', '12104441', '12105111', '12104211', '12104221', '12104231', '12104311', '12104321', '12104331', '12104341', '12104521', '12104531', '12104621', '12104631', '12104721', '12104731', '12104741', '12104831', '12104841') | startsWith(natureza_receita_codigo_completo, '1215') | startsWith(natureza_receita_codigo_completo, '7215'))"
  ),
  
  # Total de Receitas RPPS FCDF
  `07  Total de Receitas RPPS FCDF` = list(
    criterio = "unidade_orcamentaria_codigo %notin% c('55902', '33904') & fonte_recursos_codigo %notin% c('54', '054') & fonte_recursos_detalhada_codigo %notin% c('010073910') & fonte_recursos_codigo %in% c('23', '56', '023', '056', '024', '069') & (grepl('PENSI|PENSO|RPPS|CPSS', natureza_receita_nome, ignore.case = TRUE))"
  ),
  
  # Receitas detalhadas FCDF (critério ampliado)
  `08  Receitas detalhadas FCDF` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12104111', '12104131', '12104121', '12104141', '72104111', '72104121', '72104131', '72104141', '12104511', '12104531', '12104541', '12150211') | startsWith(natureza_receita_codigo_completo, '1215502') | startsWith(natureza_receita_codigo_completo, '721502'))"
  )
)

# ===============================================================================
# CRITÉRIOS DE DESPESAS FCDF (aplicados à df dados_despesa)
# ===============================================================================

criterios_despesas_fcdf <- list(
  
  # FCDF - DESPESAS - A detalhar
  `01  FCDF - DESPESAS - A detalhar` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(1, 2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('00') & acao_governo_codigo %in% c('00Q2', '00QN', '00NS')"
  ),
  
  # FCDF - DESPESAS - Aposentadorias
  `02  FCDF - DESPESAS - Aposentadorias` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(1, 2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('01') & acao_governo_codigo %in% c('00Q2', '00QN', '00NS', '0312', '00NR')"
  ),
  
  # FCDF - DESPESAS - Pensões
  `03  FCDF - DESPESAS - Pensões` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(1, 2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('03') & acao_governo_codigo %in% c('00Q2', '00QN', '00NS', '0312', '00NR')"
  ),
  
  # FCDF - DESPESAS - Outros Benefícios Previdenciários
  `04  FCDF - DESPESAS - Outros Benefícios Previdenciários` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(1, 2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845', '846') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %notin% c('00', '01', '03') & (acao_governo_codigo %in% c('00Q2', '00NS', '00QN') | (acao_governo_codigo %in% c('0005', '0625') & funcao_governo_codigo %notin% c('10', '08')))"
  ),
  
  # Critérios Gerais de Despesas e Verificação FCDF
  `05  Critérios Gerais de Despesas e Verificação FCDF` = list(
    criterio = "grupo_despesa_codigo_grupo %in% c(1) & subfuncao_governo_codigo %in% c('272', '273', '274', '845', '846') & (acao_governo_codigo %in% c('00Q2', '00NS', '00QN') | (acao_governo_codigo %in% c('0005', '0625') & funcao_governo_codigo %notin% c('08', '10'))) | (grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('01', '03') & fonte_recursos_codigo %notin% c('000', '023'))"
  )
)

```

```{r receitas_rpps_fcdf}


receita_rpps_fcdf<- agrupar_e_combinar_dados(
  df = dados_receita %>% filter(unidade_orcamentaria_codigo %in% c(73901)  ) ,
  criterios = criterios_receitas_fcdf,
  codigo = "MAI/2025REOA12saude"
)

receita_rpps_fcdf <- receita_rpps_fcdf %>%   separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_receita_rpps_fcdf <- receita_rpps_fcdf %>% 
  filter(mes_lancamento == "MAI/2025") %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)

datatable(receita_rpps_fcdf)%>%
  formatRound(which(sapply(receita_rpps_fcdf, is.numeric)), 2, mark = ".", dec.mark = ",")
```

```{r despesa_rpps_fcdf}
despesa_rpps_fcdf<- agrupar_e_combinar_dados(
  df = dados_despesa %>% filter(unidade_orcamentaria_codigo %in% c(73901) , elemento_despesa_codigo %notin% c(04, 07, 11, 13, 16, 39, 67,96), acao_governo_codigo != '09HB' ) ,
  criterios = criterios_despesas_fcdf,
  codigo = "MAI/2025REOA12saude"
)

despesa_rpps_fcdf <- despesa_rpps_fcdf %>%   separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_despesa_rpps_fcdf <- despesa_rpps_fcdf %>% 
  filter(mes_lancamento == "MAI/2025") %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)

datatable(despesa_rpps_fcdf)%>%
  formatRound(which(sapply(despesa_rpps_fcdf, is.numeric)), 2, mark = ".", dec.mark = ",")
```

```{r rpps_receitas_despesas}
#| warning: false
#| message: false
#| error: true
#| include: false

# ===============================================================================
# CRITÉRIOS ANEXO 4 - RPPS - LINHAS - 2023
# ===============================================================================

# ===============================================================================
# CRITÉRIOS DE RECEITAS RPPS (aplicados à df dados_receita)
# ===============================================================================

criterios_receitas_rpps <- list(
  
  # CIVIS - RECEITA SEGURADOS - Ativo
  `01  CIVIS - RECEITA SEGURADOS - Ativo` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12100431', '12104211', '12104221', '12104231', '12104411', '12104421', '12104431', '12104611', '12104621', '12104631') | startsWith(natureza_receita_codigo_completo, '1215011') | startsWith(natureza_receita_codigo_completo, '1215014') | startsWith(natureza_receita_codigo_completo, '121503'))"
  ),
  
  # CIVIS - RECEITA SEGURADOS - Inativos
  `02  CIVIS - RECEITA SEGURADOS - Inativos` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12104311', '12104321', '12104331', '12104341', '12104711') | startsWith(natureza_receita_codigo_completo, '1215012') | startsWith(natureza_receita_codigo_completo, '1215015'))"
  ),
  
  # CIVIS - RECEITAS SEGURADOS - Pensionistas
  `03  CIVIS - RECEITAS SEGURADOS - Pensionistas` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12104811', '12104411', '12104421', '12104431', '12104441') | startsWith(natureza_receita_codigo_completo, '1215013') | startsWith(natureza_receita_codigo_completo, '1215016'))"
  ),
  
  # CIVIS - RECEITA PATRONAL - Ativo
  `04  CIVIS - RECEITA PATRONAL - Ativo` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12104111', '12104131', '12104121', '12104141', '72104111', '72104121', '72104131', '72104141', '72104511', '72104521', '72104531', '72104541') | startsWith(natureza_receita_codigo_completo, '121502') | startsWith(natureza_receita_codigo_completo, '721502'))"
  ),
  
  # CIVIS - RECEITA PATRONAL - Inativos e Pensionistas - vinculada
  `05  CIVIS - RECEITA PATRONAL - Inativos e Pensionistas - vinculada` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & natureza_receita_codigo_completo %in% c('72104411')"
  ),
  
  # DRU - FCDF
  `06  DRU - FCDF` = list(
    criterio = "fonte_recursos_codigo %in% c('000', '00') & endsWith(fonte_recursos_detalhada_codigo, '980001') & startsWith(natureza_receita_codigo_completo, '12151')"
  ),
  
  # MILITARES - RECEITAS - Segurados
  `07  MILITARES - RECEITAS - Segurados` = list(
    criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12105111', '12105121', '12105131', '12105141', '12150411', '12150412', '12150421', '12150431', '12150441') | startsWith(natureza_receita_codigo_completo, '121911'))"
  ),
  
  # Total das Receitas RPPS
  `08  Total das Receitas RPPS` = list(
    criterio = "unidade_orcamentaria_codigo %notin% c('33904', '40904') & fonte_recursos_codigo %notin% c('54', '00', '000', '054') & (grepl('PENSOES MILIT|PENS.MIL|RPPS|CPSS|CIV', natureza_receita_nome, ignore.case = TRUE) | startsWith(natureza_receita_codigo_completo, '1215') | startsWith(natureza_receita_codigo_completo, '7215'))"
  ),
  
  # Total das Receitas RPPS (*)
  `09  Total das Receitas RPPS (*)` = list(
    criterio = "natureza_receita_codigo_completo %in% c('12100400', '19125600', '13210401', '32210400', '13210400', '19125615', '12100440', '12100464', '12100474', '12100473', '12100476', '12100463', '12100451', '12100452', '12100460', '12100456', '12100461', '12100433', '12100432', '12100433', '12100412', '12100413', '12100441', '12100410', '12100414') | startsWith(natureza_receita_codigo_completo, '19151900') | startsWith(natureza_receita_codigo_completo, '19221001') | startsWith(natureza_receita_codigo_completo, '19325500') | startsWith(natureza_receita_codigo_completo, '19990101') | startsWith(natureza_receita_codigo_completo, '72100400')"
  )
)

# ===============================================================================
# CRITÉRIOS DE DESPESAS RPPS (aplicados à df dados_despesa)
# ===============================================================================

criterios_despesas_rpps <- list(
  
  # CIVIS - DESPESAS - A detalhar
  `01  CIVIS - DESPESAS - A detalhar` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('00') & acao_governo_codigo %in% c('0053', '0181') & funcao_governo_codigo %notin% c('10', '08')"
  ),
  
  # CIVIS - DESPESAS - Aposentadorias
  `02  CIVIS - DESPESAS - Aposentadorias` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('01') & acao_governo_codigo %in% c('0053', '0181')"
  ),
  
  # CIVIS - DESPESAS - Pensões
  `03  CIVIS - DESPESAS - Pensões` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('03') & acao_governo_codigo %in% c('0053', '0181')"
  ),
  
  # CIVIS - DESPESAS - Outros Benefícios Previdenciários
  `04  CIVIS - DESPESAS - Outros Benefícios Previdenciários` = list(
    criterio = "subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %notin% c('00', '01', '03') & (acao_governo_codigo %in% c('0053', '0181', '0005', '0625') & funcao_governo_codigo %notin% c('10', '08') | acao_governo_codigo %in% c('0397'))"
  ),
  
  # CIVIS - Extinto Instituto de Previdência da Câmara
  `05  CIVIS - Extinto Instituto de Previdência da Câmara` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & acao_governo_codigo %in% c('0397')"
  ),
  
  # CIVIS - Demais Benefícios
  `06  CIVIS - Demais Benefícios` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %notin% c('00', '01', '03') & acao_governo_codigo %in% c('0053', '0181', '0005', '0625') & funcao_governo_codigo %notin% c('10', '08')"
  ),
  
  # MILITARES - RECEITAS - Segurados (duplicado - remover)
  # `07  MILITARES - RECEITAS - Segurados` = list(
  #   criterio = "fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12105111', '12105121', '12105131', '12105141', '12104101', '12104121', '12104141') | startsWith(natureza_receita_codigo_completo, '121911'))"
  # ),
  
  # MILITARES - DESPESAS - A Detalhar Pensões
  `08  MILITARES - DESPESAS - A Detalhar Pensões` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & acao_governo_codigo %in% c('0179', '000Q') & elemento_despesa_codigo %in% c('00')"
  ),
  
  # MILITARES - DESPESAS - Pensões
  `09  MILITARES - DESPESAS - Pensões` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & grupo_despesa_codigo_grupo %in% c(1) & acao_governo_codigo %in% c('0179', '000Q') & elemento_despesa_codigo %in% c('03')"
  ),
  
  # MILITARES - DESPESAS - Outros Benefícios Pensionistas
  `10  MILITARES - DESPESAS - Outros Benefícios Pensionistas` = list(
    criterio = "esfera_orcamentaria_codigo %in% c(2) & grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %notin% c('03', '00') & acao_governo_codigo %in% c('0179', '000Q') & subfuncao_governo_codigo %in% c('272', '273', '274', '845')"
  ),
  
  # MILITARES - DESPESAS - A Detalhar Inativos
  `11  MILITARES - DESPESAS - A Detalhar Inativos` = list(
    criterio = "grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('00') & acao_governo_codigo %in% c('214H', '218K')"
  ),
  
  # MILITARES - DESPESAS - Inativos
  `12  MILITARES - DESPESAS - Inativos` = list(
    criterio = "grupo_despesa_codigo_grupo %in% c(1) & elemento_despesa_codigo %in% c('01') & acao_governo_codigo %in% c('214H', '218K')"
  ),
  
  # MILITARES - DESPESAS - Outros Benefícios Inativos
  `13  MILITARES - DESPESAS - Outros Benefícios Inativos` = list(
    criterio = "acao_governo_codigo %in% c('214H', '218K') & elemento_despesa_codigo %notin% c('00', '01')"
  ),
  
  # MILITARES - DESPESAS - Compensação financeira entre RPPSU e os demais RPPS
  `14  MILITARES - DESPESAS - Compensação financeira entre RPPSU e os demais RPPS` = list(
    criterio = "acao_governo_codigo %in% c('00XJ')"
  ),
  
  # DRU - MILITARES
  `15  DRU - MILITARES` = list(
    criterio = "fonte_recursos_codigo %in% c('00', '000') & endsWith(fonte_recursos_detalhada_codigo, '980001') & natureza_receita_codigo_completo %in% c('12105111', '12105121', '12105131', '12105141') & startsWith(natureza_receita_codigo_completo, '121911')"
  ),
  
  # Critérios Gerais de Despesas e Verificação
  `16  Critérios Gerais de Despesas e Verificação` = list(
    criterio = "(esfera_orcamentaria_codigo %in% c(2) & grupo_despesa_codigo_grupo %in% c(1) & subfuncao_governo_codigo %in% c('272', '273', '274', '845') & acao_governo_codigo %in% c('0005', '0625') & funcao_governo_codigo %in% c('08', '10')) | acao_governo_codigo %in% c('214H', '218K') | (grupo_despesa_codigo_grupo %in% c(1) & acao_governo_codigo != '21BW' & elemento_despesa_codigo %in% c('01', '03'))"
  )
)


```

```{r receita_rpps}
receita_rpps<- agrupar_e_combinar_dados(
  df = dados_receita %>% filter(unidade_orcamentaria_codigo %notin% c(73901),
      
      # Fonte Recursos: Não relacionado (054:0023:BENEFICIOS DO RGPS)
      fonte_recursos_codigo %notin% c('054') ) ,
  criterios = criterios_receitas_rpps,
  codigo = "MAI/2025REOA12saude"
)

receita_rpps <- receita_rpps %>%   separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_receita_rpps <- receita_rpps %>% 
  filter(mes_lancamento == "MAI/2025") %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)

datatable(receita_rpps)%>%
  formatRound(which(sapply(receita_rpps, is.numeric)), 2, mark = ".", dec.mark = ",")


dados_receita %>% filter(fonte_recursos_codigo %notin% c('00', '000') & (natureza_receita_codigo_completo %in% c('12105111', '12105121', '12105131', '12105141', '12150411', '12150412', '12150421', '12150431', '12150441') | startsWith(natureza_receita_codigo_completo, '121911')), unidade_orcamentaria_codigo != 73901, item_informacao_codigo == 5, mes_lancamento == "MAI/2025") %>% summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao, na.rm = TRUE))
```

```{r rgps_receitas_despesas}
#| warning: false
#| message: false
#| error: true
#| include: false

# ===============================================================================
# CRITÉRIOS ANEXO 4 - RREO - RGPS (LINHAS) - 2023
# ===============================================================================

# ===============================================================================
# CRITÉRIOS DE RECEITAS (aplicados à df dados_receita)
# ===============================================================================

criterios_receitas_rgps <- list(
  
  # RECEITAS CORRENTES - DOS EMPREGADORES, TRABALHADORES E DEMAIS SEGURADOS
  `01  Receitas Correntes - Dos Empregadores, Trabalhadores e Demais Segurados` = list(
    criterio = "natureza_receita_codigo_completo %in% c('12100311', '12100312', '12100313', '12100311') & nre2_origem_receita_codigo_origem %in% c(2)"
  ),
  
  # RECEITAS CORRENTES - DEMAIS CONTRIBUIÇÕES  
  `02  Receitas Correntes - Demais Contribuições` = list(
    criterio = "nre2_origem_receita_codigo_origem %in% c(2) & natureza_receita_codigo_completo %notin% c('12100311', '12100312', '12100313')"
  ),
  
  # OUTRAS RECEITAS CORRENTES - COMPENSAÇÃO PREVIDENCIÁRIA RPPS/RGPS
  `03  Outras Receitas Correntes - Compensação Previdenciária RPPS/RGPS` = list(
    criterio = "nre2_origem_receita_codigo_origem %in% c(9) "
  ),
  
  # DEMAIS RECEITAS CORRENTES
  `04  Demais Receitas Correntes` = list(
    criterio = "nre1_categoria_economica_codigo %in% c(1) & nre2_origem_receita_codigo_origem %notin% c(2,9) "
  ),
  
  # RECEITAS DE CAPITAL - ALIENAÇÕES
  `05  Receitas de Capital - Alienações` = list(
    criterio = "nre2_origem_receita_codigo_origem %in% c(2) & nre1_categoria_economica_codigo %in% c(2)"
  ),
  
  # DEMAIS RECEITAS DE CAPITAL
  `06  Demais Receitas de Capital` = list(
    criterio = "nre1_categoria_economica_codigo %in% c(2) & nre2_origem_receita_codigo_origem %notin% c(2)"
  ),
  
  # RECEITAS INTRA-ORÇAMENTÁRIAS
  `07  Receitas INTRA-ORÇAMENTÁRIAS` = list(
    criterio = "nre1_categoria_economica_codigo %in% c(7, 8)"
  )
)

# ===============================================================================
# CRITÉRIOS DE DESPESAS (aplicados à df dados_despesa)
# ===============================================================================

criterios_despesas_rgps <- list(
  
  # APOSENTADORIAS
  `01  Aposentadorias` = list(
    criterio = "elemento_despesa_codigo %in% c('53', '54') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # PENSÕES
  `02  Pensões` = list(
    criterio = "elemento_despesa_codigo %in% c('55', '56') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # OUTROS BENEFÍCIOS
  `03  Outros Benefícios` = list(
    criterio = "elemento_despesa_codigo %in% c('57', '58') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # COMPENSAÇÃO PREVIDENCIÁRIA DO RGPS PARA O RPPS
  `04  Compensação Previdenciária do RGPS para o RPPS` = list(
    criterio = "elemento_despesa_codigo %notin% c('57', '58', '53', '54', '55', '56') & acao_governo_codigo %in% c('009W', '0531') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # DEMAIS DESPESAS
  `05  Demais Despesas` = list(
    criterio = "elemento_despesa_codigo %notin% c('57', '58', '53', '54', '55', '56') & acao_governo_codigo %notin% c('009W', '0531') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # A DETALHAR
  `06  A detalhar` = list(
    criterio = "elemento_despesa_codigo %in% c('00') & grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %notin% c('91')"
  ),
  
  # DESPESAS PREVIDENCIÁRIAS (INTRA)
  `07  Despesas Previdenciárias (INTRA)` = list(
    criterio = "grupo_despesa_codigo_grupo %in% c(3) & modalidade_aplicacao_codigo %in% c('91') & elemento_despesa_codigo %notin% c('01', '03', '05')"
  )
  
  
)

# ===============================================================================
# OBSERVAÇÕES SOBRE OS CAMPOS DA dados_receita
# ===============================================================================

# Campos disponíveis em dados_receita:
# - natureza_receita_codigo_completo: código completo da natureza (ex: "13210101")
# - nre1_categoria_economica_codigo: 1=Correntes, 2=Capital, 7=Intra-Correntes, 8=Intra-Capital
# - nre2_origem_receita_codigo_origem: origem da receita (2=Contribuições, 9=Outras, etc.)
# - nre3_especie_receita_codigo_especie: espécie da receita
# - fonte_recursos_codigo: código da fonte de recursos
# - refinanciamento: "nao" ou "sim"
# - tipo_modalidade: "exceto intra" ou outras
```

```{r rgps_receita}
#| warning: false
#| message: false
#| error: true





receita_rgps<- agrupar_e_combinar_dados(
  df = dados_receita %>% filter(unidade_orcamentaria_codigo %in% c(33904, 40904, 55902, 25917) | natureza_receita_codigo_completo == 79900211 ) ,
  criterios = criterios_receitas_rgps,
  codigo = "MAI/2025REOA12saude"
)

receita_rgps <- receita_rgps %>%   separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_receita_rgps <- receita_rgps %>% 
  filter(mes_lancamento == "MAI/2025") %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)

datatable(receita_rgps)%>%
  formatRound(which(sapply(receita_rgps, is.numeric)), 2, mark = ".", dec.mark = ",")


datatable(dados_receita %>% filter(unidade_orcamentaria_codigo %in% c(33904, 40904, 55902, 25917) | natureza_receita_codigo_completo == 79900211 , item_informacao_codigo == 5) %>% group_by(nre1_categoria_economica_codigo, nre1_categoria_economica_nome, nre2_origem_receita_codigo_origem, nre2_origem_receita_nome, nre3_especie_receita_codigo_especie,nre3_especie_receita_nome) %>% summarise(saldo_r_item_informacao = sum(saldo_r_item_informacao)))%>%
  formatRound(which(sapply(receita_rgps, is.numeric)), 2, mark = ".", dec.mark = ",")








```

```{r despesa_rgps}
despesa_rgps<- agrupar_e_combinar_dados(
  df = dados_despesa %>% filter(unidade_orcamentaria_codigo %in% c(33904, 40904, 55902, 25917)  ) ,
  criterios = criterios_despesas_rgps,
  codigo = "MAI/2025REOA12saude"
)

despesa_rgps <- despesa_rgps %>%   separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_despesa_rgps <- despesa_rgps %>% 
  filter(mes_lancamento == "MAI/2025") %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)

datatable(despesa_rgps)%>%
  formatRound(which(sapply(despesa_rgps, is.numeric)), 2, mark = ".", dec.mark = ",")



```

```{r rcl}
#| include: false

# ===============================================================================
# ANEXO 3 - RCL (RECEITA CORRENTE LÍQUIDA) - RREO
# LISTA PARA FILTRAR DADOS_RECEITA
# CRITÉRIOS CORRIGIDOS BASEADOS NO SQL OFICIAL DO TESOURO GERENCIAL
# ===============================================================================

criterios_receitas_anexo3_rcl <- list(
  
  # === RECEITAS CORRENTES ===
  
  # IMPOSTOS, TAXAS E CONTRIBUIÇÕES DE MELHORIA
  `01  Impostos, Taxas e Contribuições de Melhoria` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 1"
  ),
  
  # RECEITA DE CONTRIBUIÇÕES
  `02  Receita de Contribuições` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 2"
  ),
  
  # RECEITA PATRIMONIAL
  `03  Receita Patrimonial` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 3"
  ),
  
  # RECEITA AGROPECUÁRIA
  `04  Receita Agropecuária` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 4"
  ),
  
  # RECEITA INDUSTRIAL
  `05  Receita Industrial` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 5"
  ),
  
  # RECEITA DE SERVIÇOS
  `06  Receita de Serviços` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 6"
  ),
  
  # TRANSFERÊNCIAS CORRENTES
  `07  Transferências Correntes` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 7"
  ),
  
  # RECEITAS CORRENTES A CLASSIFICAR
  `08  Receitas Correntes a Classificar` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 8"
  ),
  
  # OUTRAS RECEITAS CORRENTES
  `09  Outras Receitas Correntes` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 9"
  ),
  
  # TRANSFERÊNCIAS CONSTITUCIONAIS E LEGAIS
  `10  Transferências Constitucionais e Legais` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 7 & (
      grepl('FPE|FPM|CONSTITUCIONAL|LEGAL', natureza_receita_nome, ignore.case = TRUE) |
      grepl('^172[0-9]', natureza_receita_codigo_completo) |
      grepl('^171[0-9]', natureza_receita_codigo_completo)
    )
    "
  ),
  
  # CONTRIB. EMPREGADORES E TRAB. PARA SEG. SOCIAL
  `11  Contrib. Empregadores e Trab. para Seg. Social` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & fonte_recursos_codigo == '054' & 
    !natureza_receita_codigo_completo %in% c(
      '19900300', '19900310', '19900311', '19900312', '19900313', '19900314',
      '19990300', '19990301', '19990302', '19990303', '19990304'
    )
    "
  ),
  
  # CONTRIB. DO SERVIDOR PARA O PLANO DE PREVIDÊNCIA
  `12  Contrib. do Servidor para o Plano de Previdência` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & (
      fonte_recursos_codigo %in% c('055', '056') |
      natureza_receita_codigo_completo == '12150116'
    )
    "
  ),
  
  # CONTRIB. DOS MILITARES PARA O CUSTEIO DAS PENSÕES
  `13  Contrib. dos Militares para o Custeio das Pensões` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & (
      grepl('^1210051', natureza_receita_codigo_completo) |
      grepl('^1215041', natureza_receita_codigo_completo) |
      grepl('^121911', natureza_receita_codigo_completo)
    )
    "
  ),
  
  # COMPENSAÇÃO FINANC. ENTRE REGIMES PREVIDÊNCIA
  `14  Compensação Financ. entre Regimes Previdência` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & natureza_receita_codigo_completo %in% c(
      '19900300', '19900310', '19900311', '19900312', '19900313', '19900314',
      '19990300', '19990301', '19990302', '19990303', '19990304'
    )
    "
  ),
  
  # CONTRIBUIÇÕES PARA PIS/PASEP
  `15  Contribuições para PIS/PASEP` = list(
    criterio = "
    nre1_categoria_economica_codigo == 1 & (
      (grepl('^1210091|^1212', natureza_receita_codigo_completo) & 
       !fonte_recursos_codigo %in% c('055', '056', '054')) |
      (!grepl('^1210091|^1212', natureza_receita_codigo_completo) & 
       fonte_recursos_codigo %in% c('040', '041'))
    )
    "
  ),
  
  # DEDUÇÕES
  `16  Deduções` = list(
    criterio = "
    (grepl('^1212', natureza_receita_codigo_completo) & fonte_recursos_codigo %in% c('031', '032', '040', '041')) |
    (grepl('^1214', natureza_receita_codigo_completo) & fonte_recursos_codigo == '054') |
    (grepl('^1215', natureza_receita_codigo_completo) & fonte_recursos_codigo %in% c('023', '032', '055', '056')) |
    (grepl('^1219', natureza_receita_codigo_completo) & fonte_recursos_codigo == '054') |
    (grepl('^1911', natureza_receita_codigo_completo) & fonte_recursos_codigo == '054') |
    (grepl('^1922', natureza_receita_codigo_completo) & fonte_recursos_codigo %in% c('040', '054', '056')) |
    (grepl('^1923', natureza_receita_codigo_completo) & fonte_recursos_codigo == '054') |
    (grepl('^1999', natureza_receita_codigo_completo) & fonte_recursos_codigo == '054')
    "
  )
)
```

```{r}
# ===============================================================================
# ANEXO 3 - RCL (RECEITA CORRENTE LÍQUIDA) - RREO
# CRITÉRIOS BASEADOS NA ESTRUTURA HIERÁRQUICA DAS NATUREZAS DE RECEITA
# ===============================================================================

# === ESTRUTURA DA NATUREZA DE RECEITA ===
# Código: X.X.X.XX.XX.X (8 dígitos)
# 1º dígito: NRE1 - Categoria Econômica (1=Correntes, 2=Capital)
# 2º dígito: NRE2 - Origem da Receita (1-9)
# 3º dígito: NRE3 - Espécie da Receita
# 4º-5º dígitos: NRE4 - Desdobramento (00-49 União, 50-98 Estados/Municípios)
# 6º-7º dígitos: NRE5 - Desdobramento adicional
# 8º dígito: NRE7 - Tipo (1=Principal, 2=Multas/Juros, 3=Dívida Ativa, etc.)

criterios_receitas_anexo3_rcl_estruturado <- list(
  
  # === RECEITAS CORRENTES POR ORIGEM (01-09) ===
  
  # IMPOSTOS, TAXAS E CONTRIBUIÇÕES DE MELHORIA
  # Estrutura: Categoria 1 (Correntes) + Origem 1 (Impostos/Taxas)
  `01  Impostos, Taxas e Contribuições de Melhoria` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 1"
  ),
  
  # RECEITA DE CONTRIBUIÇÕES
  # Estrutura: Categoria 1 (Correntes) + Origem 2 (Contribuições)
  `02  Receita de Contribuições` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 2"
  ),
  
  # RECEITA PATRIMONIAL
  # Estrutura: Categoria 1 (Correntes) + Origem 3 (Patrimonial)
  `03  Receita Patrimonial` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 3"
  ),
  
  # RECEITA AGROPECUÁRIA
  # Estrutura: Categoria 1 (Correntes) + Origem 4 (Agropecuária)
  `04  Receita Agropecuária` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 4"
  ),
  
  # RECEITA INDUSTRIAL
  # Estrutura: Categoria 1 (Correntes) + Origem 5 (Industrial)
  `05  Receita Industrial` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 5"
  ),
  
  # RECEITA DE SERVIÇOS
  # Estrutura: Categoria 1 (Correntes) + Origem 6 (Serviços)
  `06  Receita de Serviços` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 6"
  ),
  
  # TRANSFERÊNCIAS CORRENTES
  # Estrutura: Categoria 1 (Correntes) + Origem 7 (Transferências)
  `07  Transferências Correntes` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 7"
  ),
  
  # RECEITAS CORRENTES A CLASSIFICAR
  # Estrutura: Categoria 1 (Correntes) + Origem 8 (A Classificar)
  `08  Receitas Correntes a Classificar` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 8"
  ),
  
  # OUTRAS RECEITAS CORRENTES
  # Estrutura: Categoria 1 (Correntes) + Origem 9 (Outras)
  `09  Outras Receitas Correntes` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 9"
  ),
  
  # === CONTRIBUIÇÕES PARA PIS/PASEP (ESPECÍFICO) ===
  
  # CONTRIBUIÇÕES PARA PIS/PASEP
  # Estrutura hierárquica: 1.2.1.2.XX.XX.X (Correntes > Contribuições > Sociais > PIS/PASEP)
  # Fontes específicas: 040 (Seguro-Desemprego) e 041 (Desenvolvimento Econômico)
  `10  Contribuições para PIS/PASEP` = list(
    criterio = "
    (nre1_categoria_economica_codigo == 1 & 
     nre2_origem_receita_codigo_origem == 2 & 
     nre3_especie_receita_codigo_especie == 1 & 
     nre4_desdobramento_codigo_desdobramento_1 == 2) |
    (nre1_categoria_economica_codigo == 1 & fonte_recursos_codigo %in% c('040', '041'))
    "
  ),
  
  # === DEDUÇÕES (COMPLETO) ===
  
  # DEDUÇÕES
  # Estruturas hierárquicas múltiplas:
  # - PIS/PASEP: 1.2.1.2 (Contribuições Sociais > PIS/PASEP)
  # - RGPS: 1.2.1.4 (Contribuições Sociais > RGPS)
  # - RPPS: 1.2.1.5 (Contribuições Sociais > RPPS)
  # - Restituições: 1.9.2 (Outras Correntes > Indenizações/Restituições)
  # - Outras Diversas: 1.9.9 (Outras Correntes > Outras Diversas)
  # - Fontes especiais: 040, 041, 054, 055, 056
  # - Caso específico: 032 + 12150116 (Contribuição Servidor Civil)
  `11  Deduções` = list(
  criterio = "
(fonte_recursos_codigo == '023' & natureza_receita_codigo_completo %in% c('12150411', '12150412')) |
  (fonte_recursos_codigo == '031' & natureza_receita_codigo_completo %in% c('12120108', '12120208', '12124908')) |
  (fonte_recursos_codigo == '032' & natureza_receita_codigo_completo %in% c('12120106', '12120206', '12124906', '12150116')) |
  (fonte_recursos_codigo %in% c('040', '041') & natureza_receita_codigo_completo %in% c('12120101', '12120103', '12120105', '12120107', '12120201', '12120203', '12120205', '12120207', '12124901', '12124903', '12124905', '12124907')) |
  (fonte_recursos_codigo == '040' & natureza_receita_codigo_completo %in% c('19220701', '19220702')) |
  (fonte_recursos_codigo == '054' & natureza_receita_codigo_completo %in% c('12140111', '12140112', '12140113', '12140114', '12140121', '12140122', '12140123', '12140124', '12140201', '12140202', '12140203', '12140204', '12144901', '12144902', '12144903', '12144904', '12199911', '19110103', '19111101', '19111102', '19220301', '19220302', '19220303', '19220631', '19220632', '19230401', '19230402', '19990301', '19990302', '19990303', '19999914')) |
  (fonte_recursos_codigo %in% c('055', '056') & natureza_receita_codigo_completo %in% c('12150111', '12150121')) |
  (fonte_recursos_codigo == '056' & natureza_receita_codigo_completo %in% c('12150113', '12150115', '12150131', '12150141', '12150151', '12150161', '19220631'))
  "
)
)

# === MAPEAMENTO DOS CÓDIGOS HIERÁRQUICOS ===

estrutura_natureza_receita <- list(
  
  categoria_economica = list(
    "1" = "RECEITAS CORRENTES",
    "2" = "RECEITAS DE CAPITAL"
  ),
  
  origem_receita = list(
    "1" = "IMPOSTOS, TAXAS E CONTRIBUIÇÕES DE MELHORIA",
    "2" = "CONTRIBUIÇÕES", 
    "3" = "RECEITA PATRIMONIAL",
    "4" = "RECEITA AGROPECUÁRIA",
    "5" = "RECEITA INDUSTRIAL",
    "6" = "RECEITA DE SERVIÇOS",
    "7" = "TRANSFERÊNCIAS CORRENTES",
    "8" = "RECEITAS CORRENTES A CLASSIFICAR",
    "9" = "OUTRAS RECEITAS CORRENTES"
  ),
  
  especie_contribuicoes = list(
    "1" = "CONTRIBUIÇÕES SOCIAIS",
    "2" = "CONTRIBUIÇÕES ECONÔMICAS",
    "3" = "CONTRIBUIÇÕES PARA ENTIDADES PRIVADAS"
  ),
  
  desdobramento_contribuicoes_sociais = list(
    "1" = "COFINS",
    "2" = "PIS/PASEP", 
    "3" = "CSLL",
    "4" = "REGIME GERAL DE PREVIDÊNCIA SOCIAL - RGPS",
    "5" = "REGIMES PRÓPRIOS DE PREVIDÊNCIA - RPPS",
    "6" = "FUNDOS DE ASSISTÊNCIA MÉDICA"
  ),
  
  especie_outras_correntes = list(
    "1" = "MULTAS E JUROS DE MORA",
    "2" = "INDENIZAÇÕES, RESTITUIÇÕES E RESSARCIMENTOS", 
    "3" = "BENS, DIREITOS E VALORES INCORPORADOS",
    "9" = "DEMAIS RECEITAS CORRENTES"
  ),
  
  tipo_receita = list(
    "1" = "PRINCIPAL",
    "2" = "MULTAS E JUROS DE MORA",
    "3" = "DÍVIDA ATIVA",
    "4" = "MULTAS E JUROS DA DÍVIDA ATIVA",
    "6" = "JUROS DE MORA"
  )
)

# === IMPLEMENTAÇÃO RECOMENDADA ===

exemplo_implementacao <- '
# Função para aplicar critérios estruturados
aplicar_criterio_estruturado <- function(dados, categoria, origem, especie = NULL, desdobramento = NULL) {
  filtro <- dados %>%
    filter(nre1_categoria_economica_codigo == categoria &
           nre2_origem_receita_codigo_origem == origem)
  
  if (!is.null(especie)) {
    filtro <- filtro %>% filter(nre3_especie_receita_codigo_especie == especie)
  }
  
  if (!is.null(desdobramento)) {
    filtro <- filtro %>% filter(nre4_desdobramento_codigo_desdobramento_1 == desdobramento)
  }
  
  return(filtro)
}

# Exemplo de uso:
# PIS/PASEP: aplicar_criterio_estruturado(dados, 1, 2, 1, 2)
# RGPS: aplicar_criterio_estruturado(dados, 1, 2, 1, 4)
# RPPS: aplicar_criterio_estruturado(dados, 1, 2, 1, 5)
'
```

```{r}
#| warning: false
#| message: false
#| error: true
receitas_anexo3_rcl <- agrupar_e_combinar_dados(
  df = dados_receita %>% filter(orgao_uge_orcam_fiscal_s_n == "PERTENCE"),
  criterios = criterios_receitas_anexo3_rcl,
  codigo = "MAI/2025REOA12saude"
)

receitas_anexo3_rcl <- receitas_anexo3_rcl %>%   separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_receitas_anexo3_rcl <- receitas_anexo3_rcl %>% 
  filter(mes_lancamento == "MAI/2025") %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)

datatable(DT_receitas_anexo3_rcl )%>%
  formatRound(which(sapply(DT_receitas_anexo3_rcl, is.numeric)), 2, mark = ".", dec.mark = ",")
```

```{r rcl_deducoes}
#| warning: false
#| message: false
#| error: true
#| include: false


# ===============================================================================
# ANEXO 3 - RCL (RECEITA CORRENTE LÍQUIDA) - RREO
# LISTA PARA FILTRAR DADOS_DESPESA (DEDUÇÕES)
# BASEADA EXCLUSIVAMENTE NOS PRINTS FORNECIDOS
# ===============================================================================

criterios_despesas_anexo3_rcl <- list(
  
  # === DEDUÇÕES DA RECEITA CORRENTE LÍQUIDA ===
  
  # TRANSFERÊNCIAS CONSTITUCIONAIS E LEGAIS
  `01  Transferências Constitucionais e Legais` = list(
    criterio = "acao_governo_codigo %in% c('0E36', '00SB') | grepl('^28846090900RX', programa_governo_codigo) | (programa_governo_codigo %in% c('0903', '2030', '2080') & modalidade_aplicacao_codigo %in% c(30, 31, 32, 35, 36, 40, 41, 42, 45, 46) & acao_governo_codigo %in% c('0044', '0045', '0046', '0050', '0051', '00H6', '006M', '00G6', '0169', '0223', '0369', '0546', '0547', '0999', '099B', '0A53', '0C03', '0C33', '0E25', '0E36', '00PX', '00QR', '00S3', '00S7', '00S8', '00SE', '00RX', '00UH'))"
  ),
  
  # DEDUÇÕES  
  `02  Deduções` = list(
    criterio = "acao_governo_codigo %in% c('0E36', '00SB') | grepl('^28846090900RX', programa_governo_codigo) | (programa_governo_codigo %in% c('0903', '2030', '2080') & modalidade_aplicacao_codigo %in% c(30, 31, 32, 35, 36, 40, 41, 42, 45, 46) & acao_governo_codigo %in% c('0044', '0045', '0046', '0050', '0051', '00H6', '006M', '00G6', '0169', '0223', '0369', '0546', '0547', '0999', '099B', '0A53', '0C03', '0C33', '0E25', '0E36', '00PX', '00QR', '00S3', '00S7', '00S8', '00SE', '00RX', '00UH'))"
  )
)


```

```{r}
despesas_anexo3_rcl <- agrupar_e_combinar_dados(
  df = dados_despesa %>% unique() ,
  criterios = criterios_despesas_anexo3_rcl,
  codigo = "MAI/2025REOA12saude"
)

despesas_anexo3_rcl <-despesas_anexo3_rcl %>%   separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_despesas_anexo3_rcl <- despesas_anexo3_rcl %>% 
  filter(mes_lancamento == "MAI/2025") %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)
# 
datatable(DT_despesas_anexo3_rcl )%>%
  formatRound(which(sapply(DT_despesas_anexo3_rcl, is.numeric)), 2, mark = ".", dec.mark = ",")


DT_despesas_anexo3_rcl %>% filter(ordem == "02") %>% summarise(saldo = sum(`DESPESAS LIQUIDADAS`)) 


DT_receitas_anexo3_rcl %>% filter(ordem == "11") %>% summarise(saldo = sum(`RECEITA ORCAMENTARIA (LIQUIDA)`))

```

```{r}
teste <- agrupar_e_combinar_dados(
  df = dados_receita %>% unique() ,
  criterios = criterios_receitas_rpps,
  codigo = "MAI/2025REOA12saude"
)

teste <- teste %>%   separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_teste <- teste %>% 
  filter(mes_lancamento == "MAI/2025") %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)
# 
datatable(DT_teste )%>%
  formatRound(which(sapply(dados, is.numeric)), 2, mark = ".", dec.mark = ",")
```

```{r}
# ======================================
# CRITÉRIOS DA TABELA 1 - RECEITAS
# ======================================

criterios_tabela1_receitas <- list(
  
  # === RECEITAS CORRENTES ===
  
  # Receita Tributária
  `01  Receita Tributária` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 1) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 1)"
  ),
  
  # Receita de Contribuições
  `02  Receita de Contribuições` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 2) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 2)"
  ),
  
  # Receita Patrimonial
  `03  Receita Patrimonial` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 3) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 3)"
  ),
  
  # Receita Agropecuária
  `04  Receita Agropecuária` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 4"
  ),
  
  # Receita Industrial
  `05  Receita Industrial` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 5) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 5)"
  ),
  
  # Receita de Serviços
  `06  Receita de Serviços` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 6) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 6)"
  ),
  
  # Transferências Correntes
  `07  Transferências Correntes` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 7"
  ),
  
  # Receitas Correntes a Classificar
  `08  Receitas Correntes a Classificar` = list(
    criterio = "nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 8"
  ),
  
  # Outras Receitas Correntes
  `09  Outras Receitas Correntes` = list(
    criterio = "(nre1_categoria_economica_codigo == 1 & nre2_origem_receita_codigo_origem == 9) | (nre1_categoria_economica_codigo == 7 & nre2_origem_receita_codigo_origem == 9)"
  ),
  
  # === RECEITAS DE CAPITAL ===
  
  # Operações de Crédito
  `10  Operações de Crédito` = list(
    criterio = "(nre1_categoria_economica_codigo == 2 & nre2_origem_receita_codigo_origem == 1) | (nre1_categoria_economica_codigo == 8 & nre2_origem_receita_codigo_origem == 1)"
  ),
  
  # Alienação de Bens
  `11  Alienação de Bens` = list(
    criterio = "(nre1_categoria_economica_codigo == 2 & nre2_origem_receita_codigo_origem == 2) | (nre1_categoria_economica_codigo == 8 & nre2_origem_receita_codigo_origem == 2)"
  ),
  
  # Transferências de Capital
  `12  Transferências de Capital` = list(
    criterio = "nre1_categoria_economica_codigo == 2 & nre2_origem_receita_codigo_origem == 4"
  ),
  
  # Outras Receitas de Capital
  `13  Outras Receitas de Capital` = list(
    criterio = "(nre1_categoria_economica_codigo == 2 & nre2_origem_receita_codigo_origem == 5) | (nre1_categoria_economica_codigo == 8 & nre2_origem_receita_codigo_origem == 5)"
  ),
  
  # SUBTOTAL (I) - Receitas Correntes + Receitas de Capital - Intra-orçamentárias
  `14  SUBTOTAL (I)` = list(
    criterio = "nre1_categoria_economica_codigo %in% c(1, 2, 7, 8)"
  )
)

# ======================================
# CRITÉRIOS DA TABELA 1 - DESPESAS
# ======================================

criterios_tabela1_despesas <- list(
  
  # === DESPESAS CORRENTES ===
  
  # Pessoal e Encargos Sociais
  `01  Pessoal e Encargos Sociais` = list(
    criterio = "grupo_despesa_codigo_grupo == '1'"
  ),
  
  # Juros e Encargos da Dívida
  `02  Juros e Encargos da Dívida` = list(
    criterio = "grupo_despesa_codigo_grupo == '2'"
  ),
  
  # Outras Despesas Correntes
  `03  Outras Despesas Correntes` = list(
    criterio = "grupo_despesa_codigo_grupo == '3'"
  ),
  
  # Benefícios Previdenciários
  `04  Benefícios Previdenciários` = list(
    criterio = "grupo_despesa_codigo_grupo == '3' & unidade_orcamentaria_codigo %in% c('55902', '40904', '33904', '25917')"
  ),
  
  # Transferências
  `05  Transferências` = list(
    criterio = "grupo_despesa_codigo_grupo == '3' & modalidade_aplicacao_codigo %in% c('30', '31', '35', '36', '40', '41', '42', '45')"
  ),
  
  # Demais Despesas Correntes
  `06  Demais Despesas Correntes` = list(
    criterio = "
    grupo_despesa_codigo_grupo == '3' & 
    !unidade_orcamentaria_codigo %in% c('55902', '40904', '33904', '25917') &
    !modalidade_aplicacao_codigo %in% c('30', '31', '35', '36', '40', '41', '42', '45')
    "
  ),
  
  # === DESPESAS DE CAPITAL ===
  
  # Investimentos
  `07  Investimentos` = list(
    criterio = "grupo_despesa_codigo_grupo == '4'"
  ),
  
  # Inversões Financeiras
  `08  Inversões Financeiras` = list(
    criterio = "grupo_despesa_codigo_grupo == '5'"
  ),
  
  # Amortização da Dívida
  `09  Amortização da Dívida` = list(
    criterio = "grupo_despesa_codigo_grupo == '6'"
  ),
  
  # RESERVA DE CONTINGÊNCIA
  `10  RESERVA DE CONTINGÊNCIA` = list(
    criterio = "grupo_despesa_codigo_grupo == '9'"
  ),
  
  # SUBTOTAL (III) - Total das Despesas
  `11  SUBTOTAL (III)` = list(
    criterio = "grupo_despesa_codigo_grupo %in% c('1', '2', '3', '4', '5', '6', '9')"
  )
)
```

```{r tabela1_despesas}
tabela1_despesas <- agrupar_e_combinar_dados(
  df = dados_despesa %>% filter(esfera_orcamentaria_codigo ==2) %>% unique() ,
  criterios = criterios_tabela1_despesas,
  codigo = "MAI/2025REOA12saude"
)

tabela1_despesas <-tabela1_despesas %>%   separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_tabela1_despesas <- tabela1_despesas %>% 
  filter(mes_lancamento == "MAI/2025") %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)
# 
datatable(DT_tabela1_despesas )%>%
  formatRound(which(sapply(DT_tabela1_despesas, is.numeric)), 2, mark = ".", dec.mark = ",")
```

```{r tabela_01_receitas}
tabela1_receitas <- agrupar_e_combinar_dados(
  df = dados_receita %>% filter(esfera_orcamentaria_codigo ==2) %>% unique() ,
  criterios = criterios_tabela1_receitas,
  codigo = "MAI/2025REOA12saude"
)

tabela1_receitas <-tabela1_receitas %>%   separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_tabela1_receitas <- tabela1_receitas %>% 
  filter(mes_lancamento == "MAI/2025") %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)
# 
datatable(DT_tabela1_receitas )%>%
  formatRound(which(sapply(DT_tabela1_receitas, is.numeric)), 2, mark = ".", dec.mark = ",")
```

```{r tabela_01A}
# ======================================
# CRITÉRIOS DA TABELA 1A - COLUNAS 2023
# ======================================



# ======================================
# CRITÉRIOS DA TABELA 1A - COLUNAS 2023
# ======================================

criterios_tabela1a_colunas <- list(
  
  # === PREVISÃO ATUALIZADA (a) ===
  
  # Previsão Atualizada da Receita
  `PREVISAO_ATUALIZADA` = list(
    criterio = "
    natureza_receita_codigo_completo %in% c('12100111', '12100121', '12100131', '12100211', '12102121', '12102131', 
                                            '12106511', '12106611', '12106711', '12107211', '12107411', '12107611',
                                            '12108111', '12109131', '12101011', '12101311', '12101411', '12101611',
                                            '12106131', '12106211', '12106411', '12106511', '12106611', '12106711',
                                            '12110051', '12110061', '12106211', '12100511', '12106311', '12106711',
                                            '12104211', '12104311', '12101051') &
    fonte_recursos_codigo == '000' &
    esfera_orcamentaria_codigo == '1'
    "
  ),
  
  # === RECEITAS REALIZADAS NO MÊS ===
  
  # Receita Orçamentária Arrecadada no Mês
  `RECEITA_REALIZADA_MES` = list(
    criterio = "
    fonte_recursos_codigo == '000' &
    (endsWith(fonte_recursos_detalhada_codigo, '98001') | endsWith(fonte_recursos_detalhada_codigo, '73910'))
    "
  ),
  
  # === RECEITAS REALIZADAS ATÉ O MÊS ===
  
  # Receita Orçamentária Arrecadada Acumulada
  `RECEITA_REALIZADA_ACUMULADA` = list(
    criterio = "
    fonte_recursos_codigo == '000' &
    (endsWith(fonte_recursos_detalhada_codigo, '98001') | endsWith(fonte_recursos_detalhada_codigo, '73910'))
    "
  )
)
```

```{r}
tabela_01A_receitas <- agrupar_e_combinar_dados(
  df = dados_receita %>% filter(esfera_orcamentaria_codigo ==2) %>% unique() ,
  criterios = criterios_tabela1a_colunas,
  codigo = "MAI/2025REOA12saude"
)

tabela_01A_receitas <-tabela_01A_receitas %>%   separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_tabela_01A_receitas <- tabela_01A_receitas %>% 
  filter(mes_lancamento == "MAI/2025") %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)
# 
datatable(DT_tabela_01A_receitas )%>%
  formatRound(which(sapply(DT_tabela_01A_receitas, is.numeric)), 2, mark = ".", dec.mark = ",")
```

```{r}
criterios_tabela_1b_seguridade <- list(
  
  # SAÚDE
  `01  Saúde` = list(
    criterio = "iduso_codigo %in% c('6') & funcao_governo_codigo %notin% c('08')"
  ),
  
  # RGPS - UNIDADE ORÇAMENTÁRIA  
  `02  RGPS - Receitas da Previdência Social` = list(
    criterio = "unidade_orcamentaria_codigo %in% c('33904', '40404', '35902', '29917')"
  ),
  
  # ASSISTÊNCIA SOCIAL
  `03  Assistência Social` = list(
    criterio = "funcao_governo_codigo %in% c('08') & acao_governo_codigo %notin% c('0581', '0544', '0563', '0658', '0585', '0653', '0636')"
  ),
  
  # ABONO SALARIAL
  `04  Abono Salarial` = list(
    criterio = "acao_governo_codigo %in% c('0581')"
  ),
  
  # SEGURO DESEMPREGO
  `05  Seguro Desemprego` = list(
    criterio = "acao_governo_codigo %in% c('00H4', '0583', '0585',  '0686', '0653')"
  )
)
```

```{r}
tabela_1b_seguridade <- agrupar_e_combinar_dados(
  df = dados_despesa %>% filter(esfera_orcamentaria_codigo ==2) %>% unique() ,
  criterios = criterios_tabela_1b_seguridade,
  codigo = "MAI/2025REOA12saude"
)

tabela_1b_seguridade <-tabela_1b_seguridade %>%   separate(categoria, into = c("ordem", "nome"), sep = 2, remove = FALSE)

DT_tabela_1b_seguridade <- tabela_1b_seguridade %>% 
  filter(mes_lancamento == "MAI/2025") %>%
  group_by(ordem, nome, categoria, item_informacao_nome) %>% 
  summarise(saldo = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop") %>%
  complete(categoria, item_informacao_nome, fill = list(saldo = 0)) %>%
  pivot_wider(names_from = item_informacao_nome, values_from = saldo)
# 
datatable(DT_tabela_1b_seguridade )%>%
  formatRound(which(sapply(DT_tabela_1b_seguridade, is.numeric)), 2, mark = ".", dec.mark = ",")
```

```{r criterios_tabela_02}
# RECRIAR A LISTA DE CRITÉRIOS TABELA 02

criterios_tabela_02 <- list(
  
  # APLICAÇÃO DIRETA (Elemento 00 OU Pessoal Civil OU Pessoal Militar)
  `01  Aplicação Direta` = list(
    criterio = " # Elementos que se aplicam a todos os órgãos
  (elemento_despesa_codigo %in% c('11', '16', '00', '12', '17')) |
  
  # Elementos 01 e 03 - fora do Min. Defesa
  (elemento_despesa_codigo %in% c('01', '03') & 
   orgao_uge_orgao_maximo_codigo != '52000') |
  
  # Elementos 01 e 03 - Min. Defesa (todas as ações)
  (elemento_despesa_codigo %in% c('01', '03') & 
   orgao_uge_orgao_maximo_codigo == '52000') |
  
  # Elementos 07 e 13 - fora do Min. Defesa
  (elemento_despesa_codigo %in% c('07', '13') & 
   orgao_uge_orgao_maximo_codigo != '52000') |
  
  # Elemento 13 - Min. Defesa (todas as ações)
  (elemento_despesa_codigo == '13' & 
   orgao_uge_orgao_maximo_codigo == '52000') |
  
  # Outros elementos - fora do Min. Defesa
  (elemento_despesa_codigo %notin% c('00', '01', '03', '07', '11', '12', '13', '16', '17', '41') & 
   orgao_uge_orgao_maximo_codigo != '52000') |
  
  # Outros elementos (exceto 00,01,03) - Min. Defesa com ação 0181
  (elemento_despesa_codigo %notin% c('00', '01', '03') & 
   orgao_uge_orgao_maximo_codigo == '52000' & 
   acao_governo_codigo == '0181')"
  ),
  
  # A DETALHAR
  `02  A Detalhar` = list(
    criterio = "elemento_despesa_codigo %in% c('00')"
  ),
  
  # PESSOAL CIVIL (Subtotal - agrega todos os elementos civis)
  `03  Pessoal Civil` = list(
    criterio = "# Elementos 11 e 16: aplicam-se a todos os órgãos (sem restrições)
(elemento_despesa_codigo %in% c('11', '16')) |

# Elementos 01 e 03: lógica específica por órgão
(elemento_despesa_codigo %in% c('01', '03') & 
 (# Fora do Ministério da Defesa: todos permitidos
  orgao_uge_orgao_maximo_codigo != '52000' | 
  # Ministério da Defesa: apenas com ação governo 0181
  (orgao_uge_orgao_maximo_codigo == '52000' & acao_governo_codigo == '0181'))) |

# Elementos 07 e 13: apenas fora do Ministério da Defesa
(elemento_despesa_codigo %in% c('07', '13') & 
 orgao_uge_orgao_maximo_codigo != '52000') |

# Outros elementos não listados: apenas fora do Ministério da Defesa
(elemento_despesa_codigo %notin% c('00', '01', '03', '07', '11', '12', '13', '16', '17', '41') & 
 orgao_uge_orgao_maximo_codigo != '52000') |

# Elementos diversos no Ministério da Defesa: apenas com ação governo 0181
# (exclui elementos 00, 01, 03 que já foram tratados acima)
(elemento_despesa_codigo %notin% c('00', '01', '03') & 
 orgao_uge_orgao_maximo_codigo == '52000' & 
 acao_governo_codigo == '0181') "
  ),
  
  # PESSOAL CIVIL - VENCIMENTOS E VANTAGENS FIXAS
  `04  Pessoal Civil - Vencimentos e Vantagens Fixas` = list(
    criterio = "elemento_despesa_codigo %in% c('11')"
  ),
  
  # PESSOAL CIVIL - OUTRAS DESPESAS VARIÁVEIS
  `05  Pessoal Civil - Outras Despesas Variáveis` = list(
    criterio = "elemento_despesa_codigo %in% c('16')"
  ),
  
  # PESSOAL CIVIL - APOSENTADORIA
  `06  Pessoal Civil - Aposentadoria` = list(
    criterio = "elemento_despesa_codigo %in% c('01') & (orgao_uge_orgao_maximo_codigo %notin% c('52000') | (orgao_uge_orgao_maximo_codigo %in% c('52000') & acao_governo_codigo %in% c('0181')))"
  ),
  
  # PESSOAL CIVIL - PENSÕES
  `07  Pessoal Civil - Pensões` = list(
    criterio = "elemento_despesa_codigo %in% c('03') & (orgao_uge_orgao_maximo_codigo %notin% c('52000') | (orgao_uge_orgao_maximo_codigo %in% c('52000') & acao_governo_codigo %in% c('0181')))"
  ),
  
  # PESSOAL CIVIL - CONTRIBUIÇÕES A ENTIDADES FECHADAS DE PREVIDÊNCIA
  `08  Pessoal Civil - Contribuições a Entidades Fechadas de Previdência` = list(
    criterio = "elemento_despesa_codigo %in% c('07') & orgao_uge_orgao_maximo_codigo %notin% c('52000')"
  ),
  
  # PESSOAL CIVIL - OBRIGAÇÕES PATRONAIS
  `09  Pessoal Civil - Obrigações Patronais` = list(
    criterio = "elemento_despesa_codigo %in% c('13') & orgao_uge_orgao_maximo_codigo %notin% c('52000')"
  ),
  
  # PESSOAL CIVIL - OUTRAS APLICAÇÕES
  `10  Pessoal Civil - Outras Aplicações` = list(
    criterio = "(elemento_despesa_codigo %notin% c('00', '01', '03' ) & orgao_uge_orgao_maximo_codigo %in% c('52000')  & acao_governo_codigo %in% c('0181')) | (elemento_despesa_codigo %notin% c('00', '01', '03', '07', '11', '12', '13', '16', '17', '41') & orgao_uge_orgao_maximo_codigo %notin% c('52000'))"
  ),
  
  # PESSOAL MILITAR (Subtotal - agrega todos os elementos militares, faltam outras aplicações)
  `11  Pessoal Militar (faltam Outras Aplicações)` = list(
    criterio = "(elemento_despesa_codigo %in% c('12', '17')) |
                     ( elemento_despesa_codigo %in% c('01') & orgao_uge_orgao_maximo_codigo %in% c('52000') &
                         acao_governo_codigo %notin% c('0181'))|
                     ( elemento_despesa_codigo %in% c('03') & orgao_uge_orgao_maximo_codigo %in% c('52000') &
                         acao_governo_codigo %notin% c('0181')) |
                    ( elemento_despesa_codigo %in% c('13') & orgao_uge_orgao_maximo_codigo %in% c('52000') )"
  ),
  
  # PESSOAL MILITAR - VENCIMENTOS E VANTAGENS FIXAS
  `12  Pessoal Militar - Vencimentos e Vantagens Fixas` = list(
    criterio = "elemento_despesa_codigo %in% c('12')"
  ),
  
  # PESSOAL MILITAR - OUTRAS DESPESAS VARIÁVEIS
  `13  Pessoal Militar - Outras Despesas Variáveis` = list(
    criterio = "elemento_despesa_codigo %in% c('17')"
  ),
  
  # PESSOAL MILITAR - REFORMAS
  `14  Pessoal Militar - Reformas` = list(
    criterio = "elemento_despesa_codigo %in% c('01') & orgao_uge_orgao_maximo_codigo %in% c('52000') & acao_governo_codigo %notin% c('0181')"
  ),
  
  # PESSOAL MILITAR - PENSÕES
  `15  Pessoal Militar - Pensões` = list(
    criterio = "elemento_despesa_codigo %in% c('03') & orgao_uge_orgao_maximo_codigo %in% c('52000') & acao_governo_codigo %notin% c('0181')"
  ),
  
  # PESSOAL MILITAR - OBRIGAÇÕES PATRONAIS
  `16  Pessoal Militar - Obrigações Patronais` = list(
    criterio = "elemento_despesa_codigo %in% c('13') & orgao_uge_orgao_maximo_codigo %in% c('52000')"
  ),
  
  # PESSOAL MILITAR - OUTRAS APLICAÇÕES
  `17  Outras Aplicações (+) - militar - dotação` = list(
    criterio = "elemento_despesa_codigo %notin% c('00', '01', '03', '11', '12', '13', '16', '17', '41') & orgao_uge_orgao_maximo_codigo %in% c('52000')"
  ),
  
    # PESSOAL MILITAR - OUTRAS APLICAÇÕES
  `18  Outras Aplicações (-) - militar - dotação` = list(
    criterio = "elemento_despesa_codigo %notin% c( '00', '01', '03', '11') & orgao_uge_orgao_maximo_codigo %in% c('52000') & acao_governo_codigo %in% c('0181')"
  ),
  
  # TRANSFERÊNCIAS INTERGOVERNAMENTAIS
  `19  Transferências Intergovernamentais` = list(
    criterio = "elemento_despesa_codigo %in% c('41')"
  ),
  
  # TRANSFERÊNCIAS A ESTADOS E AO DF
  `20  Transferências a Estados e ao DF` = list(
    criterio = "elemento_despesa_codigo %in% c('41')"
  )
)


```

```{r}
# Função simples para aplicar critérios (VERSÃO ROBUSTA)
aplicar_criterios <- function(df, criterios, item_informacao_filtro = NULL) {
  # Definir operador notin
  `%notin%` <- Negate(`%in%`)
  
  # Filtrar por item de informação se especificado
  if (!is.null(item_informacao_filtro)) {
    df <- df %>% filter(item_informacao_codigo %in% item_informacao_filtro)
  }
  
  # Processar cada critério
  resultado <- map_df(names(criterios), function(categoria) {
    # Obter o critério - funciona para diferentes estruturas
    criterio_texto <- if (is.list(criterios[[categoria]])) {
      criterios[[categoria]]$criterio
    } else {
      criterios[[categoria]]
    }
    
    # Avaliar o critério
    condicao <- eval(parse(text = criterio_texto), envir = df)
    
    # Filtrar e agrupar
    df %>%
      filter(condicao) %>%
      group_by(categoria = categoria, orgao_uge_tipo_administracao_nome) %>%
      summarise(valor = sum(saldo_r_item_informacao, na.rm = TRUE), .groups = "drop")
  })
  
  return(resultado)
}

# Teste rápido da estrutura (execute para verificar):
# str(criterios_tabela_02[[1]])  # Ver como está estruturado

# Exemplo de uso:
resultado <- aplicar_criterios(
  df = dados_despesa %>% filter(grupo_despesa_codigo_grupo == 1, orgao_uge_orcam_fiscal_s_n == "PERTENCE"),
  criterios = criterios_tabela_02,
  item_informacao_filtro = "13"  # Dotação Atualizada
)


datatable(resultado_pivotado <- resultado %>%
  pivot_wider(
    names_from = orgao_uge_tipo_administracao_nome,
    values_from = valor,
    values_fill = 0
  ))%>%
  formatRound(which(sapply(resultado_pivotado, is.numeric)), 2, mark = ".", dec.mark = ",")
```

```{r}
datatable(dados_despesa %>% group_by(orgao_uge_tipo_administracao_nome) %>%
            filter(
              grupo_despesa_codigo_grupo == 1,
              mes_lancamento == "MAI/2025" &
                     item_informacao_codigo == "13" &
                     (elemento_despesa_codigo %in% c('11',16) |
                        (elemento_despesa_codigo %in% c('00','01', '03', '07', '11', '12', '13', '17', '41') &
                           orgao_uge_orgao_maximo_codigo %notin% c('52000')) |
                        (elemento_despesa_codigo %in% c('00','01', '03') & orgao_uge_orgao_maximo_codigo %in% c('52000') & acao_governo_codigo %in% c('0181')  ))) %>% 
            summarise( saldo_r_item_informacao = sum(saldo_r_item_informacao)))%>%
  formatRound(c('saldo_r_item_informacao'), 2, mark = ".", dec.mark = ",")
```

```{r}
datatable(dados_despesa %>% group_by(orgao_uge_tipo_administracao_nome) %>%
            filter(
              grupo_despesa_codigo_grupo == 1,
              mes_lancamento == "MAI/2025" &
                     item_informacao_codigo == "13") %>% 
            filter(elemento_despesa_codigo %in% c('11',16)) %>% 
            summarise( saldo_r_item_informacao = sum(saldo_r_item_informacao)))%>%
  formatRound(c('saldo_r_item_informacao'), 2, mark = ".", dec.mark = ",")
```

```{r}
datatable(dados_despesa %>% group_by(orgao_uge_tipo_administracao_nome) %>%
            filter(
              grupo_despesa_codigo_grupo == 1,
              mes_lancamento == "MAI/2025" &
                     item_informacao_codigo == "13") %>% 
            filter(elemento_despesa_codigo %in% c('00','01', '03', '07', '11', '12', '13', '17', '41') &
                           orgao_uge_orgao_maximo_codigo %notin% c('52000')) %>% 
            summarise( saldo_r_item_informacao = sum(saldo_r_item_informacao)))%>%
  formatRound(c('saldo_r_item_informacao'), 2, mark = ".", dec.mark = ",")
```

```{r}
datatable(dados_despesa %>% group_by(orgao_uge_tipo_administracao_nome) %>%
            filter(
              grupo_despesa_codigo_grupo == 1,
              mes_lancamento == "MAI/2025" &
                     item_informacao_codigo == "13") %>% 
            filter(elemento_despesa_codigo %in% c('00','01', '03') & orgao_uge_orgao_maximo_codigo %in% c('52000') & acao_governo_codigo %in% c('0181')) %>% 
            summarise( saldo_r_item_informacao = sum(saldo_r_item_informacao)))%>%
  formatRound(c('saldo_r_item_informacao'), 2, mark = ".", dec.mark = ",")
```

```{r militar_ok}
datatable(dados_despesa %>% group_by(orgao_uge_tipo_administracao_nome) %>%
            filter(orgao_uge_orcam_fiscal_s_n == 'PERTENCE',
              grupo_despesa_codigo_grupo == 1,
              mes_lancamento == "MAI/2025" &
                     item_informacao_codigo == "13") %>% 
            filter((elemento_despesa_codigo %in% c('12', '17')) |
                     ( elemento_despesa_codigo %in% c('01') & orgao_uge_orgao_maximo_codigo %in% c('52000') &
                         acao_governo_codigo %notin% c('0181'))|
                     ( elemento_despesa_codigo %in% c('03') & orgao_uge_orgao_maximo_codigo %in% c('52000') &
                         acao_governo_codigo %notin% c('0181')) |
                    ( elemento_despesa_codigo %in% c('13') & orgao_uge_orgao_maximo_codigo %in% c('52000') ) ) %>% 
            summarise( saldo_r_item_informacao = sum(saldo_r_item_informacao)))%>%
  formatRound(c('saldo_r_item_informacao'), 2, mark = ".", dec.mark = ",")
```

```{r civil_ok}
datatable(dados_despesa %>% group_by(orgao_uge_tipo_administracao_nome) %>%
            filter(
              grupo_despesa_codigo_grupo == 1,
              mes_lancamento == "MAI/2025" &
                     item_informacao_codigo == "13") %>% 
            filter( # Condições específicas (seguindo a lógica do SQL)
    (elemento_despesa_codigo %in% c('11', '16')) |
    (elemento_despesa_codigo == '01' & orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo == '01' & orgao_uge_orgao_maximo_codigo == '52000' & acao_governo_codigo == '0181') |
    (elemento_despesa_codigo == '03' & orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo == '03' & orgao_uge_orgao_maximo_codigo == '52000' & acao_governo_codigo == '0181') |
    (elemento_despesa_codigo == '07' & orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo == '13' & orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo %notin% c('00', '01', '03', '07', '11', '12', '13', '16', '17', '41') & 
     orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo %notin% c('00', '01', '03') & 
     orgao_uge_orgao_maximo_codigo == '52000' & 
     acao_governo_codigo == '0181') ) %>% 
            summarise( saldo_r_item_informacao = sum(saldo_r_item_informacao)))%>%
  formatRound(c('saldo_r_item_informacao'), 2, mark = ".", dec.mark = ",")
```

```{r}
datatable(dados_despesa %>% group_by(orgao_uge_tipo_administracao_nome) %>%
            filter(
              grupo_despesa_codigo_grupo == 1,
              mes_lancamento == "MAI/2025" &
                     item_informacao_codigo == "13") %>% 
            filter( # Condições específicas (seguindo a lógica do SQL)
    (elemento_despesa_codigo %in% c('11', '16', '00')) |
    (elemento_despesa_codigo == '01' & orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo == '01' & orgao_uge_orgao_maximo_codigo == '52000' & acao_governo_codigo == '0181') |
    (elemento_despesa_codigo == '03' & orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo == '03' & orgao_uge_orgao_maximo_codigo == '52000' & acao_governo_codigo == '0181') |
    (elemento_despesa_codigo == '07' & orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo == '13' & orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo %notin% c('00', '01', '03', '07', '11', '12', '13', '16', '17', '41') & 
     orgao_uge_orgao_maximo_codigo != '52000') |
    (elemento_despesa_codigo %notin% c('00', '01', '03') & 
     orgao_uge_orgao_maximo_codigo == '52000' & 
     acao_governo_codigo == '0181') |
    (elemento_despesa_codigo %in% c('12', '17')) |
                     ( elemento_despesa_codigo %in% c('01') & orgao_uge_orgao_maximo_codigo %in% c('52000') &
                         acao_governo_codigo %notin% c('0181'))|
                     ( elemento_despesa_codigo %in% c('03') & orgao_uge_orgao_maximo_codigo %in% c('52000') &
                         acao_governo_codigo %notin% c('0181')) |
                    ( elemento_despesa_codigo %in% c('13') & orgao_uge_orgao_maximo_codigo %in% c('52000') ) ) %>% 
            summarise( saldo_r_item_informacao = sum(saldo_r_item_informacao)))%>%
  formatRound(c('saldo_r_item_informacao'), 2, mark = ".", dec.mark = ",")
```

```{r tabela_02_ok}
datatable(dados_despesa %>% group_by(orgao_uge_tipo_administracao_nome) %>%
            filter(
              grupo_despesa_codigo_grupo == 1,
              mes_lancamento == "MAI/2025" &
                     item_informacao_codigo == "25") %>% 
            filter( # Condições específicas (seguindo a lógica do SQL)
    # Elementos que se aplicam a todos os órgãos
  (elemento_despesa_codigo %in% c('11', '16', '00', '12', '17')) |
  
  # Elementos 01 e 03 - fora do Min. Defesa
  (elemento_despesa_codigo %in% c('01', '03') & 
   orgao_uge_orgao_maximo_codigo != '52000') |
  
  # Elementos 01 e 03 - Min. Defesa (todas as ações)
  (elemento_despesa_codigo %in% c('01', '03') & 
   orgao_uge_orgao_maximo_codigo == '52000') |
  
  # Elementos 07 e 13 - fora do Min. Defesa
  (elemento_despesa_codigo %in% c('07', '13') & 
   orgao_uge_orgao_maximo_codigo != '52000') |
  
  # Elemento 13 - Min. Defesa (todas as ações)
  (elemento_despesa_codigo == '13' & 
   orgao_uge_orgao_maximo_codigo == '52000') |
  
  # Outros elementos - fora do Min. Defesa
  (elemento_despesa_codigo %notin% c('00', '01', '03', '07', '11', '12', '13', '16', '17', '41') & 
   orgao_uge_orgao_maximo_codigo != '52000') |
  
  # Outros elementos (exceto 00,01,03) - Min. Defesa com ação 0181
  (elemento_despesa_codigo %notin% c('00', '01', '03') & 
   orgao_uge_orgao_maximo_codigo == '52000' & 
   acao_governo_codigo == '0181')) %>% 
            summarise( saldo_r_item_informacao = sum(saldo_r_item_informacao)))%>%
  formatRound(c('saldo_r_item_informacao'), 2, mark = ".", dec.mark = ",")
```
